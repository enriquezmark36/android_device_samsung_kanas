From c224cbfe1150fceef8a37565a2e37be818bf5e48 Mon Sep 17 00:00:00 2001
From: Mark Enriquez <enriquezmark36@gmail.com>
Date: Sun, 14 Jun 2020 15:08:44 +0800
Subject: [PATCH 2/2] shims: Add a new shim against the VSP library used in HW
 encoders

The newer (sc8830gX) encoder libraries (for h.264 AVC) can actually be used in
older hardware (for example, scx15), surprisingly. Porting the libstagefright
encoder code to the older platform is also straightforward.

But soon enough, one will see that the clocks aren't being set as intended.
The newer VSP lib expects the frequency table in the kernel to be sorted
in ascending order. The older platform's kernel has it in descending order.
One job of this shim is to translate the that IOCTL so that the newer VSP
lib's and the kernel driver's expectations are met.

In more recent VSP hardware, scene modes are supported. Of course, older
platforms do not support it but it can be faked so as to not raise
any error or suspension in the encoder.

Change-Id: Ie7aea56562f9550a777dcb0847f96cccb6b0adcb
Signed-off-by: Mark Enriquez <enriquezmark36@gmail.com>
---
 libshims/Android.mk   | 12 ++++++
 libshims/vsp_shim.cpp | 88 +++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 100 insertions(+)
 create mode 100644 libshims/vsp_shim.cpp

diff --git a/libshims/Android.mk b/libshims/Android.mk
index 842ceeb..dcaeee4 100644
--- a/libshims/Android.mk
+++ b/libshims/Android.mk
@@ -52,3 +52,15 @@ LOCAL_MODULE_TAGS := optional
 LOCAL_PROPRIETARY_MODULE := true
 LOCAL_MODULE_CLASS := SHARED_LIBRARIES
 include $(BUILD_SHARED_LIBRARY)
+
+include $(CLEAR_VARS)
+LOCAL_SRC_FILES := vsp_shim.cpp
+LOCAL_SHARED_LIBRARIES := liblog libcutils
+LOCAL_MODULE := libvsp_shim
+LOCAL_MODULE_TAGS := optional
+LOCAL_PROPRIETARY_MODULE := true
+LOCAL_MODULE_CLASS := SHARED_LIBRARIES
+LOCAL_C_INCLUDES := $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ/usr/include
+LOCAL_ADDITIONAL_DEPENDENCIES := $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ/usr
+include $(BUILD_SHARED_LIBRARY)
+
diff --git a/libshims/vsp_shim.cpp b/libshims/vsp_shim.cpp
new file mode 100644
index 0000000..e95af3d
--- /dev/null
+++ b/libshims/vsp_shim.cpp
@@ -0,0 +1,88 @@
+/*
+ * Copyright (C) 2020 The Android Open Source Project
+ *
+ * This is a shim layer to intercept IOCTL calls towards the VSP
+ * Kernel Driver particualrly the IOCTLs that change and check
+ * the parent clock currently in used. This will help use newer
+ * encoders that uses a newer VSP library get around the inverted
+ * frequency table problem on older kernel version. All of it, without
+ * requiring a kernel patch.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <dlfcn.h>
+#include <sys/ioctl.h>
+#include <stdio.h>
+
+#define LOG_NDEBUG 0
+#define LOG_TAG "VSP_SHIM"
+#include <cutils/log.h>
+
+#define SPRD_VSP_IOCTL_MAGIC 'm'
+#define VSP_CONFIG_FREQ _IOW(SPRD_VSP_IOCTL_MAGIC, 1, unsigned int)
+#define VSP_GET_FREQ    _IOR(SPRD_VSP_IOCTL_MAGIC, 2, unsigned int)
+
+
+static int (*real_ioctl)(int fd, int request, void *arg) =
+    (int (*)(int fd, int request, void *arg)) dlsym(RTLD_NEXT, "ioctl");
+
+extern "C" int ___VSP_CONFIG_DEV_FREQ(int fd, int *param) {
+	int mod_param;
+
+	mod_param = 3 - *param;
+
+	return real_ioctl(fd, VSP_CONFIG_FREQ, &mod_param);
+}
+
+extern "C" int ___VSP_GET_DEV_FREQ(int fd, int *param) {
+	int mod_param, ret;
+
+	ret = real_ioctl(fd, VSP_GET_FREQ, &mod_param);
+
+	if (!ret)
+		*param = 3 - mod_param;
+	else
+		*param = mod_param;
+
+	return ret;
+}
+
+
+extern "C" int ioctl(int fd, int req, ...)
+{
+	int ret;
+	unsigned int request = *((unsigned int *)(&req));
+	union {
+		void *p;
+		uint32_t *ulong_p;
+		uint16_t *uint_p;
+		int *int_p;
+	} param;
+
+	va_list ap;
+	va_start(ap, req);
+	param.p = va_arg(ap, void*);
+	va_end(ap);
+
+	if (request == VSP_CONFIG_FREQ) {
+		ret = ___VSP_CONFIG_DEV_FREQ(fd, param.int_p);
+	} else if (request == VSP_GET_FREQ) {
+		ret = ___VSP_CONFIG_DEV_FREQ(fd, param.int_p);
+	} else {
+		ret = real_ioctl(fd, request, param.p);
+	}
+
+	return ret;
+}
+
-- 
2.17.1

