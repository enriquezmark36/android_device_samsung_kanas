From ce45386e5607d636a79fc4cf29479fb3389d5fd9 Mon Sep 17 00:00:00 2001
From: Mark Enriquez <enriquezmark36@gmail.com>
Date: Tue, 21 Jan 2020 16:51:28 +0800
Subject: [PATCH 20/23] omx: avcenc: scx15: Latency tradeoffs on AndroidOpaque
 inputs larger than 480x800x2

The encoder seriously has some problems when the resolution is way beyond
it's intended capacity.

P-frames is the default output to conserve bandwidth by since it only sends the
"deltas" between the frame but it requires additional work for the encoder.
Where as I-frames just takes the whole image in a frame which should save some time
but at a cost of requiring a *much* higher bandwidth
(about 1-4 MegaBytes of bandwidth which should be okay for wifi direct).

To alleviate the high bandwidth requirement, the quantization parameter has been
increased and rate control has been disabled. This will reduce the bitrate at the
cost of quality and details.

This should drastically speed-up screen mirror/casting on middle to low tire devices.

PS. the rate control is whack as it fails to find the "just right" parameter
and causes a pulsating effect on the encoded video where the QP is seen
gradually rising then sharply falling afterwards.

PS2. Screen recording with the an area less than twice of 480*800 will not trigger
this change. The tradeoff occurs iff the area is at least twice larger.

Change-Id: I9819a43bf73923afafecb734101d63d8a78d8318
Signed-off-by: Mark Enriquez <enriquezmark36@gmail.com>
---
 .../avc_sprd/scx15/enc/SPRDAVCEncoder.cpp     | 30 +++++++++++++++++--
 .../video/avc_sprd/scx15/enc/SPRDAVCEncoder.h |  3 ++
 2 files changed, 30 insertions(+), 3 deletions(-)

diff --git a/omx_components/video/avc_sprd/scx15/enc/SPRDAVCEncoder.cpp b/omx_components/video/avc_sprd/scx15/enc/SPRDAVCEncoder.cpp
index 7b42be7..5ddc443 100644
--- a/omx_components/video/avc_sprd/scx15/enc/SPRDAVCEncoder.cpp
+++ b/omx_components/video/avc_sprd/scx15/enc/SPRDAVCEncoder.cpp
@@ -340,6 +340,7 @@ SPRDAVCEncoder::SPRDAVCEncoder(
       mIDRFrameRefreshIntervalInSec(1),
       mAVCEncProfile(AVC_BASELINE),
       mAVCEncLevel(AVC_LEVEL2),
+      mQP_IVOP(28),
       mNumInputFrames(-1),
       mPrevTimestampUs(-1),
       mStarted(false),
@@ -347,6 +348,8 @@ SPRDAVCEncoder::SPRDAVCEncoder(
       mReadyForNextFrame(true),
       mSawInputEOS(false),
       mSignalledError(false),
+      mRateCtrl(true),
+      mForceIDR(false),
       mStoreMetaData(OMX_FALSE),
       mIOMMUEnabled(false),
       mPbuf_yuv_v(NULL),
@@ -594,10 +597,10 @@ OMX_ERRORTYPE SPRDAVCEncoder::initEncParams() {
     }
 
     mEncConfig->h263En = 0;
-    mEncConfig->RateCtrlEnable = 1;
+    mEncConfig->RateCtrlEnable = mRateCtrl;
     mEncConfig->targetBitRate = mVideoBitRate;
     mEncConfig->FrameRate = mVideoFrameRate;
-    mEncConfig->QP_IVOP = 28;
+    mEncConfig->QP_IVOP = mQP_IVOP;
     mEncConfig->QP_PVOP = 28;
     mEncConfig->vbv_buf_size = mVideoBitRate/2;
     mEncConfig->profileAndLevel = 1;
@@ -633,6 +636,27 @@ OMX_ERRORTYPE SPRDAVCEncoder::initEncParams() {
 OMX_ERRORTYPE SPRDAVCEncoder::initEncoder() {
     CHECK(!mStarted);
 
+    /*
+     * Default to I-frames when using FormatAndroidOpaque
+     * Since the entire process with that format gets
+     * more expensive as the resolution grows since
+     * the buffer size grows exponentially along with the
+     * resolution.
+     *
+     * Otherwise, to conserve bandwidth, go with P-frames.
+     */
+    if ((mVideoColorFormat == OMX_COLOR_FormatAndroidOpaque) &&
+        (mVideoWidth * mVideoHeight) > 768000) {
+        mIDRFrameRefreshIntervalInSec = 0;
+        mRateCtrl = false;
+        mForceIDR = true;
+        mQP_IVOP = 31;
+
+
+        set_ddr_freq("400000");
+        mSetFreqCount ++;
+    }
+
     OMX_ERRORTYPE errType = OMX_ErrorNone;
     if (OMX_ErrorNone != (errType = initEncParams())) {
         ALOGE("Failed to initialized encoder params");
@@ -1330,7 +1354,7 @@ void SPRDAVCEncoder::onQueueFilled(OMX_U32 portIndex) {
 
             vid_in.time_stamp = (inHeader->nTimeStamp + 500) / 1000;  // in ms;
             vid_in.channel_quality = 1;
-            vid_in.vopType = (mNumInputFrames % mVideoFrameRate) ? 1 : 0;
+            vid_in.vopType = mForceIDR ? 0 : (mNumInputFrames % mVideoFrameRate) ? 1 : 0;
             vid_in.p_src_y = py;
             vid_in.p_src_v = 0;
             vid_in.p_src_y_phy = py_phy;
diff --git a/omx_components/video/avc_sprd/scx15/enc/SPRDAVCEncoder.h b/omx_components/video/avc_sprd/scx15/enc/SPRDAVCEncoder.h
index 41cc455..995856f 100644
--- a/omx_components/video/avc_sprd/scx15/enc/SPRDAVCEncoder.h
+++ b/omx_components/video/avc_sprd/scx15/enc/SPRDAVCEncoder.h
@@ -94,6 +94,7 @@ private:
     int32_t  mIDRFrameRefreshIntervalInSec;
     AVCProfile mAVCEncProfile;
     AVCLevel   mAVCEncLevel;
+    int32_t  mQP_IVOP;
 
     int64_t  mNumInputFrames;
     int64_t  mPrevTimestampUs;
@@ -103,6 +104,8 @@ private:
     bool     mSawInputEOS;
     bool     mSignalledError;
     //bool     mIsIDRFrame;
+    bool     mRateCtrl;
+    bool     mForceIDR;
 
     tagAVCHandle          *mHandle;
     tagAVCEncParam        *mEncParams;
-- 
2.24.0

