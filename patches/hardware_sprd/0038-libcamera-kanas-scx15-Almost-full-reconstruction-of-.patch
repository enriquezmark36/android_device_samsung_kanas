From c471debf7d3623035039d21d61952a186ba1e08f Mon Sep 17 00:00:00 2001
From: Mark Enriquez <enriquezmark36@gmail.com>
Date: Thu, 9 Apr 2020 20:30:50 +0800
Subject: [PATCH 1/2] libcamera: kanas: scx15: Almost full reconstruction of
 stock camera HAL

This commit will now pretty much finish the reconstruction and
reverse engineering of the stock or vendor supplied camera HAL blob.
This implementation borrows a lot from existing sources on the internet
and is somewhat more unstable than the vendor version. At least, this
version is opensource and is possible to workaround the Android O
camcorder problem.

Sources (s5k4ecgx sensor):
https://github.com/SscSPs/android_kernel_samsung_lt02-2/blob/master/drivers/media/video/s5k4ecgx.c
https://github.com/SscSPs/android_kernel_samsung_lt02-2/blob/master/drivers/media/video/s5k4ecgx_regs.h
https://android.googlesource.com/kernel/samsung/+/529a92f923d124b02c1b2011313b11e2f82a6960/drivers/media/video/s5k4ecgx.c
https://github.com/suapapa/android_vendor_insignal_hal_camera/blob/master/SecCamera.cpp
https://github.com/ICSACE/android_kernel_msm/blob/master/drivers/media/video/msm/s5k4ecgx.c
https://github.com/ICSACE/android_kernel_msm/blob/master/drivers/media/video/msm/5k4ecgx_evt1.h
https://github.com/zachariasmaladroit/GB_Bullet/blob/master/drivers/media/video/s5k4ecgx.c
https://github.com/zachariasmaladroit/GB_Bullet/blob/master/drivers/media/video/s5k4ecgx_regs_1_1.h

Sources (HI702 CCIR sensor)
https://github.com/afett/lg-roboking-linux/blob/0b2e08f29f3085573c032354c7dfa4b0a104c599/drivers/media/video/nexell/hi702.c
https://github.com/larixer/kernel.rk/blob/7ba191efe650de54f4c2dbc56a417c4fc36aa2ed/files/drivers/media/video/nexell/hi702.h

Here's a short list of features completed:
s5k4ecgx:
	Autofocus now works completely, still inferior to the vendor one.
	Macro AF
	Touch AF will now work (only does so in Macro AF in the vendor blob)
	Auto flash
	Auto and Manual white balance setings now works
	Auto fps, and a bunch of FPS settings (7,10,12,15,25,30) now works too.
	Video recording up to 1280x720 @ 30fps
	Common register Init are now have the previous comments.
	HDR support by actually altering exposure levels (no HDR in vendor).
	low light + night mode (different from night scene) capture (not in vendor)
	Image effects (including the solarization one)
	ISO settings (including that one unknown setting)
	Anti-banding settings (exluding the auto anti-banding setting)
	Scene Modes

hi702:
	AWB and MWB settings
	Manual Anti-banding setting
	Image effects
	Same register initializations as the vendor version
	Same erroneous resolutions

Change-Id: I7af12e5190b592c859883cde95fcf8434706ed2b
Signed-off-by: Mark Enriquez <enriquezmark36@gmail.com>
---
 .../sc8830/inc/SprdCameraHardwareConfig.h     |   84 +-
 libcamera/scx15/sensor/sensor_hi702_ccir.c    | 1059 +--
 libcamera/scx15/sensor/sensor_s5k4ecgx_mipi.c | 6689 +++--------------
 .../scx15/sensor/sensor_s5k4ecgx_regs_mipi.h  | 6111 +++++++++++++++
 4 files changed, 7955 insertions(+), 5988 deletions(-)
 create mode 100644 libcamera/scx15/sensor/sensor_s5k4ecgx_regs_mipi.h

diff --git a/libcamera/scx15/sc8830/inc/SprdCameraHardwareConfig.h b/libcamera/scx15/sc8830/inc/SprdCameraHardwareConfig.h
index 042e2e1..a6b3d7e 100644
--- a/libcamera/scx15/sc8830/inc/SprdCameraHardwareConfig.h
+++ b/libcamera/scx15/sc8830/inc/SprdCameraHardwareConfig.h
@@ -42,8 +42,13 @@ enum {
 
 enum {
 	CAMERA_SCENE_MODE_AUTO = 0,
-	CAMERA_SCENE_MODE_PORTRAIT,
-	CAMERA_SCENE_MODE_LANDSCAPE,
+	CAMERA_SCENE_MODE_NIGHT,
+	CAMERA_SCENE_MODE_ACTION, //not support
+	CAMERA_SCENE_MODE_PORTRAIT, //not support
+	CAMERA_SCENE_MODE_LANDSCAPE, //not support
+	CAMERA_SCENE_MODE_NORMAL,
+	CAMERA_SCENE_MODE_HDR,
+#ifdef CONFIG_CAMERA_KANAS
 	CAMERA_SCENE_MODE_SPORTS,
 	CAMERA_SCENE_MODE_PARTY,
 	CAMERA_SCENE_MODE_BEACH,
@@ -54,8 +59,7 @@ enum {
 	CAMERA_SCENE_MODE_CANDLELIGHT,
 	CAMERA_SCENE_MODE_FIREWORK,
 	CAMERA_SCENE_MODE_BACKLIGHT,
-	CAMERA_SCENE_MODE_NIGHT,
-	CAMERA_SCENE_MODE_HDR,
+#endif
 	CAMERA_SCENE_MODE_MAX
 };
 
@@ -162,6 +166,10 @@ enum {
 	CAMERA_ISO_400,
 	CAMERA_ISO_800,
 	CAMERA_ISO_1600,
+#ifdef CONFIG_CAMERA_KANAS
+	CAMERA_ISO_50,
+	CAMERA_ISO_300,
+#endif
 	CAMERA_ISO_MAX
 };
 
@@ -238,18 +246,6 @@ const struct str_map wb_map[] = {
 	{NULL, 0 }
 };
 
-#ifdef CONFIG_CAMERA_KANAS
-const struct str_map effect_map[] = {
-	{"none",            CAMERA_EFFECT_NONE},
-	{"mono",            CAMERA_EFFECT_MONO},
-	{"negative",        CAMERA_EFFECT_NEGATIVE},
-	{"sepia",           CAMERA_EFFECT_SEPIA},
-	{"red-tint",         CAMERA_EFFECT_RED},
-	{"green-tint",       CAMERA_EFFECT_GREEN},
-	{"blue-tint",        CAMERA_EFFECT_BLUE},
-	{NULL,              0}
-};
-#else
 const struct str_map effect_map[] = {
 	{"none",            CAMERA_EFFECT_NONE},
 	{"mono",            CAMERA_EFFECT_MONO},
@@ -260,15 +256,24 @@ const struct str_map effect_map[] = {
 	{"negative",        CAMERA_EFFECT_NEGATIVE},
 	{"sepia",           CAMERA_EFFECT_SEPIA},
 	{"cold",            CAMERA_EFFECT_BLUE},
+#ifdef CONFIG_CAMERA_KANAS
+	{"red-tint",        CAMERA_EFFECT_RED},
+	{"green-tint",      CAMERA_EFFECT_GREEN},
+	{"blue-tint",       CAMERA_EFFECT_BLUE},
+	{"solarize",        CAMERA_EFFECT_YELLOW},
+#endif
 	{NULL,              0}
 };
-#endif
 
-#ifdef CONFIG_CAMERA_KANAS
 const struct str_map scene_mode_map[] = {
 	{"auto",            CAMERA_SCENE_MODE_AUTO},
+	{"night",           CAMERA_SCENE_MODE_NIGHT},
 	{"portrait",        CAMERA_SCENE_MODE_PORTRAIT},
 	{"landscape",       CAMERA_SCENE_MODE_LANDSCAPE},
+	{"action",          CAMERA_SCENE_MODE_ACTION},
+	{"normal",          CAMERA_SCENE_MODE_NORMAL},
+	{"hdr",             CAMERA_SCENE_MODE_HDR},
+#ifdef CONFIG_CAMERA_KANAS
 	{"sports",          CAMERA_SCENE_MODE_SPORTS},
 	{"party",           CAMERA_SCENE_MODE_PARTY},
 	{"beach",           CAMERA_SCENE_MODE_BEACH},
@@ -278,23 +283,10 @@ const struct str_map scene_mode_map[] = {
 	{"text",            CAMERA_SCENE_MODE_TEXT},
 	{"candlelight",     CAMERA_SCENE_MODE_CANDLELIGHT},
 	{"firework",        CAMERA_SCENE_MODE_FIREWORK},
-	{"backlight",       CAMERA_SCENE_MODE_BACKLIGHT},
-	{"night",           CAMERA_SCENE_MODE_NIGHT},
-	{"hdr",             CAMERA_SCENE_MODE_HDR},
-	{NULL,              0}
-};
-#else
-const struct str_map scene_mode_map[] = {
-	{"auto",            CAMERA_SCENE_MODE_AUTO},
-	{"night",           CAMERA_SCENE_MODE_NIGHT},
-	{"portrait",        CAMERA_SCENE_MODE_PORTRAIT},
-	{"landscape",       CAMERA_SCENE_MODE_LANDSCAPE},
-	{"action",          CAMERA_SCENE_MODE_ACTION},
-	{"normal",          CAMERA_SCENE_MODE_NORMAL},
-	{"hdr",             CAMERA_SCENE_MODE_HDR},
+	{"back-light",       CAMERA_SCENE_MODE_BACKLIGHT},
+#endif
 	{NULL,              0}
 };
-#endif
 
 const struct str_map camera_id_map[] = {
 	{"back_camera",     CAMERA_CAMERA_ID_BACK},
@@ -365,6 +357,10 @@ const struct str_map iso_map[] = {
 	{"400",             CAMERA_ISO_400},
 	{"800",             CAMERA_ISO_800},
 	{"1600",            CAMERA_ISO_1600},
+#ifdef CONFIG_CAMERA_KANAS
+	{"50",              CAMERA_ISO_50},
+	{"300",             CAMERA_ISO_300},
+#endif
 	{NULL,              0}
 };
 
@@ -593,10 +589,15 @@ struct config_element sprd_back_camera_hardware_config[] = {
 	{"preview-size-values", "720x480,640x480,352x288,320x240,176x144"},
 #endif
 	{"preview-size", "640x480"},
+#else
+#ifdef CONFIG_CAMERA_KANAS
+	{"preview-size-values", "1280x720,960x540,720x540,800x480,720x480,640x480,352x288,320x240,176x144"},
+	{"preview-size", "800x480"},
 #else
 	{"preview-size-values", "1920x1088,1280x960,1280x720,960x540,720x540,720x480,640x480,352x288,320x240,176x144"},
 	{"preview-size", "640x480"},
 #endif
+#endif
 #ifdef CONFIG_CAMERA_KANAS
 	{"video-size-values", ""},
 #else
@@ -611,16 +612,23 @@ struct config_element sprd_back_camera_hardware_config[] = {
 	{"picture-format-values", "jpeg"},
 	{"picture-format", "jpeg"},
 	{"jpeg-quality", "100"},
+#ifdef CONFIG_CAMERA_KANAS
+	{"preview-frame-rate-values", "7,10,12,15,25,30"},
+	{"preview-frame-rate", "30"},
+	{"preview-fps-range-values", "(7000,30000)"},
+	{"preview-fps-range", "7000,30000"},
+#else
 	{"preview-frame-rate-values", "10,15,20,25,30,31"},
 	{"preview-frame-rate", "30"},
 	{"preview-fps-range-values", "(1000,30000)"},
 	{"preview-fps-range", "1000,30000"},
+#endif
 	{"jpeg-thumbnail-size-values", "640x480,0x0"},
 	{"jpeg-thumbnail-width","640"},
 	{"jpeg-thumbnail-height", "480"},
 	{"jpeg-thumbnail-quality", "70"},
 #ifdef CONFIG_CAMERA_KANAS
-	{"effect-values", "none,mono,red-tint,green-tint,blue-tint,negative,sepia"},
+	{"effect-values", "none,mono,red-tint,green-tint,blue-tint,negative,sepia,solarize"},
 #else
     {"effect-values", "none,mono,negative,sepia,cold,antique"},
 #endif
@@ -648,7 +656,7 @@ struct config_element sprd_back_camera_hardware_config[] = {
 	{"max-contrast", "6"},
 	{"contrast-values", "0,1,2,3,4,5,6"},
 	{"contrast", "3"}  ,
-#if 0
+#if CONFIG_CAMERA_KANAS
 	{"saturation-supported", "true"},
 	{"saturation-values", "0,1,2,3,4,5,6"},
 	{"saturation", "3"},
@@ -707,7 +715,11 @@ struct config_element sprd_back_camera_hardware_config[] = {
 #endif
 	{"iso-supported", "true"},
 	{"max-iso", "5"},
-	{"iso-values", "auto,100,200,400,800,1600"},
+#ifdef CONFIG_CAMERA_KANAS
+	{"iso-values", "auto,50,100,200,300,400"},
+#else
+	{"iso-values", "auto,50,100,200,400,800,1600"},
+#endif
 	{"iso", "auto"},
 	{"smile-snap-mode","0"},
 	{"hdr-supported","true"},
diff --git a/libcamera/scx15/sensor/sensor_hi702_ccir.c b/libcamera/scx15/sensor/sensor_hi702_ccir.c
index ae4b2ab..97c037f 100644
--- a/libcamera/scx15/sensor/sensor_hi702_ccir.c
+++ b/libcamera/scx15/sensor/sensor_hi702_ccir.c
@@ -56,6 +56,9 @@ LOCAL uint32_t set_hi702_video_mode(uint32_t mode);
 LOCAL uint32_t HI702_After_Snapshot(uint32_t param);
 LOCAL uint32_t HI702_BeforeSnapshot(uint32_t param);
 
+// Additional functions
+LOCAL uint32_t __HI702_WriteGroupRegs(SENSOR_REG_T* sensor_reg_ptr, char *name, int size);
+LOCAL uint32_t _HI702_WriteGroupRegs(SENSOR_REG_T* sensor_reg_ptr, char *name);
 
 /**---------------------------------------------------------------------------*
  ** 						Local Variables 								 *
@@ -67,368 +70,506 @@ LOCAL uint32_t HI702_BeforeSnapshot(uint32_t param);
         FLICKER_MAX
 }FLICKER_E;
 
-SENSOR_REG_T hi702_YUV_640X480[]=
-{
-
-/*
-{0x03,0x00},
-{0x01,0xf1},
-{0x01,0xf3},
-{0x01,0xf1},
-{0x03,0x20},
-{0x10,0x1c},
-{0x03,0x22},
-{0x10,0x7b},
-{0x03,0x00},
-{0x0b,0xaa},
-{0x0c,0xaa},
-{0x0d,0xaa},
-{0x10,0x00},
-{0x11,0x90},
-{0x12,0x04},
-{0x20,0x00},
-{0x21,0x06},
-{0x22,0x00},
-{0x23,0x06},
-{0x24,0x01},
-{0x25,0xe0},
-{0x26,0x02},
-{0x27,0x80},
-*/
-
-{0x03, 0x00},
-{0x01, 0xf1},
-{0x01, 0xf3},
-{0x01, 0xf1},
-
-{0x03, 0x20},//page 3
-{0x10, 0x1c},//ae off
-{0x03, 0x22},//page 4
-{0x10, 0x6b},//awb off
-
-
-{0x03, 0x00},
-{0x10, 0x00},
-{0x11, 0x90},
-{0x12, 0x04},
-{0x20, 0x04},
-{0x21, 0x06},
-{0x22, 0x00},
-{0x23, 0x06},
-{0x24, 0x01},
-{0x25, 0xe0},
-{0x26, 0x02},
-{0x27, 0x80},
-{0x40, 0x01},// Hblank 336
-{0x41, 0x50},
-
-{0x42, 0x00},// Vsync 170
-{0x43, 0xaa},
-
-////  BLC setting 090216 by steve
-{0x80, 0x3e},
-{0x81, 0x96},//add calvin 090410
-{0x82, 0x90},
-{0x83, 0x29},
-{0x84, 0x00},
-{0x85, 0x00},
-
-{0x90, 0x0a},
-{0x91, 0x0a},
-{0x92, 0x48},
-{0x93, 0x40},
-{0x94, 0x88},//add calvin 090410
-{0x95, 0x80},//add calvin 090410
-
-{0x98, 0x0e},
-{0xa0, 0x00},
-{0xa2, 0x01},
-{0xa4, 0x02},
-{0xa6, 0x01},
-{0xa8, 0x43},
-{0xaa, 0x46},
-{0xac, 0x42},
-{0xae, 0x41},
-
-{0x03, 0x02},
-{0x10, 0x00},
-{0x13, 0x00},
-{0x18, 0x0C},
-{0x19, 0x08},
-{0x1a, 0x00},
-{0x1b, 0x08},
-{0x1C, 0x00},
-{0x1D, 0x00},
-{0x20, 0x33},
-{0x21, 0x77},
-{0x22, 0xA4},
-{0x23, 0xb0},
-{0x31, 0x99},
-{0x32, 0x00},
-{0x33, 0x00},
-{0x34, 0x3C},
-{0x50, 0x21},
-{0x54, 0x30},
-{0x56, 0xfe},
-{0x62, 0x78},
-{0x63, 0x9E},
-{0x64, 0x78},
-{0x65, 0x9E},
-{0x72, 0x8A},
-{0x73, 0x9A},
-{0x74, 0x8A},
-{0x75, 0x9A},
-{0xa0, 0x03},
-{0xa8, 0x1D},
-{0xaa, 0x49},
-{0xbf, 0x14},
-
-{0x03, 0x10},//page 10:image effect
-{0x10, 0x03},//ISPCTL1
-{0x12, 0x30},//Y offet, dy offset enable
-{0x40, 0x00},
-{0x41, 0x00},  
-{0x50, 0x90},
-
-{0x60, 0x1f},
-{0x61, 0x88},
-{0x62, 0x88},
-{0x63, 0x30},
-{0x64, 0x80},
-
-{0x03, 0x11},
-{0x10, 0x1d},
-{0x11, 0x0e},
-{0x21, 0x04},
-{0x60, 0x04},
-{0x62, 0x43},
-{0x63, 0x63},
-
-{0x03, 0x12},
-{0x40, 0x23},
-{0x41, 0x37},
-{0x50, 0x04},
-{0x70, 0x1d},
-{0x74, 0x08},
-{0x75, 0x08},
-{0x91, 0x10},
-{0xd0, 0xb1},
-
-{0x03, 0x13},
-{0x10, 0x1f},
-{0x11, 0x07},
-{0x12, 0x01},
-{0x13, 0x02},
-{0x20, 0x03},
-{0x21, 0x03},
-{0x23, 0x14},
-{0x24, 0x01},
-{0x25, 0x00},
-
-{0x80, 0x1d},
-{0x81, 0x01},
-
-{0x83, 0x5d},
-
-{0x90, 0x01},
-{0x91, 0x01},
-{0x93, 0x15},
-{0x94, 0x01},
-{0x95, 0x00},
-
-{0x03, 0x14},
-{0x10, 0x01},
-{0x20, 0x80},
-{0x21, 0x80},
-{0x22, 0x69},
-{0x23, 0x56},
-{0x24, 0x4e},
-
-//  CMC
-{0x03, 0x15},
-{0x10, 0x03},
-{0x14, 0x58},
-{0x16, 0x40},
-{0x17, 0x3f},
-
-{0x30, 0xb3},
-{0x31, 0x29},
-{0x32, 0x0a},
-{0x33, 0x17},
-{0x34, 0xaf},
-{0x35, 0x18},
-{0x36, 0x02},
-{0x37, 0x2a},
-{0x38, 0x6c},
-
-{0x40, 0x00},
-{0x41, 0x00},
-{0x42, 0x00},
-{0x43, 0x00},
-{0x44, 0x00},
-{0x45, 0x00},
-{0x46, 0x00},
-{0x47, 0x00},
-{0x48, 0x00},
-
-{0x03, 0x16},
-{0x30, 0x00},
-{0x31, 0x13},
-{0x32, 0x1f},
-{0x33, 0x33},
-{0x34, 0x56},
-{0x35, 0x74},
-{0x36, 0x8d},
-{0x37, 0x9f},
-{0x38, 0xb0},
-{0x39, 0xbf},
-{0x3a, 0xca},
-{0x3b, 0xdb},
-{0x3c, 0xe5},
-{0x3d, 0xec},
-{0x3e, 0xf0},
-
-{0x03, 0x17},
-{0xc0, 0x03},
-
-{0xc4, 0x3c},
-{0xc5, 0x32},
-
-{0xc6, 0x02},
-{0xc7, 0x20},
-
-//PAGE 20
-{0x03, 0x20},
-{0x10, 0x1c},//100Hz
-{0x11, 0x00},
-
-{0x20, 0x01},
-{0x28, 0x0f},
-{0x29, 0xa3},
-{0x2a, 0xf0},
-{0x2b, 0x34},//1/120 Anti banding
-
-{0x30, 0x78},//0xf8->0x78 1/120 Anti banding
-
-{0x60, 0x80},
-
-{0x70, 0x42},
-
-{0x78, 0x11},//yth1
-{0x79, 0x26},//yth2
-{0x7A, 0x22},//yth3
-
-{0x83, 0x01},//EXP Normal 20.00 fps 
-{0x84, 0x24}, 
-{0x85, 0xf8}, 
-{0x86, 0x00},//EXPMin 6000.00 fps
-{0x87, 0xfa}, 
-{0x88, 0x02},//EXP Max 25.00 fps 
-{0x89, 0x49}, 
-{0x8a, 0xf0}, 
-{0x8B, 0x3a},//EXP100 
-{0x8C, 0x98}, 
-{0x8D, 0x30},//EXP120 
-{0x8E, 0xd4}, 
-{0x91, 0x01},//EXP Fix 17.02 fps
-{0x92, 0x33}, 
-{0x93, 0x9e}, 
-
-{0x98, 0x8c},//outdoor th1
-{0x99, 0x23},//outdoor th2
-
-{0x9c, 0x0b},//EXP Limit 857.14 fps 
-{0x9d, 0xb8}, 
-{0x9e, 0x00},//EXP Unit 
-{0x9f, 0xfa}, 
-
-{0xb0, 0x10},
-{0xb1, 0x10},
-{0xb2, 0x50},
-{0xb3, 0x10},
-{0xb4, 0x10},
-{0xb5, 0x30},
-{0xb6, 0x20},
-{0xb7, 0x1a},
-{0xb8, 0x18},
-{0xb9, 0x16},
-{0xba, 0x15},
-{0xbb, 0x14},
-{0xbc, 0x14},
-{0xbd, 0x13},
-
-{0xc0, 0x10},//skygain
-
-{0xc8, 0x90},
-{0xc9, 0x80},
-
-//Page 22
-
-{0x03, 0x22},
-{0x10, 0x6b},
-{0x11, 0x28},
-{0x21, 0x40},
-
-{0x30, 0x7e},
-{0x31, 0x80},
-{0x38, 0x12},
-{0x39, 0x66},
-
-{0x40, 0xf3},
-{0x41, 0x55},
-{0x42, 0x33},
-{0x43, 0xf0},
-{0x44, 0xaa},
-{0x45, 0x66},
-{0x46, 0x0a},
-
-{0x80, 0x4f},
-{0x81, 0x20},
-{0x82, 0x30},
-{0x83, 0x65},
-{0x84, 0x20},
-{0x85, 0x68},
-{0x86, 0x18},
-
-{0x87, 0x65},
-{0x88, 0x4e},
-{0x89, 0x3b},
-{0x8a, 0x20},
-
-{0x8b, 0x03},
-{0x8d, 0x14},
-{0x8e, 0x41},
-
-{0x8f, 0x61},
-{0x90, 0x61},
-{0x91, 0x61},
-{0x92, 0x55},
-{0x93, 0x48},
-{0x94, 0x46},
-{0x95, 0x46},
-{0x96, 0x46},
-{0x97, 0x35},
-{0x98, 0x28},
-{0x99, 0x28},
-{0x9a, 0x28},
-{0x9b, 0x05},
-
-{0xb4, 0xea},
-
-{0x03, 0x22},
-{0x10, 0xeb},
-
-{0x03, 0x20},
-{0x10, 0x9c},//50Hz
-
-{0x01, 0xf0},
-
-{SENSOR_WRITE_DELAY, 20},//delay 20ms
-
-
-
 
 
+LOCAL SENSOR_REG_T HI702_image_auto_fps[] = {
+	{0x0003, 0x0000},
+	{0x0001, 0x00F1},
+	{0x0003, 0x0000},
+	{0x0011, 0x0090},
+	{0x0042, 0x0001},
+	{0x0043, 0x0050},
+	{0x0090, 0x000C},
+	{0x0091, 0x000C},
+	{0x0092, 0x0078},
+	{0x0093, 0x0070},
+	{0x0003, 0x0020},
+	{0x0010, 0x001C},
+	{0x002A, 0x00F0},
+	{0x002B, 0x00F4},
+	{0x0030, 0x00F8},
+	{0x0088, 0x0002},
+	{0x0089, 0x00BF},
+	{0x008A, 0x0020},
+	{0x00B2, 0x0080},
+	{0x0003, 0x0020},
+	{0x0010, 0x009C},
+	{0x0003, 0x0000},
+	{0x0001, 0x00F0},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T HI702_wb_Auto[] = {
+	{0x0003, 0x0022},
+	{0x0010, 0x007B},
+	{0x0011, 0x002E},
+	{0x0080, 0x0039},
+	{0x0081, 0x0020},
+	{0x0082, 0x0035},
+	{0x0083, 0x0054},
+	{0x0084, 0x0020},
+	{0x0085, 0x0052},
+	{0x0086, 0x0020},
+	{0x0010, 0x00FB},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T HI702_wb_Incandescence[] = {
+	{0x0003, 0x0022},
+	{0x0010, 0x007B},
+	{0x0011, 0x0026},
+	{0x0080, 0x0020},
+	{0x0081, 0x0020},
+	{0x0082, 0x0057},
+	{0x0083, 0x0021},
+	{0x0084, 0x001D},
+	{0x0085, 0x0059},
+	{0x0086, 0x0056},
+	{0x0010, 0x00FB},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T HI702_wb_Fluorescent[] = {
+	{0x0003, 0x0022},
+	{0x0010, 0x007B},
+	{0x0011, 0x0026},
+	{0x0080, 0x0042},
+	{0x0081, 0x0020},
+	{0x0082, 0x0051},
+	{0x0083, 0x004A},
+	{0x0084, 0x003A},
+	{0x0085, 0x0055},
+	{0x0086, 0x0045},
+	{0x0010, 0x00FB},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T HI702_wb_Sun[] = {
+	{0x0003, 0x0022},
+	{0x0010, 0x007B},
+	{0x0011, 0x0026},
+	{0x0080, 0x0030},
+	{0x0081, 0x0020},
+	{0x0082, 0x0036},
+	{0x0083, 0x0031},
+	{0x0084, 0x002F},
+	{0x0085, 0x0037},
+	{0x0086, 0x0035},
+	{0x0010, 0x00FB},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T HI702_wb_Cloud[] = {
+	{0x0003, 0x0022},
+	{0x0010, 0x007B},
+	{0x0011, 0x0026},
+	{0x0080, 0x004F},
+	{0x0081, 0x0020},
+	{0x0082, 0x0025},
+	{0x0083, 0x0053},
+	{0x0084, 0x0048},
+	{0x0085, 0x0035},
+	{0x0086, 0x002B},
+	{0x0010, 0x00FB},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T HI702_image_effect_normal[] = {
+	{0x0003, 0x0010},
+	{0x0011, 0x0003},
+	{0x0012, 0x0030},
+	{0x0003, 0x0013},
+	{0x0010, 0x003B},
+	{0x0020, 0x0002},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T HI702_image_effect_blackwhite[] = {
+	{0x0003, 0x0010},
+	{0x0011, 0x0003},
+	{0x0012, 0x0033},
+	{0x0044, 0x0080},
+	{0x0045, 0x0080},
+	{0x0003, 0x0013},
+	{0x0010, 0x003B},
+	{0x0020, 0x0002},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T HI702_image_effect_negative[] = {
+	{0x0003, 0x0010},
+	{0x0011, 0x0003},
+	{0x0012, 0x0038},
+	{0x0003, 0x0013},
+	{0x0010, 0x003B},
+	{0x0020, 0x0002},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T HI702_image_effect_sepia[] = {
+	{0x0003, 0x0010},
+	{0x0011, 0x0003},
+	{0x0012, 0x0033},
+	{0x0044, 0x0070},
+	{0x0045, 0x0098},
+	{0x0003, 0x0013},
+	{0x0010, 0x003B},
+	{0x0020, 0x0002},
+	{0xFFFF, 0xFFFF},
+};
+
+// Only uses 1 Byte addresses and values
+SENSOR_REG_T hi702_YUV_640X480[] = {
+	{0x0003, 0x0000},
+	{0x0001, 0x00F1},
+	{0x0001, 0x00F3},
+	{0x0001, 0x00F1},
+
+	{0x0003, 0x0020},//page 3
+	{0x0010, 0x001C},//ae off
+	{0x0003, 0x0022},//page 4
+	{0x0010, 0x007B},//awb off
+
+	{0x0003, 0x0000},
+	{0x0010, 0x0000},
+	{0x0011, 0x0090},
+	{0x0012, 0x0004},
+	{0x0020, 0x0000},
+	{0x0021, 0x0006},
+	{0x0022, 0x0000},
+	{0x0023, 0x0006},
+	{0x0024, 0x0001},
+	{0x0025, 0x00E0},
+	{0x0026, 0x0002},
+	{0x0027, 0x0080},
+	{0x0040, 0x0001},
+	{0x0041, 0x0050}, // Hblank 336
+
+	{0x0042, 0x0001}, // Vsync 336
+	{0x0043, 0x0050},
+
+	////  BLC setting
+	{0x0080, 0x003E},
+	{0x0081, 0x0096},
+	{0x0082, 0x0090},
+	{0x0083, 0x0000},
+	{0x0084, 0x002C},
+
+	{0x0090, 0x000C},
+	{0x0091, 0x000C},
+	{0x0092, 0x0078},
+	{0x0093, 0x0070},
+	{0x0094, 0x0088},//add calvin 090410
+	{0x0095, 0x0080},//add calvin 090410
+
+	{0x0098, 0x0020},
+	{0x00A0, 0x0040},
+	{0x00A2, 0x0041},
+	{0x00A4, 0x0040},
+	{0x00A6, 0x0041},
+	{0x00A8, 0x0044},
+	{0x00AA, 0x0043},
+	{0x00AC, 0x0044},
+	{0x00AE, 0x0043},
+
+	{0x0003, 0x0002},
+	{0x0010, 0x0000},
+	{0x0013, 0x0000},
+	{0x0018, 0x001C},
+	{0x0019, 0x0000},
+	{0x001A, 0x0000},
+	{0x001B, 0x0008},
+	{0x001C, 0x0000},
+	{0x001D, 0x0000},
+	{0x0020, 0x0033},
+	{0x0021, 0x00AA},
+	{0x0022, 0x00A6},
+	{0x0023, 0x00B0},
+	{0x0031, 0x0099},
+	{0x0032, 0x0000},
+	{0x0033, 0x0000},
+	{0x0034, 0x003C},
+	{0x0050, 0x0021},
+	{0x0054, 0x0030},
+	{0x0056, 0x00FE},
+	{0x0062, 0x0078},
+	{0x0063, 0x009E},
+	{0x0064, 0x0078},
+	{0x0065, 0x009E},
+	{0x0072, 0x007A},
+	{0x0073, 0x009A},
+	{0x0074, 0x007A},
+	{0x0075, 0x009A},
+
+	{0x0082, 0x0009},
+	{0x0084, 0x0009},
+	{0x0086, 0x0009},
+
+	{0x00A0, 0x0003},
+	{0x00A8, 0x001D},
+	{0x00AA, 0x0049},
+
+	{0x00B9, 0x008A},
+	{0x00BB, 0x008A},
+	{0x00BC, 0x0004},
+	{0x00BD, 0x0010},
+	{0x00BE, 0x0004},
+	{0x00BF, 0x0010},
+
+	{0x0003, 0x0010},//page 10:image effect
+	{0x0010, 0x0003},//ISPCTL1
+	{0x0012, 0x0030},//Y offet, dy offset enable
+	{0x0040, 0x0080},
+	{0x0041, 0x0005},
+	{0x0050, 0x0078},
+
+	{0x0060, 0x001F},
+	{0x0061, 0x0085},
+	{0x0062, 0x0080},
+	{0x0063, 0x00F0},
+	{0x0064, 0x0080},
+
+	{0x0003, 0x0011},
+	{0x0010, 0x0099},
+	{0x0011, 0x0008},
+	{0x0021, 0x0029},
+	{0x0050, 0x0005},
+	{0x0060, 0x000F},
+	{0x0062, 0x0043},
+	{0x0063, 0x0063},
+	{0x0074, 0x0008},
+	{0x0075, 0x0008},
+
+	{0x0003, 0x0012},
+	{0x0040, 0x0023},
+	{0x0041, 0x003B},
+	{0x0050, 0x0005},
+	{0x0070, 0x001D},
+	{0x0074, 0x0005},
+	{0x0075, 0x0004},
+	{0x0077, 0x0020},
+	{0x0078, 0x0010},
+	{0x0091, 0x0034},
+	{0x00B0, 0x00C9},
+	{0x00D0, 0x00B1},
+
+	{0x0003, 0x0013},
+	{0x0010, 0x003B},
+	{0x0011, 0x0003},
+	{0x0012, 0x0000},
+	{0x0013, 0x0002},
+	{0x0014, 0x0000},
+	{0x0020, 0x0002},
+	{0x0021, 0x0001},
+	{0x0023, 0x0024},
+	{0x0024, 0x0006},
+	{0x0025, 0x0002},
+	{0x0028, 0x0000},
+	{0x0029, 0x00F0},
+	{0x0030, 0x00FF},
+
+	{0x0080, 0x000D},
+	{0x0081, 0x0013},
+
+
+	{0x0083, 0x005D},
+
+	{0x0090, 0x0003},
+	{0x0091, 0x0002},
+	{0x0093, 0x003D},
+	{0x0094, 0x0003},
+	{0x0095, 0x008F},
+
+	{0x0003, 0x0014},
+	{0x0010, 0x0001},
+	{0x0020, 0x0080},
+	{0x0021, 0x0078},
+	{0x0022, 0x0051},
+	{0x0023, 0x0040},
+	{0x0024, 0x003E},
+
+	//  CMC
+	{0x0003, 0x0015},
+	{0x0010, 0x0003},
+	{0x0014, 0x003C},
+	{0x0016, 0x002C},
+	{0x0017, 0x002F},
+
+
+	{0x0030, 0x00CB},
+	{0x0031, 0x0061},
+	{0x0032, 0x0016},
+	{0x0033, 0x0023},
+	{0x0034, 0x00CE},
+	{0x0035, 0x002B},
+	{0x0036, 0x0001},
+	{0x0037, 0x0034},
+	{0x0038, 0x0075},
+
+	{0x0040, 0x0087},
+	{0x0041, 0x0018},
+	{0x0042, 0x0091},
+	{0x0043, 0x0094},
+	{0x0044, 0x009F},
+	{0x0045, 0x0033},
+	{0x0046, 0x0000},
+	{0x0047, 0x0094},
+	{0x0048, 0x0014},
+
+	{0x0003, 0x0016},
+	{0x0010, 0x0001},
+	{0x0030, 0x0000},
+	{0x0031, 0x0009},
+	{0x0032, 0x001B},
+	{0x0033, 0x0035},
+	{0x0034, 0x005D},
+	{0x0035, 0x007A},
+	{0x0036, 0x0093},
+	{0x0037, 0x00A7},
+	{0x0038, 0x00B8},
+	{0x0039, 0x00C6},
+	{0x003A, 0x00D2},
+	{0x003B, 0x00E4},
+	{0x003C, 0x00F1},
+	{0x003D, 0x00F9},
+	{0x003E, 0x00FF},
+
+	//PAGE 20
+	{0x0003, 0x0020},
+	{0x0010, 0x001C},//100Hz
+	{0x0011, 0x0004},
+
+	{0x0020, 0x0001},
+	{0x0028, 0x003F},
+	{0x0029, 0x00A3},
+	{0x002A, 0x00F0},
+	{0x002B, 0x00F4},//?/??? Anti banding
+
+	{0x0030, 0x00F8},//0xf8->0x78 1/120 Anti banding
+
+	{0x0060, 0x00D5},
+	{0x0068, 0x0034},
+	{0x0069, 0x006E},
+	{0x006A, 0x0028},
+	{0x006B, 0x00C8},
+
+	{0x0070, 0x0034},
+
+	{0x0078, 0x0012},//yth1
+	{0x0079, 0x0011},//yth2
+	{0x007A, 0x0023},//yth3
+
+	{0x0083, 0x0000},//EXP Normal 20.00 fps
+	{0x0084, 0x00AF},
+	{0x0085, 0x00C8},
+	{0x0086, 0x0000},//EXPMin 6000.00 fps
+	{0x0087, 0x00FA},
+	{0x0088, 0x0002},//EXP Max 25.00 fps
+	{0x0089, 0x00BF},
+	{0x008A, 0x0020},
+	{0x008B, 0x003A},//EXP100
+	{0x008C, 0x0098},
+	{0x008D, 0x0030},//EXP120
+	{0x008E, 0x00D4},
+	{0x008F, 0x0004},//EXP140 ?
+	{0x0090, 0x0093},
+	{0x0091, 0x0002},//EXP Fix 17.02 fps
+	{0x0092, 0x00D2},
+	{0x0093, 0x00A8},
+
+	{0x0098, 0x008C},//outdoor th1
+	{0x0099, 0x0023},//outdoor th2
+
+	{0x009C, 0x0008},//EXP Limit 857.14 fps
+	{0x009D, 0x00CA},
+	{0x009E, 0x0000},//EXP Unit
+	{0x009F, 0x00FA},
+
+	{0x00B0, 0x0014},
+	{0x00B1, 0x0014},
+	{0x00B2, 0x0080},
+	{0x00B3, 0x0014},
+	{0x00B4, 0x001C},
+	{0x00B5, 0x0048},
+	{0x00B6, 0x0032},
+	{0x00B7, 0x002B},
+	{0x00B8, 0x0027},
+	{0x00B9, 0x0025},
+	{0x00BA, 0x0023},
+	{0x00BB, 0x0022},
+	{0x00BC, 0x0022},
+	{0x00BD, 0x0021},
+
+	{0x00C0, 0x0014},//skygain
+
+	{0x00C8, 0x0070},
+	{0x00C9, 0x0080},
+
+	//Page 22
+
+	{0x0003, 0x0022},
+	{0x0010, 0x00E2},
+	{0x0011, 0x0026},
+	{0x0021, 0x0004},
+
+	{0x0030, 0x0080},
+	{0x0031, 0x0080},
+	{0x0038, 0x0011},
+	{0x0039, 0x0033},
+
+	{0x0040, 0x00F0},
+	{0x0041, 0x0033},
+	{0x0042, 0x0033},
+	{0x0043, 0x00F3},
+	{0x0044, 0x0055},
+	{0x0045, 0x0044},
+	{0x0046, 0x0002},
+
+	{0x0050, 0x00D0},
+	{0x0051, 0x00A0},
+	{0x0052, 0x00AA},
+
+	{0x0080, 0x0040},
+	{0x0081, 0x0020},
+	{0x0082, 0x0038},
+	{0x0083, 0x0054},
+	{0x0084, 0x0023},
+	{0x0085, 0x0056},
+	{0x0086, 0x0020},
+
+	{0x0087, 0x0042},
+	{0x0088, 0x003A},
+	{0x0089, 0x0034},
+	{0x008A, 0x002E},
+
+	{0x008B, 0x0001},
+	{0x008D, 0x0022},
+	{0x008E, 0x0071},
+
+	{0x008F, 0x005C},
+	{0x0090, 0x0059},
+	{0x0091, 0x0056},
+	{0x0092, 0x0052},
+	{0x0093, 0x0046},
+	{0x0094, 0x003F},
+	{0x0095, 0x0037},
+	{0x0096, 0x0033},
+	{0x0097, 0x002C},
+	{0x0098, 0x0023},
+	{0x0099, 0x001C},
+	{0x009A, 0x0017},
+	{0x009B, 0x0009},
+
+	{0x0003, 0x0022},
+	{0x0010, 0x00FB},
+
+	{0x0003, 0x0020},
+	{0x0010, 0x009C},//50Hz
+
+	{0x0001, 0x00F0},
+
+	{0x00FF, 0x0014},
+	{0x00FF, 0x00FF},
 };
 
 LOCAL SENSOR_REG_TAB_INFO_T s_HI702_resolution_Tab_YUV[]=
@@ -599,7 +740,7 @@ LOCAL SENSOR_IOCTL_FUNC_TAB_T s_HI702_ioctl_func_tab =
  ** 							Function  Definitions
  **---------------------------------------------------------------------------*/
 LOCAL void HI702_WriteReg( uint8_t  subaddr, uint8_t data )
-{	
+{
 #ifndef	_USE_DSP_I2C_
         Sensor_WriteReg_8bits(subaddr, data);
 #else
@@ -622,8 +763,52 @@ LOCAL uint8_t HI702_ReadReg( uint8_t  subaddr)
         return value;
 }
 
+LOCAL uint32_t __HI702_WriteGroupRegs(SENSOR_REG_T* sensor_reg_ptr, char *name, int nmem)
+{
+	SENSOR_REG_TAB_INFO_T infotab = {};
+
+	if (nmem <= 0) {
+		SENSOR_PRINT_ERR("Not writing an illegal member count %d", nmem);
+		return -1;
+	}
+
+	if (name != NULL)
+		SENSOR_PRINT_HIGH("Writing [%s] table", name);
+
+	infotab.sensor_reg_tab_ptr = sensor_reg_ptr;
+	infotab.reg_count = nmem;
+	Sensor_SendRegTabToSensor(&infotab);
+
+	return 0;
+
+}
+
+LOCAL uint32_t _HI702_WriteGroupRegs(SENSOR_REG_T* sensor_reg_ptr, char *name)
+{
+	int i = 0;
+	for(; (0xFF != sensor_reg_ptr[i].reg_addr) || (0xFF != sensor_reg_ptr[i].reg_value) ; i++)
+		;
+
+	return __HI702_WriteGroupRegs(sensor_reg_ptr,name, i);
+}
+
+#define HI702_WriteGroupRegs(x) \
+do { \
+	__HI702_WriteGroupRegs(x, #x, (sizeof(x)/sizeof(x[0]))-1); \
+} while (0)
+
+
 LOCAL uint32_t _hi702_PowerOn(uint32_t power_on)
 {
+#ifndef CONFIG_CAMERA_IOCTL_IOCTL_HAS_POWER_ONOFF
+	/*
+	 * Some devices have a convenience IOCTL SENSOR_IO_POWER_ONOFF that
+	 * will handle the process of turning this on and off.
+	 * When the respective Flag is set, the HAL will attempt to call
+	 * that IOCTL only after the poweron function has been called.
+	 *
+	 * If that IOCTL is present, it is more favorable to use that instead.
+	 */
 	SENSOR_AVDD_VAL_E dvdd_val = g_HI702_yuv_info.dvdd_val;
 	SENSOR_AVDD_VAL_E avdd_val = g_HI702_yuv_info.avdd_val;
 	SENSOR_AVDD_VAL_E iovdd_val = g_HI702_yuv_info.iovdd_val;
@@ -633,25 +818,33 @@ LOCAL uint32_t _hi702_PowerOn(uint32_t power_on)
 
 
 	if (SENSOR_TRUE == power_on) {
-                Sensor_PowerDown(power_down);
-                SENSOR_Sleep(10);
                 // Open power
                 Sensor_SetVoltage(dvdd_val, avdd_val, iovdd_val); 
-                SENSOR_Sleep(20);
-                Sensor_SetMCLK(SENSOR_DEFALUT_MCLK);
-                SENSOR_Sleep(10);
+                SENSOR_Sleep(16);
+
                 Sensor_PowerDown(!power_down);
-                // Reset sensor
-                Sensor_Reset(reset_level);
-                SENSOR_Sleep(12);
+		SENSOR_Sleep(2);
+
+                Sensor_SetMCLK(SENSOR_DEFALUT_MCLK);
+                SENSOR_Sleep(5);
+
+		// Reset sensor
+                Sensor_Reset(!reset_level);
+                SENSOR_Sleep(60);
 	} else {
+		Sensor_Reset(reset_level);
+		SENSOR_Sleep(2);
+
 		Sensor_PowerDown(power_down);
+		SENSOR_Sleep(2);
+
 		Sensor_SetMCLK(SENSOR_DISABLE_MCLK);
-		SENSOR_Sleep(10);
+		SENSOR_Sleep(2);
 
 		Sensor_SetVoltage(SENSOR_AVDD_CLOSED, SENSOR_AVDD_CLOSED, SENSOR_AVDD_CLOSED);	
-		SENSOR_Sleep(10);
+		SENSOR_Sleep(5);
 	}
+#endif
 	SENSOR_PRINT("SENSOR_HI702: _hi702_Power_On(1:on, 0:off): %d ------sunaodebug----\n", power_on);
 	return SENSOR_SUCCESS;
 }
@@ -703,24 +896,22 @@ LOCAL uint32_t set_hi702_ae_enable(uint32_t enable)
 }
 LOCAL uint32_t set_hmirror_enable(uint32_t enable)
 {
-#if 0
-        uint8_t value = 0;	
-        value = HI702_ReadReg(0x14);
-        value = (value & 0xFE) | (enable == 1 ? 0 : 1); //landscape
+        uint8_t value;
+	HI702_WriteReg(0x03, 0x00);
+        value = HI702_ReadReg(0x11);
+        value = (value & 0xFE) | enable;
         SENSOR_TRACE("set_hmirror_enable: enable = %d, 0x14: 0x%x.\n", enable, value);
-        HI702_WriteReg(0x14, value);
-#endif		
+        HI702_WriteReg(0x11, value);
         return 0;
 }
 LOCAL uint32_t set_vmirror_enable(uint32_t enable)
 {
-#if 0
-        uint8_t value = 0;	
-        value = HI702_ReadReg(0x14);
+        uint8_t value;
+	HI702_WriteReg(0x03, 0x00);
+        value = HI702_ReadReg(0x11);
         value = (value & 0xFD) | ((enable & 0x1) << 1); //portrait
         SENSOR_TRACE("set_vmirror_enable: enable = %d, 0x14: 0x%x.\n", enable, value);
-        HI702_WriteReg(0x14, value);
-#endif		
+        HI702_WriteReg(0x11, value);
         return 0;
 }
 /******************************************************************************/
@@ -779,7 +970,7 @@ LOCAL uint32_t set_brightness(uint32_t level)
 }
 
 SENSOR_REG_T HI702_ev_tab[][3]=
-{   
+{
         {{0xd3, 0x48}, {0xb5, 0xd0},{0xff, 0xff}},
         {{0xd3, 0x50}, {0xb5, 0xe0},{0xff, 0xff}},
         {{0xd3, 0x58}, {0xb5, 0xf0},{0xff, 0xff}},
@@ -929,7 +1120,26 @@ LOCAL uint32_t set_hi702_awb(uint32_t mode)
                         HI702_WriteReg(sensor_reg_ptr[i].reg_addr, sensor_reg_ptr[i].reg_value);
                 }
         }
-#endif		
+#endif
+	switch(mode) {
+		case 0:
+			HI702_WriteGroupRegs(HI702_wb_Auto);
+			break;
+		case 1:
+			HI702_WriteGroupRegs(HI702_wb_Incandescence);
+			break;
+		case 4:
+			HI702_WriteGroupRegs(HI702_wb_Fluorescent);
+			break;
+		case 5:
+			HI702_WriteGroupRegs(HI702_wb_Sun);
+			break;
+		case 6:
+			HI702_WriteGroupRegs(HI702_wb_Cloud);
+			break;
+		default:
+			break;
+	}
         SENSOR_TRACE("SENSOR: set_awb_mode: mode = %d\n", mode);
 
         return 0;
@@ -1005,6 +1215,7 @@ LOCAL uint32_t set_preview_mode(uint32_t preview_mode)
         SENSOR_TRACE("set_preview_mode: preview_mode = %d\n", preview_mode);
 
         set_hi702_anti_flicker(0);
+	set_frame_rate(0);
 #if 0		
         switch (preview_mode) {
         case DCAMERA_ENVIRONMENT_NORMAL: 
@@ -1023,64 +1234,29 @@ LOCAL uint32_t set_preview_mode(uint32_t preview_mode)
         SENSOR_Sleep(10);
         return 0;
 }
-	
-SENSOR_REG_T HI702_image_effect_tab[][11]=	
-{
-        // effect normal
-        {
-                {0x23,0x00}, {0x2d,0x0a}, {0x20,0x7f}, {0xd2,0x90}, {0x73,0x00}, {0x77,0x78},
-                {0xb3,0x42}, {0xb4,0x80}, {0xba,0x00}, {0xbb,0x00}, {0xff,0xff}
-        },
-        //effect BLACKWHITE
-        {
-                {0x23,0x02}, {0x2d,0x0a}, {0x20,0x7f}, {0xd2,0x90}, {0x73,0x00},  
-                {0xb3,0x40},	{0xb4,0x80}, {0xba,0x00}, {0xbb,0x00}, {0xff,0xff}
-        },
-        // effect RED pink
-        {
-        //TODO: later work
-                {0x23,0x02},{0x2d,0x0a},{0x20,0x7f},{0xd2,0x90},{0x77,0x88},
-                {0xb3,0x40},{0xb4,0x80},{0xba,0x10},{0xbb,0x50},{0xff, 0xff}
-        },
-        // effect GREEN
-        {
-                {0x23,0x02},{0x2d,0x0a},{0x20,0x7f},{0xd2,0x90},{0x77,0x88},
-                {0xb3,0x40},{0xb4,0x80},{0xba,0xc0},{0xbb,0xc0},{0xff, 0xff}
-        },
-        // effect  BLUE
-        {
-                {0x23,0x02},{0x2d,0x0a},{0x20,0x7f},{0xd2,0x90},{0x73,0x00},
-                {0xb3,0x40},{0xb4,0x80},{0xba,0x50},{0xbb,0xe0},{0xff, 0xff}
-        },
-        // effect  YELLOW
-        {
-                //TODO:later work
-                {0x23,0x02},{0x2d,0x0a},{0x20,0x7f},{0xd2,0x90},{0x77,0x88},
-                {0xb3,0x40},{0xb4,0x80},{0xba,0x80},{0xbb,0x20},{0xff, 0xff}
-        },  
-        // effect NEGATIVE
-        {	     
-                {0x23,0x01},{0x2d,0x0a},{0x20,0x7f},{0xd2,0x90},{0x73,0x00},
-                {0xb3,0x40},{0xb4,0x80},{0xba,0x00},{0xbb,0x00},{0xff, 0xff}
-        },    
-        //effect ANTIQUE
-        {
-                {0x23,0x02},{0x2d,0x0a},{0x20,0x7f},{0xd2,0x90},{0x73,0x00},
-                {0xb3,0x40},{0xb4,0x80},{0xba,0xd0},{0xbb,0x28},{0xff, 0xff}
-        },
-};
+
 LOCAL uint32_t set_image_effect(uint32_t effect_type)
 {
-#if 0
-        uint16_t i;
-        SENSOR_REG_T* sensor_reg_ptr = (SENSOR_REG_T*)HI702_image_effect_tab[effect_type];
-        if(effect_type>7)
-                return 0;
-
-        for(i = 0; (0xFF != sensor_reg_ptr[i].reg_addr) || (0xFF != sensor_reg_ptr[i].reg_value) ; i++) {
-                Sensor_WriteReg_8bits(sensor_reg_ptr[i].reg_addr, sensor_reg_ptr[i].reg_value);
-        }
-#endif		
+	switch(effect_type) {
+		case 0:
+			HI702_WriteGroupRegs(HI702_image_effect_normal);
+			break;
+		case 1:
+			HI702_WriteGroupRegs(HI702_image_effect_blackwhite);
+			break;
+		case 6:
+			HI702_WriteGroupRegs(HI702_image_effect_negative);
+			break;
+		case 7:
+			HI702_WriteGroupRegs(HI702_image_effect_sepia);
+			break;
+		case 2:
+		case 3:
+		case 4:
+		case 5:
+		default:
+			break;
+	}
         SENSOR_TRACE("-----------set_image_effect: effect_type = %d------------\n", effect_type);
         return 0;
 }
@@ -1174,7 +1350,8 @@ LOCAL uint32_t read_gain_scale(uint32_t value)
 }
 LOCAL uint32_t set_frame_rate(uint32_t param)  
 {
-        //HI702_WriteReg( 0xd8, uint8_t data );
+        // Maybe implement fixed fps settings for 15fps, 20fps later
+	HI702_WriteGroupRegs(HI702_image_auto_fps);
         return 0;
 }
 #if 0
diff --git a/libcamera/scx15/sensor/sensor_s5k4ecgx_mipi.c b/libcamera/scx15/sensor/sensor_s5k4ecgx_mipi.c
index b9b66ac..3a37646 100644
--- a/libcamera/scx15/sensor/sensor_s5k4ecgx_mipi.c
+++ b/libcamera/scx15/sensor/sensor_s5k4ecgx_mipi.c
@@ -18,6 +18,10 @@
 #include "sensor.h"
 #include "jpeg_exif_header.h"
 #include "sensor_drv_u.h"
+#include "cmr_oem.h"
+
+#include "sensor_s5k4ecgx_regs_mipi.h"
+
 #ifdef	 __cplusplus
 	extern	 "C"
 	{
@@ -32,8 +36,32 @@
 #define EXPOSURE_ZONE_W 1280
 #define EXPOSURE_ZONE_H 960
 
-static uint32_t  g_flash_mode_en = 0;
-static uint32_t is_cap = 0;
+/*
+ * Light status values
+ * Or, we can use the camera_light_status_type
+ */
+#define LIGHT_STATUS_LOW_LEVEL 0x0032
+#define LIGHT_STATUS_IS_LOW(x) \
+	((x) < LIGHT_STATUS_LOW_LEVEL)
+#define LIGHT_STATUS_IS_NORMAL(x) \
+	(!LIGHT_STATUS_IS_LOW(x))
+
+LOCAL uint32_t is_cap = 0;
+LOCAL uint16_t s_current_shutter = 0;
+LOCAL uint16_t s_current_gain = 0;
+
+LOCAL uint16_t s_fps_cur_max = -1; // current max FPS (abs max is 30)
+LOCAL uint16_t s_current_env = 0; // 0 - Norm, 1 - Low Light, 2 - Night
+LOCAL uint16_t s_current_ev = 0;
+LOCAL uint16_t s_cur_scene = 0;
+LOCAL uint32_t s_flash_mode_en = 0;
+LOCAL uint32_t s_preview_mode = 0;
+LOCAL uint32_t s_white_balance = 0;
+
+// Local AF states
+LOCAL uint16_t s_focus_mode = 0;
+LOCAL  uint8_t s_using_low_light_af = 0;
+LOCAL  uint8_t s_af_wnd_has_changed = 0;
 
 LOCAL uint32_t _s5k4ec_InitExifInfo(void);
 LOCAL uint32_t _s5k4ec_GetResolutionTrimTab(uint32_t param);
@@ -41,4540 +69,44 @@ LOCAL uint32_t _s5k4ec_PowerOn(uint32_t power_on);
 LOCAL uint32_t _s5k4ec_Identify(uint32_t param);
 LOCAL uint32_t _s5k4ec_set_brightness(uint32_t level);
 LOCAL uint32_t _s5k4ec_set_contrast(uint32_t level);
-//LOCAL uint32_t _s5k4ec_set_sharpness(uint32_t level);
 LOCAL uint32_t _s5k4ec_set_saturation(uint32_t level);
 LOCAL uint32_t _s5k4ec_set_image_effect(uint32_t effect_type);
 LOCAL uint32_t _s5k4ec_set_ev(uint32_t level);
 LOCAL uint32_t _s5k4ec_set_anti_flicker(uint32_t mode);
 LOCAL uint32_t _s5k4ec_set_video_mode(uint32_t mode);
 LOCAL uint32_t _s5k4ec_set_awb(uint32_t mode);
-LOCAL uint32_t _s5k4ec_set_work_mode(uint32_t mode);
+LOCAL uint32_t _s5k4ec_set_scene_mode(uint32_t mode);
 LOCAL uint32_t _s5k4ec_BeforeSnapshot(uint32_t param);
 LOCAL uint32_t _s5k4ec_check_image_format_support(uint32_t param);
 LOCAL uint32_t _s5k4ec_pick_out_jpeg_stream(uint32_t param);
 LOCAL uint32_t _s5k4ec_after_snapshot(uint32_t param);
-LOCAL uint32_t _s5k4ec_flash(uint32_t param);
 LOCAL uint32_t _s5k4ec_GetExifInfo(uint32_t param);
 LOCAL uint32_t _s5k4ec_ExtFunc(uint32_t ctl_param);
 LOCAL uint32_t _s5k4ec_StreamOn(uint32_t param);
 LOCAL uint32_t _s5k4ec_set_iso(uint32_t level);
-LOCAL uint32_t _s5k4ec_StreamOff(uint32_t param);
 LOCAL uint32_t _s5k4ec_recovery_init();
 
-LOCAL const SENSOR_REG_T s5k4ec_common_init[]=
-{
-//===============================================================
-// 02.ETC Setting
-//==============================================================
-
-	{0x0028, 0xD000}, //02.ETC Setting
-	{0x002A, 0x1082},
-	{0x0F12, 0x0155},
-	{0x002A, 0x1084},
-	{0x0F12, 0x0155},
-	{0x002A, 0x1086},
-	{0x0F12, 0x0055},
-	{0x002A, 0x1088},
-	{0x0F12, 0x0555},
-	{0x002A, 0x100E},
-	{0x0F12, 0x0000},
-
-
-//==================================================================================
-// 03.Analog Setting1 & ASP Control
-//==================================================================================
-//This register is for FACTORY ONLY.
-//If you change it without prior notification
-// YOU are RESPONSIBLE for the FAILURE that will happen in the future.
-
-	{0x0028, 0xD000}, // 03.Analog Setting & ASP Control-1
-	{0x002A, 0x007A},
-	{0x0F12, 0x0000},	//config_clk_setting
-	{0x002A, 0xE406},
-	{0x0F12, 0x0092},	//adlc_enable
-	{0x002A, 0xE410},
-	{0x0F12, 0x3804},	//adlc_fadlc_filter_co
-	{0x002A, 0xE41A},
-	{0x0F12, 0x0010},	//adlc_ptune_total
-	{0x002A, 0xF132},
-	{0x0F12, 0x0200},
-	{0x002A, 0xF142},
-	{0x0F12, 0x0200}, //110404 AE haunting - from_LSI
-	{0x002A, 0xE420},
-	{0x0F12, 0x0003}, //adlc_fadlc_filter_refresh
-	{0x0F12, 0x0060},	//adlc_filter_level_diff_threshold
-	{0x002A, 0xE42E},
-	{0x0F12, 0x0004},	//adlc_qec
-	{0x002A, 0xF400},
-	{0x0F12, 0x5A3C}, //aig_shutter_width
-	{0x0F12, 0x0023}, //aig_cds_tune
-	{0x0F12, 0x8080}, //aig_cds_option
-	{0x0F12, 0x03AF}, //aig_mx
-	{0x0F12, 0x000A}, //aig_mode_en
-	{0x0F12, 0xAA54}, //aig_ms
-	{0x0F12, 0x0040}, //aig_rmp_tune_1
-	{0x0F12, 0x464E}, //aig_rmp_tune_2
-	{0x0F12, 0x0240}, //aig_bist_sig_width_e
-	{0x0F12, 0x0240}, //aig_bist_sig_width_o
-	{0x0F12, 0x0040}, //aig_dbs_bist
-	{0x0F12, 0x1000}, //aig_dbs_tune
-	{0x0F12, 0x55FF}, //aig_bias_tune
-	{0x0F12, 0xD000}, //aig_ref_tune_1
-	{0x0F12, 0x0010}, //aig_ref_tune_2
-	{0x0F12, 0x0202}, //aig_reg_tune_1
-	{0x0F12, 0x0401}, //aig_reg_tune_2
-	{0x0F12, 0x0022}, //aig_rosc_tune
-	{0x0F12, 0x0088}, //aig_dbr_tune_1
-	{0x0F12, 0x009F}, //aig_dbr_tune_2
-	{0x0F12, 0x0000}, //aig_bist_en_cintr
-	{0x0F12, 0x1800}, //aig_vdec_tune
-	{0x0F12, 0x0088}, //aig_pmg_reg_tune
-	{0x0F12, 0x0000}, //aig_pmg_tune_1
-	{0x0F12, 0x2428}, //aig_shutter_gap
-	{0x0F12, 0x0000}, //aig_atx_option
-	{0x0F12, 0x03EE}, //aig_avg_half
-	{0x0F12, 0x0000}, //aig_hvs_test_reg
-	{0x0F12, 0x0000}, //aig_dbus_bist_auto
-	{0x0F12, 0x0000},	//aig_dbr_option
-	{0x002A, 0xF552},
-	{0x0F12, 0x0708}, //aig_1h_time_1
-	{0x0F12, 0x080C},	//aig_1h_time_2
-
-
-
-//===================================================================
-// Trap & Patch
-//===================================================================
-
-// TnP setting
-// Start of Patch data
-	{0x0028, 0x7000}, // 05.Trap and Patch
-	{0x002A, 0x3AF8},
-	{0x0F12, 0xB5F8},
-	{0x0F12, 0x4B44},
-	{0x0F12, 0x4944},
-	{0x0F12, 0x4845},
-	{0x0F12, 0x2200},
-	{0x0F12, 0xC008},
-	{0x0F12, 0x6001},
-	{0x0F12, 0x4944},
-	{0x0F12, 0x4844},
-	{0x0F12, 0x2401},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFCA4},
-	{0x0F12, 0x4943},
-	{0x0F12, 0x4844},
-	{0x0F12, 0x2702},
-	{0x0F12, 0x0022},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFC9E},
-	{0x0F12, 0x0260},
-	{0x0F12, 0x4C42},
-	{0x0F12, 0x8020},
-	{0x0F12, 0x2600},
-	{0x0F12, 0x8066},
-	{0x0F12, 0x4941},
-	{0x0F12, 0x4841},
-	{0x0F12, 0x6041},
-	{0x0F12, 0x4941},
-	{0x0F12, 0x4842},
-	{0x0F12, 0x003A},
-	{0x0F12, 0x2503},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFC90},
-	{0x0F12, 0x483D},
-	{0x0F12, 0x4940},
-	{0x0F12, 0x30C0},
-	{0x0F12, 0x63C1},
-	{0x0F12, 0x4F3B},
-	{0x0F12, 0x483F},
-	{0x0F12, 0x3F80},
-	{0x0F12, 0x6438},
-	{0x0F12, 0x483E},
-	{0x0F12, 0x493F},
-	{0x0F12, 0x6388},
-	{0x0F12, 0x002A},
-	{0x0F12, 0x493E},
-	{0x0F12, 0x483F},
-	{0x0F12, 0x2504},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFC7F},
-	{0x0F12, 0x002A},
-	{0x0F12, 0x493D},
-	{0x0F12, 0x483E},
-	{0x0F12, 0x2505},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF8A7},
-	{0x0F12, 0x483C},
-	{0x0F12, 0x002A},
-	{0x0F12, 0x493C},
-	{0x0F12, 0x2506},
-	{0x0F12, 0x1D80},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF8A0},
-	{0x0F12, 0x4838},
-	{0x0F12, 0x002A},
-	{0x0F12, 0x4939},
-	{0x0F12, 0x2507},
-	{0x0F12, 0x300C},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF899},
-	{0x0F12, 0x4835},
-	{0x0F12, 0x002A},
-	{0x0F12, 0x4937},
-	{0x0F12, 0x2508},
-	{0x0F12, 0x3010},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF892},
-	{0x0F12, 0x002A},
-	{0x0F12, 0x4935},
-	{0x0F12, 0x4835},
-	{0x0F12, 0x2509},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFC5E},
-	{0x0F12, 0x002A},
-	{0x0F12, 0x4934},
-	{0x0F12, 0x4834},
-	{0x0F12, 0x250A},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFC58},
-	{0x0F12, 0x002A},
-	{0x0F12, 0x4933},
-	{0x0F12, 0x4833},
-	{0x0F12, 0x250B},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFC52},
-	{0x0F12, 0x002A},
-	{0x0F12, 0x4932},
-	{0x0F12, 0x4832},
-	{0x0F12, 0x250C},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFC4C},
-	{0x0F12, 0x002A},
-	{0x0F12, 0x4931},
-	{0x0F12, 0x4831},
-	{0x0F12, 0x250D},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFC46},
-	{0x0F12, 0x002A},
-	{0x0F12, 0x4930},
-	{0x0F12, 0x4830},
-	{0x0F12, 0x250E},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFC40},
-	{0x0F12, 0x002A},
-	{0x0F12, 0x492F},
-	{0x0F12, 0x482F},
-	{0x0F12, 0x250F},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFC3A},
-	{0x0F12, 0x8626},
-	{0x0F12, 0x20FF},
-	{0x0F12, 0x1C40},
-	{0x0F12, 0x8660},
-	{0x0F12, 0x482C},
-	{0x0F12, 0x64F8},
-	{0x0F12, 0x492C},
-	{0x0F12, 0x482D},
-	{0x0F12, 0x2410},
-	{0x0F12, 0x002A},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFC2E},
-	{0x0F12, 0x492B},
-	{0x0F12, 0x482C},
-	{0x0F12, 0x0022},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFC29},
-	{0x0F12, 0xBCF8},
-	{0x0F12, 0xBC08},
-	{0x0F12, 0x4718},
-	{0x0F12, 0x019C},
-	{0x0F12, 0x4EC2},
-	{0x0F12, 0x73FF},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x1F90},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x3CCD},
-	{0x0F12, 0x7000},
-	{0x0F12, 0xE38B},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x3D05},
-	{0x0F12, 0x7000},
-	{0x0F12, 0xC3B1},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4780},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x3D63},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x0080},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x3D9F},
-	{0x0F12, 0x7000},
-	{0x0F12, 0xB49D},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x3E4B},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x3DFF},
-	{0x0F12, 0x7000},
-	{0x0F12, 0xFFFF},
-	{0x0F12, 0x00FF},
-	{0x0F12, 0x17E0},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x3FC7},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x053D},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0A89},
-	{0x0F12, 0x6CD2},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x02C9},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0A9A},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x02D2},
-	{0x0F12, 0x4015},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x9E65},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4089},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x7C49},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x40FD},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x7C63},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4119},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x8F01},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x41BB},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x7F3F},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4249},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x98C5},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x43B5},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x6099},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x430F}, // End of TnP
-	{0x0F12, 0x7000},
-	{0x0F12, 0x4365},
-	{0x0F12, 0x7000},
-	{0x0F12, 0xA70B},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4387},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x400D},
-	{0x0F12, 0x0000},
-	{0x0F12, 0xB570},
-	{0x0F12, 0x000C},
-	{0x0F12, 0x0015},
-	{0x0F12, 0x0029},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFBD4},
-	{0x0F12, 0x49F8},
-	{0x0F12, 0x00A8},
-	{0x0F12, 0x500C},
-	{0x0F12, 0xBC70},
-	{0x0F12, 0xBC08},
-	{0x0F12, 0x4718},
-	{0x0F12, 0x6808},
-	{0x0F12, 0x0400},
-	{0x0F12, 0x0C00},
-	{0x0F12, 0x6849},
-	{0x0F12, 0x0409},
-	{0x0F12, 0x0C09},
-	{0x0F12, 0x4AF3},
-	{0x0F12, 0x8992},
-	{0x0F12, 0x2A00},
-	{0x0F12, 0xD00D},
-	{0x0F12, 0x2300},
-	{0x0F12, 0x1A89},
-	{0x0F12, 0xD400},
-	{0x0F12, 0x000B},
-	{0x0F12, 0x0419},
-	{0x0F12, 0x0C09},
-	{0x0F12, 0x23FF},
-	{0x0F12, 0x33C1},
-	{0x0F12, 0x1810},
-	{0x0F12, 0x4298},
-	{0x0F12, 0xD800},
-	{0x0F12, 0x0003},
-	{0x0F12, 0x0418},
-	{0x0F12, 0x0C00},
-	{0x0F12, 0x4AEB},
-	{0x0F12, 0x8150},
-	{0x0F12, 0x8191},
-	{0x0F12, 0x4770},
-	{0x0F12, 0xB5F3},
-	{0x0F12, 0x0004},
-	{0x0F12, 0xB081},
-	{0x0F12, 0x9802},
-	{0x0F12, 0x6800},
-	{0x0F12, 0x0600},
-	{0x0F12, 0x0E00},
-	{0x0F12, 0x2201},
-	{0x0F12, 0x0015},
-	{0x0F12, 0x0021},
-	{0x0F12, 0x3910},
-	{0x0F12, 0x408A},
-	{0x0F12, 0x40A5},
-	{0x0F12, 0x4FE4},
-	{0x0F12, 0x0016},
-	{0x0F12, 0x2C10},
-	{0x0F12, 0xDA03},
-	{0x0F12, 0x8839},
-	{0x0F12, 0x43A9},
-	{0x0F12, 0x8039},
-	{0x0F12, 0xE002},
-	{0x0F12, 0x8879},
-	{0x0F12, 0x43B1},
-	{0x0F12, 0x8079},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFBA0},
-	{0x0F12, 0x2C10},
-	{0x0F12, 0xDA03},
-	{0x0F12, 0x8839},
-	{0x0F12, 0x4329},
-	{0x0F12, 0x8039},
-	{0x0F12, 0xE002},
-	{0x0F12, 0x8879},
-	{0x0F12, 0x4331},
-	{0x0F12, 0x8079},
-	{0x0F12, 0x49DA},
-	{0x0F12, 0x8809},
-	{0x0F12, 0x2900},
-	{0x0F12, 0xD102},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFB99},
-	{0x0F12, 0x2000},
-	{0x0F12, 0x9902},
-	{0x0F12, 0x6008},
-	{0x0F12, 0xBCFE},
-	{0x0F12, 0xBC08},
-	{0x0F12, 0x4718},
-	{0x0F12, 0xB538},
-	{0x0F12, 0x9C04},
-	{0x0F12, 0x0015},
-	{0x0F12, 0x002A},
-	{0x0F12, 0x9400},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFB94},
-	{0x0F12, 0x4AD1},
-	{0x0F12, 0x8811},
-	{0x0F12, 0x2900},
-	{0x0F12, 0xD00F},
-	{0x0F12, 0x8820},
-	{0x0F12, 0x4281},
-	{0x0F12, 0xD20C},
-	{0x0F12, 0x8861},
-	{0x0F12, 0x8853},
-	{0x0F12, 0x4299},
-	{0x0F12, 0xD200},
-	{0x0F12, 0x1E40},
-	{0x0F12, 0x0400},
-	{0x0F12, 0x0C00},
-	{0x0F12, 0x8020},
-	{0x0F12, 0x8851},
-	{0x0F12, 0x8061},
-	{0x0F12, 0x4368},
-	{0x0F12, 0x1840},
-	{0x0F12, 0x6060},
-	{0x0F12, 0xBC38},
-	{0x0F12, 0xBC08},
-	{0x0F12, 0x4718},
-	{0x0F12, 0xB5F8},
-	{0x0F12, 0x0004},
-	{0x0F12, 0x6808},
-	{0x0F12, 0x0400},
-	{0x0F12, 0x0C00},
-	{0x0F12, 0x2201},
-	{0x0F12, 0x0015},
-	{0x0F12, 0x0021},
-	{0x0F12, 0x3910},
-	{0x0F12, 0x408A},
-	{0x0F12, 0x40A5},
-	{0x0F12, 0x4FBE},
-	{0x0F12, 0x0016},
-	{0x0F12, 0x2C10},
-	{0x0F12, 0xDA03},
-	{0x0F12, 0x8839},
-	{0x0F12, 0x43A9},
-	{0x0F12, 0x8039},
-	{0x0F12, 0xE002},
-	{0x0F12, 0x8879},
-	{0x0F12, 0x43B1},
-	{0x0F12, 0x8079},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFB6D},
-	{0x0F12, 0x2C10},
-	{0x0F12, 0xDA03},
-	{0x0F12, 0x8838},
-	{0x0F12, 0x4328},
-	{0x0F12, 0x8038},
-	{0x0F12, 0xE002},
-	{0x0F12, 0x8878},
-	{0x0F12, 0x4330},
-	{0x0F12, 0x8078},
-	{0x0F12, 0x48B6},
-	{0x0F12, 0x8800},
-	{0x0F12, 0x0400},
-	{0x0F12, 0xD507},
-	{0x0F12, 0x4BB5},
-	{0x0F12, 0x7819},
-	{0x0F12, 0x4AB5},
-	{0x0F12, 0x7810},
-	{0x0F12, 0x7018},
-	{0x0F12, 0x7011},
-	{0x0F12, 0x49B4},
-	{0x0F12, 0x8188},
-	{0x0F12, 0xBCF8},
-	{0x0F12, 0xBC08},
-	{0x0F12, 0x4718},
-	{0x0F12, 0xB538},
-	{0x0F12, 0x48B2},
-	{0x0F12, 0x4669},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFB58},
-	{0x0F12, 0x48B1},
-	{0x0F12, 0x49B0},
-	{0x0F12, 0x69C2},
-	{0x0F12, 0x2400},
-	{0x0F12, 0x31A8},
-	{0x0F12, 0x2A00},
-	{0x0F12, 0xD008},
-	{0x0F12, 0x61C4},
-	{0x0F12, 0x684A},
-	{0x0F12, 0x6242},
-	{0x0F12, 0x6282},
-	{0x0F12, 0x466B},
-	{0x0F12, 0x881A},
-	{0x0F12, 0x6302},
-	{0x0F12, 0x885A},
-	{0x0F12, 0x6342},
-	{0x0F12, 0x6A02},
-	{0x0F12, 0x2A00},
-	{0x0F12, 0xD00A},
-	{0x0F12, 0x6204},
-	{0x0F12, 0x6849},
-	{0x0F12, 0x6281},
-	{0x0F12, 0x466B},
-	{0x0F12, 0x8819},
-	{0x0F12, 0x6301},
-	{0x0F12, 0x8859},
-	{0x0F12, 0x6341},
-	{0x0F12, 0x49A5},
-	{0x0F12, 0x88C9},
-	{0x0F12, 0x63C1},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFB40},
-	{0x0F12, 0xE7A6},
-	{0x0F12, 0xB5F0},
-	{0x0F12, 0xB08B},
-	{0x0F12, 0x20FF},
-	{0x0F12, 0x1C40},
-	{0x0F12, 0x49A1},
-	{0x0F12, 0x89CC},
-	{0x0F12, 0x4E9E},
-	{0x0F12, 0x6AB1},
-	{0x0F12, 0x4284},
-	{0x0F12, 0xD101},
-	{0x0F12, 0x489F},
-	{0x0F12, 0x6081},
-	{0x0F12, 0x6A70},
-	{0x0F12, 0x0200},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFB37},
-	{0x0F12, 0x0400},
-	{0x0F12, 0x0C00},
-	{0x0F12, 0x4A96},
-	{0x0F12, 0x8A11},
-	{0x0F12, 0x9109},
-	{0x0F12, 0x2101},
-	{0x0F12, 0x0349},
-	{0x0F12, 0x4288},
-	{0x0F12, 0xD200},
-	{0x0F12, 0x0001},
-	{0x0F12, 0x4A92},
-	{0x0F12, 0x8211},
-	{0x0F12, 0x4D97},
-	{0x0F12, 0x8829},
-	{0x0F12, 0x9108},
-	{0x0F12, 0x4A8B},
-	{0x0F12, 0x2303},
-	{0x0F12, 0x3222},
-	{0x0F12, 0x1F91},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFB28},
-	{0x0F12, 0x8028},
-	{0x0F12, 0x488E},
-	{0x0F12, 0x4987},
-	{0x0F12, 0x6BC2},
-	{0x0F12, 0x6AC0},
-	{0x0F12, 0x4282},
-	{0x0F12, 0xD201},
-	{0x0F12, 0x8CC8},
-	{0x0F12, 0x8028},
-	{0x0F12, 0x88E8},
-	{0x0F12, 0x9007},
-	{0x0F12, 0x2240},
-	{0x0F12, 0x4310},
-	{0x0F12, 0x80E8},
-	{0x0F12, 0x2000},
-	{0x0F12, 0x0041},
-	{0x0F12, 0x194B},
-	{0x0F12, 0x001E},
-	{0x0F12, 0x3680},
-	{0x0F12, 0x8BB2},
-	{0x0F12, 0xAF04},
-	{0x0F12, 0x527A},
-	{0x0F12, 0x4A7D},
-	{0x0F12, 0x188A},
-	{0x0F12, 0x8897},
-	{0x0F12, 0x83B7},
-	{0x0F12, 0x33A0},
-	{0x0F12, 0x891F},
-	{0x0F12, 0xAE01},
-	{0x0F12, 0x5277},
-	{0x0F12, 0x8A11},
-	{0x0F12, 0x8119},
-	{0x0F12, 0x1C40},
-	{0x0F12, 0x0400},
-	{0x0F12, 0x0C00},
-	{0x0F12, 0x2806},
-	{0x0F12, 0xD3E9},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFB09},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFB0F},
-	{0x0F12, 0x4F79},
-	{0x0F12, 0x37A8},
-	{0x0F12, 0x2800},
-	{0x0F12, 0xD10A},
-	{0x0F12, 0x1FE0},
-	{0x0F12, 0x38FD},
-	{0x0F12, 0xD001},
-	{0x0F12, 0x1CC0},
-	{0x0F12, 0xD105},
-	{0x0F12, 0x4874},
-	{0x0F12, 0x8829},
-	{0x0F12, 0x3818},
-	{0x0F12, 0x6840},
-	{0x0F12, 0x4348},
-	{0x0F12, 0x6078},
-	{0x0F12, 0x4972},
-	{0x0F12, 0x6878},
-	{0x0F12, 0x6B89},
-	{0x0F12, 0x4288},
-	{0x0F12, 0xD300},
-	{0x0F12, 0x0008},
-	{0x0F12, 0x6078},
-	{0x0F12, 0x2000},
-	{0x0F12, 0x0041},
-	{0x0F12, 0xAA04},
-	{0x0F12, 0x5A53},
-	{0x0F12, 0x194A},
-	{0x0F12, 0x269C},
-	{0x0F12, 0x52B3},
-	{0x0F12, 0xAB01},
-	{0x0F12, 0x5A59},
-	{0x0F12, 0x32A0},
-	{0x0F12, 0x8111},
-	{0x0F12, 0x1C40},
-	{0x0F12, 0x0400},
-	{0x0F12, 0x0C00},
-	{0x0F12, 0x2806},
-	{0x0F12, 0xD3F0},
-	{0x0F12, 0x4965},
-	{0x0F12, 0x9809},
-	{0x0F12, 0x8208},
-	{0x0F12, 0x9808},
-	{0x0F12, 0x8028},
-	{0x0F12, 0x9807},
-	{0x0F12, 0x80E8},
-	{0x0F12, 0x1FE0},
-	{0x0F12, 0x38FD},
-	{0x0F12, 0xD13B},
-	{0x0F12, 0x4D64},
-	{0x0F12, 0x89E8},
-	{0x0F12, 0x1FC1},
-	{0x0F12, 0x39FF},
-	{0x0F12, 0xD136},
-	{0x0F12, 0x4C5F},
-	{0x0F12, 0x8AE0},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFADE},
-	{0x0F12, 0x0006},
-	{0x0F12, 0x8B20},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFAE2},
-	{0x0F12, 0x9000},
-	{0x0F12, 0x6AA1},
-	{0x0F12, 0x6878},
-	{0x0F12, 0x1809},
-	{0x0F12, 0x0200},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFAB5},
-	{0x0F12, 0x0400},
-	{0x0F12, 0x0C00},
-	{0x0F12, 0x0022},
-	{0x0F12, 0x3246},
-	{0x0F12, 0x0011},
-	{0x0F12, 0x310A},
-	{0x0F12, 0x2305},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFAB2},
-	{0x0F12, 0x66E8},
-	{0x0F12, 0x6B23},
-	{0x0F12, 0x0002},
-	{0x0F12, 0x0031},
-	{0x0F12, 0x0018},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFAD3},
-	{0x0F12, 0x466B},
-	{0x0F12, 0x8518},
-	{0x0F12, 0x6EEA},
-	{0x0F12, 0x6B60},
-	{0x0F12, 0x9900},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFACC},
-	{0x0F12, 0x466B},
-	{0x0F12, 0x8558},
-	{0x0F12, 0x0029},
-	{0x0F12, 0x980A},
-	{0x0F12, 0x3170},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFACD},
-	{0x0F12, 0x0028},
-	{0x0F12, 0x3060},
-	{0x0F12, 0x8A02},
-	{0x0F12, 0x4946},
-	{0x0F12, 0x3128},
-	{0x0F12, 0x808A},
-	{0x0F12, 0x8A42},
-	{0x0F12, 0x80CA},
-	{0x0F12, 0x8A80},
-	{0x0F12, 0x8108},
-	{0x0F12, 0xB00B},
-	{0x0F12, 0xBCF0},
-	{0x0F12, 0xBC08},
-	{0x0F12, 0x4718},
-	{0x0F12, 0xB570},
-	{0x0F12, 0x2400},
-	{0x0F12, 0x4D46},
-	{0x0F12, 0x4846},
-	{0x0F12, 0x8881},
-	{0x0F12, 0x4846},
-	{0x0F12, 0x8041},
-	{0x0F12, 0x2101},
-	{0x0F12, 0x8001},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFABC},
-	{0x0F12, 0x4842},
-	{0x0F12, 0x3820},
-	{0x0F12, 0x8BC0},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFABF},
-	{0x0F12, 0x4B42},
-	{0x0F12, 0x220D},
-	{0x0F12, 0x0712},
-	{0x0F12, 0x18A8},
-	{0x0F12, 0x8806},
-	{0x0F12, 0x00E1},
-	{0x0F12, 0x18C9},
-	{0x0F12, 0x81CE},
-	{0x0F12, 0x8846},
-	{0x0F12, 0x818E},
-	{0x0F12, 0x8886},
-	{0x0F12, 0x824E},
-	{0x0F12, 0x88C0},
-	{0x0F12, 0x8208},
-	{0x0F12, 0x3508},
-	{0x0F12, 0x042D},
-	{0x0F12, 0x0C2D},
-	{0x0F12, 0x1C64},
-	{0x0F12, 0x0424},
-	{0x0F12, 0x0C24},
-	{0x0F12, 0x2C07},
-	{0x0F12, 0xD3EC},
-	{0x0F12, 0xE658},
-	{0x0F12, 0xB510},
-	{0x0F12, 0x4834},
-	{0x0F12, 0x4C34},
-	{0x0F12, 0x88C0},
-	{0x0F12, 0x8060},
-	{0x0F12, 0x2001},
-	{0x0F12, 0x8020},
-	{0x0F12, 0x4831},
-	{0x0F12, 0x3820},
-	{0x0F12, 0x8BC0},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFA9C},
-	{0x0F12, 0x88E0},
-	{0x0F12, 0x4A31},
-	{0x0F12, 0x2800},
-	{0x0F12, 0xD003},
-	{0x0F12, 0x4930},
-	{0x0F12, 0x8849},
-	{0x0F12, 0x2900},
-	{0x0F12, 0xD009},
-	{0x0F12, 0x2001},
-	{0x0F12, 0x03C0},
-	{0x0F12, 0x8050},
-	{0x0F12, 0x80D0},
-	{0x0F12, 0x2000},
-	{0x0F12, 0x8090},
-	{0x0F12, 0x8110},
-	{0x0F12, 0xBC10},
-	{0x0F12, 0xBC08},
-	{0x0F12, 0x4718},
-	{0x0F12, 0x8050},
-	{0x0F12, 0x8920},
-	{0x0F12, 0x80D0},
-	{0x0F12, 0x8960},
-	{0x0F12, 0x0400},
-	{0x0F12, 0x1400},
-	{0x0F12, 0x8090},
-	{0x0F12, 0x89A1},
-	{0x0F12, 0x0409},
-	{0x0F12, 0x1409},
-	{0x0F12, 0x8111},
-	{0x0F12, 0x89E3},
-	{0x0F12, 0x8A24},
-	{0x0F12, 0x2B00},
-	{0x0F12, 0xD104},
-	{0x0F12, 0x17C3},
-	{0x0F12, 0x0F5B},
-	{0x0F12, 0x1818},
-	{0x0F12, 0x10C0},
-	{0x0F12, 0x8090},
-	{0x0F12, 0x2C00},
-	{0x0F12, 0xD1E6},
-	{0x0F12, 0x17C8},
-	{0x0F12, 0x0F40},
-	{0x0F12, 0x1840},
-	{0x0F12, 0x10C0},
-	{0x0F12, 0x8110},
-	{0x0F12, 0xE7E0},
-	{0x0F12, 0xB510},
-	{0x0F12, 0x000C},
-	{0x0F12, 0x4919},
-	{0x0F12, 0x2204},
-	{0x0F12, 0x6820},
-	{0x0F12, 0x5E8A},
-	{0x0F12, 0x0140},
-	{0x0F12, 0x1A80},
-	{0x0F12, 0x0280},
-	{0x0F12, 0x8849},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFA6A},
-	{0x0F12, 0x6020},
-	{0x0F12, 0xE7D2},
-	{0x0F12, 0x38D4},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x17D0},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x5000},
-	{0x0F12, 0xD000},
-	{0x0F12, 0x1100},
-	{0x0F12, 0xD000},
-	{0x0F12, 0x171A},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x4780},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x2FCA},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x2FC5},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x2FC6},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x2ED8},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x2BD0},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x17E0},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x2DE8},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x37E0},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x210C},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x1484},
-	{0x0F12, 0x7000},
-	{0x0F12, 0xA006},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0724},
-	{0x0F12, 0x7000},
-	{0x0F12, 0xA000},
-	{0x0F12, 0xD000},
-	{0x0F12, 0x2270},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x2558},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x146C},
-	{0x0F12, 0x7000},
-	{0x0F12, 0xB510},
-	{0x0F12, 0x000C},
-	{0x0F12, 0x49C7},
-	{0x0F12, 0x2208},
-	{0x0F12, 0x6820},
-	{0x0F12, 0x5E8A},
-	{0x0F12, 0x0140},
-	{0x0F12, 0x1A80},
-	{0x0F12, 0x0280},
-	{0x0F12, 0x88C9},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFA30},
-	{0x0F12, 0x6020},
-	{0x0F12, 0xE798},
-	{0x0F12, 0xB5FE},
-	{0x0F12, 0x000C},
-	{0x0F12, 0x6825},
-	{0x0F12, 0x6866},
-	{0x0F12, 0x68A0},
-	{0x0F12, 0x9001},
-	{0x0F12, 0x68E7},
-	{0x0F12, 0x1BA8},
-	{0x0F12, 0x42B5},
-	{0x0F12, 0xDA00},
-	{0x0F12, 0x1B70},
-	{0x0F12, 0x9000},
-	{0x0F12, 0x49BB},
-	{0x0F12, 0x48BC},
-	{0x0F12, 0x884A},
-	{0x0F12, 0x8843},
-	{0x0F12, 0x435A},
-	{0x0F12, 0x2304},
-	{0x0F12, 0x5ECB},
-	{0x0F12, 0x0A92},
-	{0x0F12, 0x18D2},
-	{0x0F12, 0x02D2},
-	{0x0F12, 0x0C12},
-	{0x0F12, 0x88CB},
-	{0x0F12, 0x8880},
-	{0x0F12, 0x4343},
-	{0x0F12, 0x0A98},
-	{0x0F12, 0x2308},
-	{0x0F12, 0x5ECB},
-	{0x0F12, 0x18C0},
-	{0x0F12, 0x02C0},
-	{0x0F12, 0x0C00},
-	{0x0F12, 0x0411},
-	{0x0F12, 0x0400},
-	{0x0F12, 0x1409},
-	{0x0F12, 0x1400},
-	{0x0F12, 0x1A08},
-	{0x0F12, 0x49B0},
-	{0x0F12, 0x39E0},
-	{0x0F12, 0x6148},
-	{0x0F12, 0x9801},
-	{0x0F12, 0x3040},
-	{0x0F12, 0x7880},
-	{0x0F12, 0x2800},
-	{0x0F12, 0xD103},
-	{0x0F12, 0x9801},
-	{0x0F12, 0x0029},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xFA03},
-	{0x0F12, 0x8839},
-	{0x0F12, 0x9800},
-	{0x0F12, 0x4281},
-	{0x0F12, 0xD814},
-	{0x0F12, 0x8879},
-	{0x0F12, 0x9800},
-	{0x0F12, 0x4281},
-	{0x0F12, 0xD20C},
-	{0x0F12, 0x9801},
-	{0x0F12, 0x0029},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF9FF},
-	{0x0F12, 0x9801},
-	{0x0F12, 0x0029},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF9FB},
-	{0x0F12, 0x9801},
-	{0x0F12, 0x0029},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF9F7},
-	{0x0F12, 0xE003},
-	{0x0F12, 0x9801},
-	{0x0F12, 0x0029},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF9F2},
-	{0x0F12, 0x9801},
-	{0x0F12, 0x0032},
-	{0x0F12, 0x0039},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF9F5},
-	{0x0F12, 0x6020},
-	{0x0F12, 0xE5D0},
-	{0x0F12, 0xB57C},
-	{0x0F12, 0x489A},
-	{0x0F12, 0xA901},
-	{0x0F12, 0x0004},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF979},
-	{0x0F12, 0x466B},
-	{0x0F12, 0x88D9},
-	{0x0F12, 0x8898},
-	{0x0F12, 0x4B95},
-	{0x0F12, 0x3346},
-	{0x0F12, 0x1E9A},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF9ED},
-	{0x0F12, 0x4894},
-	{0x0F12, 0x4992},
-	{0x0F12, 0x3812},
-	{0x0F12, 0x3140},
-	{0x0F12, 0x8A42},
-	{0x0F12, 0x888B},
-	{0x0F12, 0x18D2},
-	{0x0F12, 0x8242},
-	{0x0F12, 0x8AC2},
-	{0x0F12, 0x88C9},
-	{0x0F12, 0x1851},
-	{0x0F12, 0x82C1},
-	{0x0F12, 0x0020},
-	{0x0F12, 0x4669},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF961},
-	{0x0F12, 0x488D},
-	{0x0F12, 0x214D},
-	{0x0F12, 0x8301},
-	{0x0F12, 0x2196},
-	{0x0F12, 0x8381},
-	{0x0F12, 0x211D},
-	{0x0F12, 0x3020},
-	{0x0F12, 0x8001},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF9DB},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF9E1},
-	{0x0F12, 0x4888},
-	{0x0F12, 0x4C88},
-	{0x0F12, 0x6E00},
-	{0x0F12, 0x60E0},
-	{0x0F12, 0x466B},
-	{0x0F12, 0x8818},
-	{0x0F12, 0x8859},
-	{0x0F12, 0x0025},
-	{0x0F12, 0x1A40},
-	{0x0F12, 0x3540},
-	{0x0F12, 0x61A8},
-	{0x0F12, 0x487F},
-	{0x0F12, 0x9900},
-	{0x0F12, 0x3060},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF9D9},
-	{0x0F12, 0x466B},
-	{0x0F12, 0x8819},
-	{0x0F12, 0x1DE0},
-	{0x0F12, 0x30F9},
-	{0x0F12, 0x8741},
-	{0x0F12, 0x8859},
-	{0x0F12, 0x8781},
-	{0x0F12, 0x2000},
-	{0x0F12, 0x71A0},
-	{0x0F12, 0x74A8},
-	{0x0F12, 0xBC7C},
-	{0x0F12, 0xBC08},
-	{0x0F12, 0x4718},
-	{0x0F12, 0xB5F8},
-	{0x0F12, 0x0005},
-	{0x0F12, 0x6808},
-	{0x0F12, 0x0400},
-	{0x0F12, 0x0C00},
-	{0x0F12, 0x684A},
-	{0x0F12, 0x0412},
-	{0x0F12, 0x0C12},
-	{0x0F12, 0x688E},
-	{0x0F12, 0x68CC},
-	{0x0F12, 0x4970},
-	{0x0F12, 0x884B},
-	{0x0F12, 0x4343},
-	{0x0F12, 0x0A98},
-	{0x0F12, 0x2304},
-	{0x0F12, 0x5ECB},
-	{0x0F12, 0x18C0},
-	{0x0F12, 0x02C0},
-	{0x0F12, 0x0C00},
-	{0x0F12, 0x88CB},
-	{0x0F12, 0x4353},
-	{0x0F12, 0x0A9A},
-	{0x0F12, 0x2308},
-	{0x0F12, 0x5ECB},
-	{0x0F12, 0x18D1},
-	{0x0F12, 0x02C9},
-	{0x0F12, 0x0C09},
-	{0x0F12, 0x2701},
-	{0x0F12, 0x003A},
-	{0x0F12, 0x40AA},
-	{0x0F12, 0x9200},
-	{0x0F12, 0x002A},
-	{0x0F12, 0x3A10},
-	{0x0F12, 0x4097},
-	{0x0F12, 0x2D10},
-	{0x0F12, 0xDA06},
-	{0x0F12, 0x4A69},
-	{0x0F12, 0x9B00},
-	{0x0F12, 0x8812},
-	{0x0F12, 0x439A},
-	{0x0F12, 0x4B67},
-	{0x0F12, 0x801A},
-	{0x0F12, 0xE003},
-	{0x0F12, 0x4B66},
-	{0x0F12, 0x885A},
-	{0x0F12, 0x43BA},
-	{0x0F12, 0x805A},
-	{0x0F12, 0x0023},
-	{0x0F12, 0x0032},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF981},
-	{0x0F12, 0x2D10},
-	{0x0F12, 0xDA05},
-	{0x0F12, 0x4961},
-	{0x0F12, 0x9A00},
-	{0x0F12, 0x8808},
-	{0x0F12, 0x4310},
-	{0x0F12, 0x8008},
-	{0x0F12, 0xE003},
-	{0x0F12, 0x485E},
-	{0x0F12, 0x8841},
-	{0x0F12, 0x4339},
-	{0x0F12, 0x8041},
-	{0x0F12, 0x4D5B},
-	{0x0F12, 0x2000},
-	{0x0F12, 0x3580},
-	{0x0F12, 0x88AA},
-	{0x0F12, 0x5E30},
-	{0x0F12, 0x2100},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF98D},
-	{0x0F12, 0x8030},
-	{0x0F12, 0x2000},
-	{0x0F12, 0x88AA},
-	{0x0F12, 0x5E20},
-	{0x0F12, 0x2100},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF986},
-	{0x0F12, 0x8020},
-	{0x0F12, 0xE587},
-	{0x0F12, 0xB510},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF989},
-	{0x0F12, 0x4A53},
-	{0x0F12, 0x8D50},
-	{0x0F12, 0x2800},
-	{0x0F12, 0xD007},
-	{0x0F12, 0x494E},
-	{0x0F12, 0x31C0},
-	{0x0F12, 0x684B},
-	{0x0F12, 0x4950},
-	{0x0F12, 0x4283},
-	{0x0F12, 0xD202},
-	{0x0F12, 0x8D90},
-	{0x0F12, 0x81C8},
-	{0x0F12, 0xE6A0},
-	{0x0F12, 0x8DD0},
-	{0x0F12, 0x81C8},
-	{0x0F12, 0xE69D},
-	{0x0F12, 0xB5F8},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF97E},
-	{0x0F12, 0x4D49},
-	{0x0F12, 0x8E28},
-	{0x0F12, 0x2800},
-	{0x0F12, 0xD01F},
-	{0x0F12, 0x4E49},
-	{0x0F12, 0x4844},
-	{0x0F12, 0x68B4},
-	{0x0F12, 0x6800},
-	{0x0F12, 0x4284},
-	{0x0F12, 0xD903},
-	{0x0F12, 0x1A21},
-	{0x0F12, 0x0849},
-	{0x0F12, 0x1847},
-	{0x0F12, 0xE006},
-	{0x0F12, 0x4284},
-	{0x0F12, 0xD203},
-	{0x0F12, 0x1B01},
-	{0x0F12, 0x0849},
-	{0x0F12, 0x1A47},
-	{0x0F12, 0xE000},
-	{0x0F12, 0x0027},
-	{0x0F12, 0x0020},
-	{0x0F12, 0x493B},
-	{0x0F12, 0x3120},
-	{0x0F12, 0x7A0C},
-	{0x0F12, 0x2C00},
-	{0x0F12, 0xD004},
-	{0x0F12, 0x0200},
-	{0x0F12, 0x0039},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF8C3},
-	{0x0F12, 0x8668},
-	{0x0F12, 0x2C00},
-	{0x0F12, 0xD000},
-	{0x0F12, 0x60B7},
-	{0x0F12, 0xE54D},
-	{0x0F12, 0x20FF},
-	{0x0F12, 0x1C40},
-	{0x0F12, 0x8668},
-	{0x0F12, 0xE549},
-	{0x0F12, 0xB510},
-	{0x0F12, 0x000C},
-	{0x0F12, 0x6820},
-	{0x0F12, 0x0400},
-	{0x0F12, 0x0C00},
-	{0x0F12, 0x4933},
-	{0x0F12, 0x8E0A},
-	{0x0F12, 0x2A00},
-	{0x0F12, 0xD003},
-	{0x0F12, 0x8E49},
-	{0x0F12, 0x0200},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF8AD},
-	{0x0F12, 0x6020},
-	{0x0F12, 0x0400},
-	{0x0F12, 0x0C00},
-	{0x0F12, 0xE661},
-	{0x0F12, 0xB570},
-	{0x0F12, 0x680C},
-	{0x0F12, 0x4D2F},
-	{0x0F12, 0x0020},
-	{0x0F12, 0x6F29},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF946},
-	{0x0F12, 0x6F69},
-	{0x0F12, 0x1D20},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF942},
-	{0x0F12, 0x4827},
-	{0x0F12, 0x8E00},
-	{0x0F12, 0x2800},
-	{0x0F12, 0xD006},
-	{0x0F12, 0x4922},
-	{0x0F12, 0x2214},
-	{0x0F12, 0x3168},
-	{0x0F12, 0x0008},
-	{0x0F12, 0x383C},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF93F},
-	{0x0F12, 0xE488},
-	{0x0F12, 0xB5F8},
-	{0x0F12, 0x0004},
-	{0x0F12, 0x4D24},
-	{0x0F12, 0x8B68},
-	{0x0F12, 0x2800},
-	{0x0F12, 0xD012},
-	{0x0F12, 0x4823},
-	{0x0F12, 0x8A00},
-	{0x0F12, 0x06C0},
-	{0x0F12, 0xD50E},
-	{0x0F12, 0x4822},
-	{0x0F12, 0x7800},
-	{0x0F12, 0x2800},
-	{0x0F12, 0xD00A},
-	{0x0F12, 0x481D},
-	{0x0F12, 0x6FC1},
-	{0x0F12, 0x2000},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF923},
-	{0x0F12, 0x8B28},
-	{0x0F12, 0x2201},
-	{0x0F12, 0x2180},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF92C},
-	{0x0F12, 0x8328},
-	{0x0F12, 0x2101},
-	{0x0F12, 0x000D},
-	{0x0F12, 0x0020},
-	{0x0F12, 0x3810},
-	{0x0F12, 0x4081},
-	{0x0F12, 0x40A5},
-	{0x0F12, 0x4F11},
-	{0x0F12, 0x000E},
-	{0x0F12, 0x2C10},
-	{0x0F12, 0xDA03},
-	{0x0F12, 0x8838},
-	{0x0F12, 0x43A8},
-	{0x0F12, 0x8038},
-	{0x0F12, 0xE002},
-	{0x0F12, 0x8878},
-	{0x0F12, 0x43B0},
-	{0x0F12, 0x8078},
-	{0x0F12, 0xF000},
-	{0x0F12, 0xF920},
-	{0x0F12, 0x2C10},
-	{0x0F12, 0xDA03},
-	{0x0F12, 0x8838},
-	{0x0F12, 0x4328},
-	{0x0F12, 0x8038},
-	{0x0F12, 0xE4EF},
-	{0x0F12, 0x8878},
-	{0x0F12, 0x4330},
-	{0x0F12, 0x8078},
-	{0x0F12, 0xE4EB},
-	{0x0F12, 0x2558},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x2AB8},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x145E},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x2698},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x2BB8},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x2998},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x1100},
-	{0x0F12, 0xD000},
-	{0x0F12, 0x4780},
-	{0x0F12, 0x7000},
-	{0x0F12, 0xE200},
-	{0x0F12, 0xD000},
-	{0x0F12, 0x210C},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x308C},
-	{0x0F12, 0x7000},
-	{0x0F12, 0xB040},
-	{0x0F12, 0xD000},
-	{0x0F12, 0x3858},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0x1789},
-	{0x0F12, 0x0001},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0x16F1},
-	{0x0F12, 0x0001},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0xC3B1},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0xC36D},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0xF6D7},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0xB49D},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0x7EDF},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0x448D},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xF004},
-	{0x0F12, 0xE51F},
-	{0x0F12, 0x29EC},
-	{0x0F12, 0x0001},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0x2EF1},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0xEE03},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0xA58B},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0x7C49},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0x7C63},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0x2DB7},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0xEB3D},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0xF061},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0xF0EF},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xF004},
-	{0x0F12, 0xE51F},
-	{0x0F12, 0x2824},
-	{0x0F12, 0x0001},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0x8EDD},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0x8DCB},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0x8E17},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0x98C5},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0x7C7D},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0x7E31},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0x7EAB},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0x7501},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0xF63F},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0x3D0B},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0x29BF},
-	{0x0F12, 0x0001},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xF004},
-	{0x0F12, 0xE51F},
-	{0x0F12, 0x26D8},
-	{0x0F12, 0x0001},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0x306B},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4778},
-	{0x0F12, 0x46C0},
-	{0x0F12, 0xC000},
-	{0x0F12, 0xE59F},
-	{0x0F12, 0xFF1C},
-	{0x0F12, 0xE12F},
-	{0x0F12, 0x6099},
-	{0x0F12, 0x0000},// End of Patch Data(Last : 7000449Eh)
-// End of Patch Data(Last : 7000465Ah)
-// Total Size 2916 (0B64)
-// Addr : 3AF8  Size : 2914(B62h)
-
-
-//	TNP_USER_MBCV_CONTROL
-// TNP_4EC_MBR_TUNE
-// TNP_4EC_FORBIDDEN_TUNE
-// TNP_AF_FINESEARCH_DRIVEBACK
-// TNP_FLASH_ALG
-// TNP_GAS_ALPHA_OTP
-//	TNP_AWB_MODUL_COMP
-// TNP_AWB_INIT_QUEUE
-// TNP_AWB_GRID_LOWBR
-// TNP_AWB_GRID_MODULECOMP
-//	TNP_ADLC_TUNE
-// TNP_1FRAME_AE
-// TNP_TG_OFF_CFG_CHG_IN_SPOOF_MODE
-
-//===================================================================
-// OTP setting
-//===================================================================
-	{0x002A, 0x0722}, // OTP block
-	{0x0F12, 0x0100},
-	{0x002A, 0x0726},
-	{0x0F12, 0x0001},
-	{0x002A, 0x08D6},
-	{0x0F12, 0x0001},
-	{0x002A, 0x146E},
-	{0x0F12, 0x0000},
-	{0x002A, 0x08DC},
-	{0x0F12, 0x0000},
-	{0x0028, 0xD000},
-	{0x002A, 0x1000},
-	{0x0F12, 0x0001},
-
-
-
-
-//===================================================================
-// GAS setting (Shading)
-//===================================================================
-// If OTP is used, GAS setting should be deleted.
-//===================================================================
-// GAS Alpha setting
-//===================================================================
-// Refer Mon_AWB_RotGain
-	{0x0028, 0x7000},
-	{0x002A, 0x08B4},
-	{0x0F12, 0x0001},       //wbt_bUseOutdoorASH
-	{0x002A, 0x08BC},
-	{0x0F12, 0x00C0},       //TVAR_ash_AwbAshCord_0_ 2300K
-	{0x0F12, 0x00DF},       //TVAR_ash_AwbAshCord_1_ 2750K
-	{0x0F12, 0x0100},       //TVAR_ash_AwbAshCord_2_ 3300K
-	{0x0F12, 0x0125},       //TVAR_ash_AwbAshCord_3_ 4150K
-	{0x0F12, 0x015F},       //TVAR_ash_AwbAshCord_4_ 5250K
-	{0x0F12, 0x017C},       //TVAR_ash_AwbAshCord_5_ 6400K
-	{0x0F12, 0x0194},  	    //TVAR_ash_AwbAshCord_6_ 7500K
-
-// GAS Alpha Table
-	{0x002A, 0x08F6},
-	{0x0F12, 0x4000},       //TVAR_ash_GASAlpha_0__0_ R  // 2300K
-	{0x0F12, 0x4000},       //TVAR_ash_GASAlpha_0__1_ GR
-	{0x0F12, 0x4000},       //TVAR_ash_GASAlpha_0__2_ GB
-	{0x0F12, 0x4000},       //TVAR_ash_GASAlpha_0__3_ B
-	{0x0F12, 0x4000},       //TVAR_ash_GASAlpha_1__0_ R  // 2750K
-	{0x0F12, 0x4000},       //TVAR_ash_GASAlpha_1__1_ GR
-	{0x0F12, 0x4000},       //TVAR_ash_GASAlpha_1__2_ GB
-	{0x0F12, 0x4000},       //TVAR_ash_GASAlpha_1__3_ B
-	{0x0F12, 0x4000},       //TVAR_ash_GASAlpha_2__0_ R  // 3300K
-	{0x0F12, 0x4000},       //TVAR_ash_GASAlpha_2__1_ GR
-	{0x0F12, 0x4000},       //TVAR_ash_GASAlpha_2__2_ GB
-	{0x0F12, 0x4000},       //TVAR_ash_GASAlpha_2__3_ B
-	{0x0F12, 0x3B00},       //TVAR_ash_GASAlpha_3__0_ R  // 4150K
-	{0x0F12, 0x4000},       //TVAR_ash_GASAlpha_3__1_ GR
-	{0x0F12, 0x4000},       //TVAR_ash_GASAlpha_3__2_ GB
-	{0x0F12, 0x4000},       //TVAR_ash_GASAlpha_3__3_ B
-	{0x0F12, 0x3E00},       //TVAR_ash_GASAlpha_4__0_ R  // 5250K
-	{0x0F12, 0x4000},       //TVAR_ash_GASAlpha_4__1_ GR
-	{0x0F12, 0x4000},       //TVAR_ash_GASAlpha_4__2_ GB
-	{0x0F12, 0x4000},       //TVAR_ash_GASAlpha_4__3_ B
-	{0x0F12, 0x4100},       //TVAR_ash_GASAlpha_5__0_ R  // 6400K
-	{0x0F12, 0x4000},       //TVAR_ash_GASAlpha_5__1_ GR
-	{0x0F12, 0x4000},       //TVAR_ash_GASAlpha_5__2_ GB
-	{0x0F12, 0x4000},       //TVAR_ash_GASAlpha_5__3_ B
-	{0x0F12, 0x4300},       //TVAR_ash_GASAlpha_6__0_ R  // 7500K
-	{0x0F12, 0x4000},       //TVAR_ash_GASAlpha_6__1_ GR
-	{0x0F12, 0x4000},       //TVAR_ash_GASAlpha_6__2_ GB
-	{0x0F12, 0x4000},       //TVAR_ash_GASAlpha_6__3_ B
-// Outdoor GAS Alpha
-	{0x0F12, 0X4900},       //TVAR_ash_GASOutdoorAlpha_0_ R
-	{0x0F12, 0X4000},       //TVAR_ash_GASOutdoorAlpha_1_ GR
-	{0x0F12, 0X4000},       //TVAR_ash_GASOutdoorAlpha_2_ GB
-	{0x0F12, 0X4000},       //TVAR_ash_GASOutdoorAlpha_3_ B
-	{0x002A, 0X08F4},
-	{0x0F12, 0X0001},       //ash_bUseGasAlpha
-
-
-//==================================================================================
-// 07. Analog Setting 2
-//==================================================================================
-//This register is for FACTORY ONLY.
-//If you change it without prior notification
-//YOU are RESPONSIBLE for the FAILURE that will happen in the future
-//For subsampling Size
-
-	{0x0028, 0X7000},       //REG_ANALOG_SETTING2
-	{0x002A, 0X18BC},
-	{0x0F12, 0X0004},     	//senHal_ContPtrs_senModesDataArr_0_
-	{0x0F12, 0X05B6},     	//senHal_ContPtrs_senModesDataArr_1_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_2_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_3_
-	{0x0F12, 0X0001},     	//senHal_ContPtrs_senModesDataArr_4_
-	{0x0F12, 0X05BA},     	//senHal_ContPtrs_senModesDataArr_5_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_6_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_7_
-	{0x0F12, 0X0007},     	//senHal_ContPtrs_senModesDataArr_8_
-	{0x0F12, 0X05BA},     	//senHal_ContPtrs_senModesDataArr_9_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_10_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_11_
-	{0x0F12, 0X01F4},     	//senHal_ContPtrs_senModesDataArr_12_
-	{0x0F12, 0X024E},     	//senHal_ContPtrs_senModesDataArr_13_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_14_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_15_
-	{0x0F12, 0X01F4},     	//senHal_ContPtrs_senModesDataArr_16_
-	{0x0F12, 0X05B6},     	//senHal_ContPtrs_senModesDataArr_17_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_18_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_19_
-	{0x0F12, 0X01F4},     	//senHal_ContPtrs_senModesDataArr_20_
-	{0x0F12, 0X05BA},     	//senHal_ContPtrs_senModesDataArr_21_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_22_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_23_
-	{0x0F12, 0X01F4},     	//senHal_ContPtrs_senModesDataArr_24_
-	{0x0F12, 0X024F},     	//senHal_ContPtrs_senModesDataArr_25_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_26_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_27_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_28_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_29_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_30_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_31_
-	{0x0F12, 0X0075},     	//senHal_ContPtrs_senModesDataArr_32_
-	{0x0F12, 0X00CF},     	//senHal_ContPtrs_senModesDataArr_33_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_34_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_35_
-	{0x0F12, 0X0075},     	//senHal_ContPtrs_senModesDataArr_36_
-	{0x0F12, 0X00D6},     	//senHal_ContPtrs_senModesDataArr_37_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_38_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_39_
-	{0x0F12, 0X0004},     	//senHal_ContPtrs_senModesDataArr_40_
-	{0x0F12, 0X01F4},     	//senHal_ContPtrs_senModesDataArr_41_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_42_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_43_
-	{0x0F12, 0X00F0},     	//senHal_ContPtrs_senModesDataArr_44_
-	{0x0F12, 0X01F4},     	//senHal_ContPtrs_senModesDataArr_45_
-	{0x0F12, 0X029E},     	//senHal_ContPtrs_senModesDataArr_46_
-	{0x0F12, 0X05B2},     	//senHal_ContPtrs_senModesDataArr_47_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_48_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_49_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_50_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_51_
-	{0x0F12, 0X01F8},     	//senHal_ContPtrs_senModesDataArr_52_
-	{0x0F12, 0X0228},     	//senHal_ContPtrs_senModesDataArr_53_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_54_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_55_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_56_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_57_
-	{0x0F12, 0X0208},     	//senHal_ContPtrs_senModesDataArr_58_
-	{0x0F12, 0X0238},     	//senHal_ContPtrs_senModesDataArr_59_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_60_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_61_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_62_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_63_
-	{0x0F12, 0X0218},     	//senHal_ContPtrs_senModesDataArr_64_
-	{0x0F12, 0X0238},     	//senHal_ContPtrs_senModesDataArr_65_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_66_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_67_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_68_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_69_
-	{0x0F12, 0X0001},     	//senHal_ContPtrs_senModesDataArr_70_
-	{0x0F12, 0X0009},     	//senHal_ContPtrs_senModesDataArr_71_
-	{0x0F12, 0X00DE},     	//senHal_ContPtrs_senModesDataArr_72_
-	{0x0F12, 0X05C0},     	//senHal_ContPtrs_senModesDataArr_73_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_74_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_75_
-	{0x0F12, 0X00DF},     	//senHal_ContPtrs_senModesDataArr_76_
-	{0x0F12, 0X00E4},     	//senHal_ContPtrs_senModesDataArr_77_
-	{0x0F12, 0X01F8},     	//senHal_ContPtrs_senModesDataArr_78_
-	{0x0F12, 0X01FD},     	//senHal_ContPtrs_senModesDataArr_79_
-	{0x0F12, 0X05B6},     	//senHal_ContPtrs_senModesDataArr_80_
-	{0x0F12, 0X05BB},     	//senHal_ContPtrs_senModesDataArr_81_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_82_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_83_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_84_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_85_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_86_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_87_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_88_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_89_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_90_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_91_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_92_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_93_
-	{0x0F12, 0X01F8},     	//senHal_ContPtrs_senModesDataArr_94_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_95_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_96_
-	{0x0F12, 0X0077},     	//senHal_ContPtrs_senModesDataArr_97_
-	{0x0F12, 0X007E},     	//senHal_ContPtrs_senModesDataArr_98_
-	{0x0F12, 0X024F},     	//senHal_ContPtrs_senModesDataArr_99_
-	{0x0F12, 0X025E},     	//senHal_ContPtrs_senModesDataArr_100_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_101_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_102_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_103_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senModesDataArr_104_
-
-	{0x0F12, 0X0004},     	//senHal_ContPtrs_senAvgModesDataArr_0_
-	{0x0F12, 0X09D1},     	//senHal_ContPtrs_senAvgModesDataArr_1_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_2_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_3_
-	{0x0F12, 0X0001},     	//senHal_ContPtrs_senAvgModesDataArr_4_
-	{0x0F12, 0X09D5},     	//senHal_ContPtrs_senAvgModesDataArr_5_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_6_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_7_
-	{0x0F12, 0X0008},     	//senHal_ContPtrs_senAvgModesDataArr_8_
-	{0x0F12, 0X09D5},     	//senHal_ContPtrs_senAvgModesDataArr_9_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_10_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_11_
-	{0x0F12, 0X02AA},     	//senHal_ContPtrs_senAvgModesDataArr_12_
-	{0x0F12, 0X0326},     	//senHal_ContPtrs_senAvgModesDataArr_13_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_14_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_15_
-	{0x0F12, 0X02AA},     	//senHal_ContPtrs_senAvgModesDataArr_16_
-	{0x0F12, 0X09D1},     	//senHal_ContPtrs_senAvgModesDataArr_17_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_18_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_19_
-	{0x0F12, 0X02AA},     	//senHal_ContPtrs_senAvgModesDataArr_20_
-	{0x0F12, 0X09D5},     	//senHal_ContPtrs_senAvgModesDataArr_21_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_22_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_23_
-	{0x0F12, 0X02AA},     	//senHal_ContPtrs_senAvgModesDataArr_24_
-	{0x0F12, 0X0327},     	//senHal_ContPtrs_senAvgModesDataArr_25_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_26_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_27_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_28_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_29_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_30_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_31_
-	{0x0F12, 0X0008},     	//senHal_ContPtrs_senAvgModesDataArr_32_
-	{0x0F12, 0X0084},     	//senHal_ContPtrs_senAvgModesDataArr_33_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_34_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_35_
-	{0x0F12, 0X0008},     	//senHal_ContPtrs_senAvgModesDataArr_36_
-	{0x0F12, 0X008D},     	//senHal_ContPtrs_senAvgModesDataArr_37_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_38_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_39_
-	{0x0F12, 0X0008},     	//senHal_ContPtrs_senAvgModesDataArr_40_
-	{0x0F12, 0X02AA},     	//senHal_ContPtrs_senAvgModesDataArr_41_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_42_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_43_
-	{0x0F12, 0X00AA},     	//senHal_ContPtrs_senAvgModesDataArr_44_
-	{0x0F12, 0X02AA},     	//senHal_ContPtrs_senAvgModesDataArr_45_
-	{0x0F12, 0X03AD},     	//senHal_ContPtrs_senAvgModesDataArr_46_
-	{0x0F12, 0X09CD},     	//senHal_ContPtrs_senAvgModesDataArr_47_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_48_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_49_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_50_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_51_
-	{0x0F12, 0X02AE},     	//senHal_ContPtrs_senAvgModesDataArr_52_
-	{0x0F12, 0X02DE},     	//senHal_ContPtrs_senAvgModesDataArr_53_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_54_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_55_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_56_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_57_
-	{0x0F12, 0X02BE},     	//senHal_ContPtrs_senAvgModesDataArr_58_
-	{0x0F12, 0X02EE},     	//senHal_ContPtrs_senAvgModesDataArr_59_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_60_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_61_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_62_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_63_
-	{0x0F12, 0X02CE},     	//senHal_ContPtrs_senAvgModesDataArr_64_
-	{0x0F12, 0X02EE},     	//senHal_ContPtrs_senAvgModesDataArr_65_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_66_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_67_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_68_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_69_
-	{0x0F12, 0X0001},     	//senHal_ContPtrs_senAvgModesDataArr_70_
-	{0x0F12, 0X0009},     	//senHal_ContPtrs_senAvgModesDataArr_71_
-	{0x0F12, 0X0095},     	//senHal_ContPtrs_senAvgModesDataArr_72_
-	{0x0F12, 0X09DB},     	//senHal_ContPtrs_senAvgModesDataArr_73_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_74_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_75_
-	{0x0F12, 0X0096},     	//senHal_ContPtrs_senAvgModesDataArr_76_
-	{0x0F12, 0X009B},     	//senHal_ContPtrs_senAvgModesDataArr_77_
-	{0x0F12, 0X02AE}, 	    //senHal_ContPtrs_senAvgModesDataArr_78_
-	{0x0F12, 0X02B3},     	//senHal_ContPtrs_senAvgModesDataArr_79_
-	{0x0F12, 0X09D1},     	//senHal_ContPtrs_senAvgModesDataArr_80_
-	{0x0F12, 0X09D6},     	//senHal_ContPtrs_senAvgModesDataArr_81_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_82_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_83_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_84_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_85_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_86_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_87_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_88_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_89_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_90_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_91_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_92_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_93_
-	{0x0F12, 0X02AE},     	//senHal_ContPtrs_senAvgModesDataArr_94_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_95_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_96_
-	{0x0F12, 0X0009},     	//senHal_ContPtrs_senAvgModesDataArr_97_
-	{0x0F12, 0X0010},     	//senHal_ContPtrs_senAvgModesDataArr_98_
-	{0x0F12, 0X0327},     	//senHal_ContPtrs_senAvgModesDataArr_99_
-	{0x0F12, 0X0336},     	//senHal_ContPtrs_senAvgModesDataArr_100_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_101_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_102_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_103_
-	{0x0F12, 0X0000},     	//senHal_ContPtrs_senAvgModesDataArr_104_
-
-	{0x002A, 0X1AF8},
-	{0x0F12, 0X5A3C},       //senHal_TuneStr_AngTuneData1_2_ register at subsampling
-	{0x002A, 0X1896},
-	{0x0F12, 0X0002},       //senHal_SamplingType
-	{0x0F12, 0X0000},       //senHal_SamplingMode 0000 : 2PLA}, 0001 : 4PLA
-	{0x0F12, 0X0003},       //senHal_PLAOption [0] VPLA enable}, [1] HPLA enable
-
-	{0x002A, 0X1B00},       //Add for low lux flash from LSI
-	{0x0F12, 0XF428},
-	{0x0F12, 0XFFFF},
-	{0x0F12, 0X0000},
-
-	{0x002A, 0X189E},
-	{0x0F12, 0X0FB0},	      //senHal_ExpMinPixels
-
-	{0x002A, 0X18AC},
-	{0x0F12, 0X0060},  	    //senHal_uAddColsBin
-	{0x0F12, 0X0060},  	    //senHal_uAddColsNoBin
-	{0x0F12, 0X05C0},  	    //senHal_uMinColsBin
-	{0x0F12, 0X05C0},	      //senHal_uMinColsNoBin
-
-	{0x002A, 0X1AEA},
-	{0x0F12, 0X8080},       //senHal_SubF404Tune
-	{0x0F12, 0X0080}, 	    //senHal_FullF404Tune
-	{0x002A, 0X1AE0},
-	{0x0F12, 0X0000}, 	    //senHal_bSenAAC
-
-	{0x002A, 0X1A72},
-	{0x0F12, 0X0000}, 	    //senHal_bSRX SRX off
-	{0x002A, 0X18A2},
-	{0x0F12, 0X0004}, 	    //senHal_NExpLinesCheckFine extend Forbidden area line
-	{0x002A, 0X1A6A},
-	{0x0F12, 0X009A}, 	    //senHal_usForbiddenRightOfs extend right Forbidden area line
-	{0x002A, 0X385E},
-	{0x0F12, 0X024C}, 	    //Mon_Sen_uExpPixelsOfs
-
-	{0x002A, 0X0EE6},
-	{0x0F12, 0X0000}, 	    //setot_bUseDigitalHbin
-	{0x002A, 0X1B2A},
-	{0x0F12, 0X0300},       //senHal_TuneStr2_usAngTuneGainTh
-	{0x0F12, 0X00D6},       //senHal_TuneStr2_AngTuneF4CA_0_
-	{0x0F12, 0X008D},       //senHal_TuneStr2_AngTuneF4CA_1_
-	{0x0F12, 0X00CF},       //senHal_TuneStr2_AngTuneF4C2_0_
-	{0x0F12, 0X0084},       //senHal_TuneStr2_AngTuneF4C2_1_
-
-
-//===================================================================
-// 08.AF Setting
-//===================================================================
-
-	{0x0028, 0X7000}, //
-	{0x002A, 0X01FC}, //
-	{0x0F12, 0X0001}, //REG_TC_IPRM_LedGpio
-
-	{0x002A, 0X01FE}, //
-	{0x0F12, 0X0003},	//REG_TC_IPRM_CM_Init_AfModeType VCM IIC
-	{0x0F12, 0X0000}, //REG_TC_IPRM_CM_Init_PwmConfig1
-	{0x002A, 0X0204}, //
-	{0x0F12, 0X0061}, //REG_TC_IPRM_CM_Init_GpioConfig1 AF Enable GPIO 6
-	{0x002A, 0X020C}, //
-	{0x0F12, 0X2F0C},	//REG_TC_IPRM_CM_Init_Mi2cBits
-	{0x0F12, 0X0190}, //REG_TC_IPRM_CM_Init_Mi2cRateKhz IIC Speed
-// AF Window Settings
-	{0x002A, 0X0294}, //
-	{0x0F12, 0X0100},	//REG_TC_AF_FstWinStartX
-	{0x0F12, 0X00E3},	//REG_TC_AF_FstWinStartY
-	{0x0F12, 0X0200},	//REG_TC_AF_FstWinSizeX
-	{0x0F12, 0X0238},	//REG_TC_AF_FstWinSizeY
-	{0x0F12, 0X01C6}, // LSI_Cho AF Window Center from_LSI
-	{0x0F12, 0X0166},	//REG_TC_AF_ScndWinStartY
-	{0x0F12, 0X0074}, // LSI_Cho AF Fail when Size change from_LSI
-	{0x0F12, 0X0132},	//REG_TC_AF_ScndWinSizeY
-	{0x0F12, 0X0001}, //REG_TC_AF_WinSizesUpdated
-// 2nd search setting
-	{0x002A, 0X070E},
-	{0x0F12, 0X00C0},
-	{0x002A, 0X071E},
-	{0x0F12, 0X0000},
-	{0x002A, 0X163C},
-	{0x0F12, 0X0000},
-	{0x002A, 0X1648},
-	{0x0F12, 0X9002},
-	{0x002A, 0X1652},
-	{0x0F12, 0X0002},
-	{0x0F12, 0X0000},
-	{0x002A, 0X15E0},
-	{0x0F12, 0X0402},
-// Peak Threshold
-	{0x002A, 0X164C},
-	{0x0F12, 0X0003},
-	{0x002A, 0X163E},
-	{0x0F12, 0X00C2},
-	{0x0F12, 0X0098},
-// Home Pos
-	{0x002A, 0X15D4},
-	{0x0F12, 0X0000},
-	{0x0F12, 0XD000},
-// AF statistics
-	{0x002A, 0X169A},
-	{0x0F12, 0XFF95},
-	{0x002A, 0X166A},
-	{0x0F12, 0X0280},
-	{0x002A, 0X1676},
-	{0x0F12, 0X03A0},
-	{0x0F12, 0X0320},
-	{0x002A, 0X16BC},
-	{0x0F12, 0X0030},
-	{0x002A, 0X16E0},
-	{0x0F12, 0X0060},
-	{0x002A, 0X16D4},
-	{0x0F12, 0X0010},
-	{0x002A, 0X1656},
-	{0x0F12, 0X0000},
-	{0x002A, 0X15E6},
-	{0x0F12, 0X003C},
-
-	{0x0F12, 0X0018},
-	{0x0F12, 0X002A},
-	{0x0F12, 0X0030},
-	{0x0F12, 0X0036},
-	{0x0F12, 0X003C},
-	{0x0F12, 0X0042},
-	{0x0F12, 0X0048},
-	{0x0F12, 0X004E},
-	{0x0F12, 0X0054},
-	{0x0F12, 0X005A},
-	{0x0F12, 0X0060},
-	{0x0F12, 0X0066},
-	{0x0F12, 0X006C},
-	{0x0F12, 0X0072},
-	{0x0F12, 0X0078},
-	{0x0F12, 0X007E},
-	{0x0F12, 0X0084},
-	{0x0F12, 0X008A},
-	{0x0F12, 0X0090},
-	{0x0F12, 0X0096},
-	{0x0F12, 0X009C},
-	{0x0F12, 0X00A2},
-	{0x0F12, 0X00A8},
-	{0x0F12, 0X00AE},
-	{0x0F12, 0X00B4},
-	{0x0F12, 0X00BA},
-
-	{0x002A, 0X1722},
-	{0x0F12, 0X8000},
-	{0x0F12, 0X0006},
-	{0x0F12, 0X3FF0},
-	{0x0F12, 0X03E8},
-	{0x0F12, 0X0000},
-	{0x0F12, 0X0008},
-	{0x0F12, 0X0001},
-	{0x0F12, 0X0004},
-	{0x0F12, 0X0080},
-	{0x0F12, 0X00C0},
-	{0x0F12, 0X00E0},
-	{0x0F12, 0X0000},
-
-	{0x002A, 0X028C},
-	{0x0F12, 0X0003},
-
-//===================================================================
-// AWB setting
-//===================================================================
-// AWB White Locus should be in front of REG_TC_IPRM_InitParamsUpdated //
-
-// AWB init Start point
-	{0x002A, 0X145E},
-	{0x0F12, 0X0580},   //awbb_GainsInit_0_
-	{0x0F12, 0X0428},   //awbb_GainsInit_1_
-	{0x0F12, 0X07B0},
-
-// White Locus
-	{0x002A, 0X11F0},
-	{0x0F12, 0X0120},   //awbb_IntcR
-	{0x0F12, 0X0121}, 	//awbb_IntcB
-
-// Indoor Zone
-	{0x002A, 0X101C},
-	{0x0F12, 0X03B8},
-	{0x0F12, 0X0410},
-	{0x0F12, 0X0344},
-	{0x0F12, 0X040C},
-	{0x0F12, 0X02E6},
-	{0x0F12, 0X03F0},
-	{0x0F12, 0X029A},
-	{0x0F12, 0X03A8},
-	{0x0F12, 0X0272},
-	{0x0F12, 0X0366},
-	{0x0F12, 0X0250},
-	{0x0F12, 0X032E},
-	{0x0F12, 0X0240},
-	{0x0F12, 0X02F4},
-	{0x0F12, 0X0236},
-	{0x0F12, 0X02BC},
-	{0x0F12, 0X021A},
-	{0x0F12, 0X02A0},
-	{0x0F12, 0X01F4},
-	{0x0F12, 0X0298},
-	{0x0F12, 0X01B8},
-	{0x0F12, 0X0290},
-	{0x0F12, 0X01A4},
-	{0x0F12, 0X0276},
-	{0x0F12, 0X01AA},
-	{0x0F12, 0X0260},
-	{0x0F12, 0X01C6},
-	{0x0F12, 0X0210},
-	{0x0F12, 0X0000},
-	{0x0F12, 0X0000},
-	{0x0F12, 0X0000},
-	{0x0F12, 0X0000},
-	{0x0F12, 0X0000},
-	{0x0F12, 0X0000},
-	{0x0F12, 0X0000},
-	{0x0F12, 0X0000},
-	{0x0F12, 0X0000},
-	{0x0F12, 0X0000},
-	{0x0F12, 0X0000},
-	{0x0F12, 0X0000},
-	{0x0F12, 0x0005},
-	{0x002A, 0x1070},
-	{0x0F12, 0x000E},
-	{0x002A, 0x1074},
-	{0x0F12, 0x0106},
-// Outdoor Zone
-	{0x002A, 0x1078},
-	{0x0F12, 0x025A},
-	{0x0F12, 0x027C},
-	{0x0F12, 0x0236},
-	{0x0F12, 0x028E},
-	{0x0F12, 0x0222},
-	{0x0F12, 0x0290},
-	{0x0F12, 0x0214},
-	{0x0F12, 0x0290},
-	{0x0F12, 0x0208},
-	{0x0F12, 0x028E},
-	{0x0F12, 0x0200},
-	{0x0F12, 0x0288},
-	{0x0F12, 0x01F8},
-	{0x0F12, 0x027E},
-	{0x0F12, 0x01F4},
-	{0x0F12, 0x0272},
-	{0x0F12, 0x01FC},
-	{0x0F12, 0x0260},
-	{0x0F12, 0x021C},
-	{0x0F12, 0x023C},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-
-	{0x0F12, 0x0004},
-	{0x002A, 0x10AC},
-	{0x0F12, 0x000A},
-	{0x002A, 0x10B0},
-	{0x0F12, 0x01DC},
-
-
-	{0x002A, 0x10B4},
-	{0x0F12, 0x039E},
-	{0x0F12, 0x0470},
-	{0x0F12, 0x0330},
-	{0x0F12, 0x0460},
-	{0x0F12, 0x02C4},
-	{0x0F12, 0x0452},
-	{0x0F12, 0x0278},
-	{0x0F12, 0x041C},
-	{0x0F12, 0x0230},
-	{0x0F12, 0x03EE},
-	{0x0F12, 0x01F0},
-	{0x0F12, 0x0392},
-	{0x0F12, 0x01C0},
-	{0x0F12, 0x0340},
-	{0x0F12, 0x0194},
-	{0x0F12, 0x0302},
-	{0x0F12, 0x016E},
-	{0x0F12, 0x02C2},
-	{0x0F12, 0x0148},
-	{0x0F12, 0x0286},
-	{0x0F12, 0x018A},
-	{0x0F12, 0x0242},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-
-	{0x0F12, 0x0006},
-	{0x002A, 0x10E8},
-	{0x0F12, 0x000B},
-	{0x002A, 0x10EC},
-	{0x0F12, 0x00C6},
-
-
-	{0x002A, 0x10F0},
-	{0x0F12, 0x0380},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0168},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x2D90},
-	{0x0F12, 0x0000},
-
-
-	{0x002A, 0x1464},
-	{0x0F12, 0x0008},
-	{0x0F12, 0x0190},
-	{0x0F12, 0x00A0},
-
-	{0x002A, 0x1228},
-	{0x0F12, 0x00C0},
-	{0x002A, 0x122C},
-	{0x0F12, 0x0010},
-	{0x002A, 0x122A},
-	{0x0F12, 0x0010},
-
-	{0x002A, 0x120A},
-	{0x0F12, 0x05D5},
-	{0x002A, 0x120E},
-	{0x0F12, 0x0000},
-
-	{0x0F12, 0x0771},
-	{0x0F12, 0x03A4},
-	{0x0F12, 0x0036},
-	{0x0F12, 0x002A},
-
-	{0x002A, 0x1278},
-	{0x0F12, 0xFEF7},
-	{0x0F12, 0x0021},
-	{0x0F12, 0x0AF0},
-	{0x0F12, 0x0AF0},
-	{0x0F12, 0x018F},
-	{0x0F12, 0x0096},
-	{0x0F12, 0x000E},
-	{0x002A, 0x1224},
-	{0x0F12, 0x0032},
-	{0x0F12, 0x001E},
-	{0x0F12, 0x00C0},
-	{0x0F12, 0x0010},
-	{0x0F12, 0x0002},
-	{0x002A, 0x2BA4},
-	{0x0F12, 0x0004},
-
-	{0x002A, 0x146C},
-	{0x0F12, 0x0002},
-
-// grid const
-	{0x002A, 0x1434},
-	{0x0F12, 0x02CE},
-	{0x0F12, 0x0347},
-	{0x0F12, 0x03C2},
-	{0x0F12, 0x1060},
-	{0x0F12, 0x1000},
-	{0x0F12, 0x1150},
-	{0x0F12, 0x11E5},
-	{0x0F12, 0x123B},
-	{0x0F12, 0x1296},
-	{0x0F12, 0x00AB},
-	{0x0F12, 0x00BF},
-	{0x0F12, 0x00D2},
-	{0x0F12, 0x0093},
-
-// Indoor Grid Offset_LYA
-	{0x002A, 0x13A4},
-	{0x0F12, 0x0010},
-	{0x0F12, 0x0010},
-	{0x0F12, 0xFFE0},
-	{0x0F12, 0xFFE0},
-	{0x0F12, 0xFFE0},
-	{0x0F12, 0xFFE0},
-	{0x0F12, 0x0010},
-	{0x0F12, 0x0010},
-	{0x0F12, 0xFFE0},
-	{0x0F12, 0xFFE0},
-	{0x0F12, 0xFFE0},
-	{0x0F12, 0xFFE0},
-	{0x0F12, 0x0010},
-	{0x0F12, 0x0010},
-	{0x0F12, 0xFFE0},
-	{0x0F12, 0xFFE0},
-	{0x0F12, 0xFFE0},
-	{0x0F12, 0xFFE0},
-
-	{0x0F12, 0xFFE0},
-	{0x0F12, 0xFFE0},
-	{0x0F12, 0xFFE0},
-	{0x0F12, 0xFF80},
-	{0x0F12, 0xFF00},
-	{0x0F12, 0xFE80},
-	{0x0F12, 0xFFE0},
-	{0x0F12, 0xFFE0},
-	{0x0F12, 0xFFE0},
-	{0x0F12, 0xFF80},
-	{0x0F12, 0xFF00},
-	{0x0F12, 0xFE80},
-	{0x0F12, 0xFFE0},
-	{0x0F12, 0xFFE0},
-	{0x0F12, 0xFFE0},
-	{0x0F12, 0xFF80},
-	{0x0F12, 0xFF00},
-	{0x0F12, 0xFE80},
-
-// Outdoor Grid Offset_LYA
-	{0x0F12, 0xFFB0},
-	{0x0F12, 0xFFB0},
-	{0x0F12, 0xFFB0},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-
-	{0x0F12, 0xFFB0},
-	{0x0F12, 0xFFB0},
-	{0x0F12, 0xFFB0},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-
-	{0x0F12, 0xFFB0},
-	{0x0F12, 0xFFB0},
-	{0x0F12, 0xFFB0},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-
-	{0x0F12, 0x0030},
-	{0x0F12, 0x0030},
-	{0x0F12, 0x0030},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-
-	{0x0F12, 0x0030},
-	{0x0F12, 0x0030},
-	{0x0F12, 0x0030},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-
-	{0x0F12, 0x0030},
-	{0x0F12, 0x0030},
-	{0x0F12, 0x0030},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-
-
-	{0x002A, 0x1208},
-	{0x0F12, 0x0020},
-
-	{0x002A, 0x144E},
-	{0x0F12, 0x0000},
-	{0x0F12, 0xFFE0},
-	{0x0F12, 0x0000},
-
-
-//==================================================================================
-// 10.Clock Setting                          PCLK  X
-//==================================================================================
-
-	{0x002A, 0x01F8}, // Clock setting block
-	{0x0F12, 0x5DC0}, //REG_TC_IPRM_InClockLSBs //MCLK : 24Mhz
-	{0x002A, 0x0212},
-	{0x0F12, 0x0000}, //REG_TC_IPRM_UseNPviClocks
-	{0x0F12, 0x0002}, //REG_TC_IPRM_UseNMipiClocks
-	{0x0F12, 0x0002}, //REG_TC_IPRM_NumberOfMipiLanes
-	{0x002A, 0x021A},
-	{0x0F12, 0x3A98}, //REG_TC_IPRM_OpClk4KHz_0 //SCLK : 60Mhz
-	{0x0F12, 0x278D}, //REG_TC_IPRM_MinOutRate4KHz_0 //PCLK Min : 81Mhz
-	{0x0F12, 0x278D}, //REG_TC_IPRM_MaxOutRate4KHz_0 //PCLK Max : 81Mhz
-	{0x0F12, 0x4F1A}, //REG_TC_IPRM_OpClk4KHz_1 //SCLK : 81Mhz
-	{0x0F12, 0x278D}, //REG_TC_IPRM_MinOutRate4KHz_1 //PCLK Min : 81Mhz
-	{0x0F12, 0x278D}, //REG_TC_IPRM_MaxOutRate4KHz_1 //PCLK Max : 81Mhz
-
-
-//==================================================================================
-// 11.Auto Flicker Detection
-//==================================================================================
-
-	{0x002A, 0x0F30},
-	{0x0F12, 0x0001}, ///*AFC_D_ConvAccelerPower */
-
-
-	{0x002A, 0x0F2A},
-	{0x0F12, 0x0000}, ///*AFC_Default BIT[0] 1:60Hz 0:50Hz */
-	{0x002A, 0x04E6},
-	{0x0F12, 0x077F}, ///*REG_TC_DBG 7F: 60Hz  5F:50Hz */
-
-//==================================================================================
-// 12.AE Setting
-//==================================================================================
-//AE Target
-	{0x002A, 0x1484},
-	{0x0F12, 0x003C}, 	//TVAR_ae_BrAve//
-
-//ae_StatMode bit[3] BLC has to be bypassed to prevent AE weight change especially backlight scene //
-	{0x002A, 0x148A},
-	{0x0F12, 0x000F}, 	//ae_StatMode//
-
-	{0x002A, 0x058C},
-	{0x0F12, 0x3520},
-
-	{0x0F12, 0x0000},
-	{0x0F12, 0xC350},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x3520},
-	{0x0F12, 0x0000},
-	{0x0F12, 0xC350},
-	{0x0F12, 0x0000},
-	{0x002A, 0x059C},
-	{0x0F12, 0x0470},
-	{0x0F12, 0x0C00},
-	{0x0F12, 0x0100},
-	{0x0F12, 0x1000},
-
-
-	{0x002A, 0x0544},
-	{0x0F12, 0x0111},
-	{0x0F12, 0x00EF},
-
-
-
-
-	{0x002A, 0x0608},
-	{0x0F12, 0x0001},
-	{0x0F12, 0x0001},
-	{0x0F12, 0x0800},
-	{0x0F12, 0x0100},
-
-
-	{0x0F12, 0x0001},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0A3C},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0D05},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x4008},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x7000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x9E00},
-	{0x0F12, 0x0000},
-	{0x0F12, 0xAD00},
-	{0x0F12, 0x0001},
-	{0x0F12, 0xF1D4},
-	{0x0F12, 0x0002},
-	{0x0F12, 0xDC00},
-	{0x0F12, 0x0005},
-	{0x0F12, 0xDC00},
-	{0x0F12, 0x0005},
-
-
-	{0x002A, 0x0638},
-	{0x0F12, 0x0001},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0A3C},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0D05},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x3408},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x3408},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x6810},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x8214},
-	{0x0F12, 0x0000},
-	{0x0F12, 0xC350},
-	{0x0F12, 0x0000},
-	{0x0F12, 0xC350},
-	{0x0F12, 0x0000},
-	{0x0F12, 0xC350},
-	{0x0F12, 0x0000},
-
-
-
-	{0x002A, 0x0660},
-	{0x0F12, 0x0650},
-	{0x0F12, 0x0100},
-
-
-// Lei Control	//
-	{0x002A, 0x06B8},
-	{0x0F12, 0x452C},
-	{0x0F12, 0x0005}, 	 //lt_uMaxLei//
-
-	{0x002A, 0x05D0},
-	{0x0F12, 0x0000},
-
-//==================================================================================
-// 13.AE Weight (Normal)
-//==================================================================================
-	{0x002A, 0x1492},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0202},
-	{0x0F12, 0x0202},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0201},
-	{0x0F12, 0x0202},
-	{0x0F12, 0x0202},
-	{0x0F12, 0x0102},
-	{0x0F12, 0x0201},
-	{0x0F12, 0x0302},
-	{0x0F12, 0x0203},
-	{0x0F12, 0x0102},
-	{0x0F12, 0x0201},
-	{0x0F12, 0x0302},
-	{0x0F12, 0x0203},
-	{0x0F12, 0x0102},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0202},
-	{0x0F12, 0x0202},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0201},
-	{0x0F12, 0x0102},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0100},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0001},
-
-//==================================================================================
-// 14.Flash Setting
-//==================================================================================
-
-	{0x0028, 0x7000},
-	{0x002A, 0x0484},
-	{0x0F12, 0x0002}, //REG_TC_FLS_Mode
-
-	{0x002A, 0x183A},
-	{0x0F12, 0x0001}, //fls_afl_usCounter
-
-	{0x002A, 0x17F6},
-	{0x0F12, 0x023C}, //fls_afl_DefaultWPr //5C 54 54
-	{0x0F12, 0x0230}, //fls_afl_DefaultWPb //28 30 28
-
-	{0x002A, 0x1840},
-	{0x0F12, 0x0001},	//fls_afl_bFlsMode
-
-	{0x0F12, 0x0100},	//fls_afl_FlsAFIn_0_
-	{0x0F12, 0x0120},	//fls_afl_FlsAFIn_1_
-	{0x0F12, 0x0180},	//fls_afl_FlsAFIn_2_
-	{0x0F12, 0x0200},	//fls_afl_FlsAFIn_3_
-	{0x0F12, 0x0400},	//fls_afl_FlsAFIn_4_
-	{0x0F12, 0x0800},	//fls_afl_FlsAFIn_5_
-	{0x0F12, 0x0A00},	//fls_afl_FlsAFIn_6_
-	{0x0F12, 0x1000},	//fls_afl_FlsAFIn_7_
-
-	{0x0F12, 0x0100},	//fls_afl_FlsAFOut_0_
-	{0x0F12, 0x00A0},	//fls_afl_FlsAFOut_1_
-	{0x0F12, 0x0090},	//fls_afl_FlsAFOut_2_
-	{0x0F12, 0x0080},	//fls_afl_FlsAFOut_3_
-	{0x0F12, 0x0070},	//fls_afl_FlsAFOut_4_
-	{0x0F12, 0x0045},	//fls_afl_FlsAFOut_5_
-	{0x0F12, 0x0030},	//fls_afl_FlsAFOut_6_
-	{0x0F12, 0x0010}, //fls_afl_FlsAFOut_7_
-
-	{0x002A, 0x1884},
-	{0x0F12, 0x0100},	//fls_afl_FlsNBOut_0_
-	{0x0F12, 0x0100},	//fls_afl_FlsNBOut_1_
-	{0x0F12, 0x0100},	//fls_afl_FlsNBOut_2_
-	{0x0F12, 0x0100},	//fls_afl_FlsNBOut_3_
-	{0x0F12, 0x0100},	//fls_afl_FlsNBOut_4_
-	{0x0F12, 0x0100},	//fls_afl_FlsNBOut_5_
-	{0x0F12, 0x0100},	//fls_afl_FlsNBOut_6_
-	{0x0F12, 0x0100}, //fls_afl_FlsNBOut_7_
-
-	{0x002A, 0x1826},
-
-	{0x0F12, 0x0100},	//fls_afl_FlashWP_Weight2_0_
-	{0x0F12, 0x00C0},	//fls_afl_FlashWP_Weight2_1_
-	{0x0F12, 0x0080},	//fls_afl_FlashWP_Weight2_2_
-	{0x0F12, 0x000A},	//fls_afl_FlashWP_Weight2_3_
-	{0x0F12, 0x0000}, //fls_afl_FlashWP_Weight2_4_
-
-	{0x0F12, 0x0030},	//fls_afl_FlashWP_Lei_Thres2_0_
-	{0x0F12, 0x0040},	//fls_afl_FlashWP_Lei_Thres2_1_
-	{0x0F12, 0x0048},	//fls_afl_FlashWP_Lei_Thres2_2_
-	{0x0F12, 0x0050},	//fls_afl_FlashWP_Lei_Thres2_3_
-	{0x0F12, 0x0060}, //fls_afl_FlashWP_Lei_Thres2_4_
-
-	{0x002A, 0x4784},
-	{0x0F12, 0x00A0},	// TNP_Regs_FlsWeightRIn  weight tune start in
-	{0x0F12, 0x00C0},
-	{0x0F12, 0x00D0},
-	{0x0F12, 0x0100},
-	{0x0F12, 0x0200},
-	{0x0F12, 0x0300},
-
-	{0x0F12, 0x0088},	// TNP_Regs_FlsWeightROut  weight tune start out
-	{0x0F12, 0x00B0},
-	{0x0F12, 0x00C0},
-	{0x0F12, 0x0100},
-	{0x0F12, 0x0200},
-	{0x0F12, 0x0300},
-
-	{0x002A, 0x479C},
-
-	{0x0F12, 0x0120},	//Fls  BRIn
-	{0x0F12, 0x0150},
-	{0x0F12, 0x0200},
-
-	{0x0F12, 0x003C},	// Fls  BROut
-	{0x0F12, 0x003B},
-	{0x0F12, 0x002B}, 	//brightness
-
-//==================================================================================
-// 15.CCM Setting
-//==================================================================================
-	 //CCM
-	{0x002A, 0x08A6},
-	{0x0F12, 0x00C0},
-	{0x0F12, 0x0100},
-	{0x0F12, 0x0125},
-	{0x0F12, 0x015F},
-	{0x0F12, 0x017C},
-	{0x0F12, 0x0194},
-
-	{0x0F12, 0x0001}, 	//wbt_bUseOutdoorCCM
-
-	{0x002A, 0x0898},
-	{0x0F12, 0x4800},
-	{0x0F12, 0x7000}, 	//TVAR_wbt_pBaseCcms
-	{0x002A, 0x08A0},
-	{0x0F12, 0x48D8},
-	{0x0F12, 0x7000}, 	//TVAR_wbt_pOutdoorCcm
-
-	{0x002A, 0x4800},   // Horizon
-	{0x0F12, 0x0208},   //TVAR_wbt_pBaseCcms[0]
-	{0x0F12, 0xFFB5},   //TVAR_wbt_pBaseCcms[1]
-	{0x0F12, 0xFFE8},   //TVAR_wbt_pBaseCcms[2]
-	{0x0F12, 0xFF99},   //TVAR_wbt_pBaseCcms[3]
-	{0x0F12, 0x00EB},   //TVAR_wbt_pBaseCcms[4]
-	{0x0F12, 0xFFAD},   //TVAR_wbt_pBaseCcms[5]
-	{0x0F12, 0x0022},   //TVAR_wbt_pBaseCcms[6]
-	{0x0F12, 0xFFEA},   //TVAR_wbt_pBaseCcms[7]
-	{0x0F12, 0x01C2},   //TVAR_wbt_pBaseCcms[8]
-	{0x0F12, 0x00C6},   //TVAR_wbt_pBaseCcms[9]
-	{0x0F12, 0x0095},   //TVAR_wbt_pBaseCcms[10]
-	{0x0F12, 0xFEFD},   //TVAR_wbt_pBaseCcms[11]
-	{0x0F12, 0x0206},   //TVAR_wbt_pBaseCcms[12]
-	{0x0F12, 0xFF7F},   //TVAR_wbt_pBaseCcms[13]
-	{0x0F12, 0x0191},   //TVAR_wbt_pBaseCcms[14]
-	{0x0F12, 0xFF06},   //TVAR_wbt_pBaseCcms[15]
-	{0x0F12, 0x01BA},   //TVAR_wbt_pBaseCcms[16]
-	{0x0F12, 0x0108},   //TVAR_wbt_pBaseCcms[17]
-
-	{0x0F12, 0x0208},		//TVAR_wbt_pBaseCcms[18]/* inca A */
-	{0x0F12, 0xFFB5},   //TVAR_wbt_pBaseCcms[19]
-	{0x0F12, 0xFFE8},   //TVAR_wbt_pBaseCcms[20]
-	{0x0F12, 0xFF82},   //TVAR_wbt_pBaseCcms[21]
-	{0x0F12, 0x0115},   //TVAR_wbt_pBaseCcms[22]
-	{0x0F12, 0xFF9A},   //TVAR_wbt_pBaseCcms[23]
-	{0x0F12, 0xFFFB},   //TVAR_wbt_pBaseCcms[24]
-	{0x0F12, 0xFFB4},   //TVAR_wbt_pBaseCcms[25]
-	{0x0F12, 0x021E},   //TVAR_wbt_pBaseCcms[26]
-	{0x0F12, 0x00C6},   //TVAR_wbt_pBaseCcms[27]
-	{0x0F12, 0x0095},   //TVAR_wbt_pBaseCcms[28]
-	{0x0F12, 0xFEFD},   //TVAR_wbt_pBaseCcms[29]
-	{0x0F12, 0x0206},   //TVAR_wbt_pBaseCcms[30]
-	{0x0F12, 0xFF7F},   //TVAR_wbt_pBaseCcms[31]
-	{0x0F12, 0x0191},   //TVAR_wbt_pBaseCcms[32]
-	{0x0F12, 0xFF06},   //TVAR_wbt_pBaseCcms[33]
-	{0x0F12, 0x01BA},   //TVAR_wbt_pBaseCcms[34]
-	{0x0F12, 0x0108},   //TVAR_wbt_pBaseCcms[35]
-
-	{0x0F12, 0x0208},	  //TVAR_wbt_pBaseCcms[36] /*WW*/
-	{0x0F12, 0xFFB5},   //TVAR_wbt_pBaseCcms[37]
-	{0x0F12, 0xFFE8},   //TVAR_wbt_pBaseCcms[38]
-	{0x0F12, 0xFF99},   //TVAR_wbt_pBaseCcms[39]
-	{0x0F12, 0x00EB},   //TVAR_wbt_pBaseCcms[40]
-	{0x0F12, 0xFFAD},   //TVAR_wbt_pBaseCcms[41]
-	{0x0F12, 0x0022},   //TVAR_wbt_pBaseCcms[42]
-	{0x0F12, 0xFFEA},   //TVAR_wbt_pBaseCcms[43]
-	{0x0F12, 0x01C2},   //TVAR_wbt_pBaseCcms[44]
-	{0x0F12, 0x00C6},   //TVAR_wbt_pBaseCcms[45]
-	{0x0F12, 0x0095},   //TVAR_wbt_pBaseCcms[46]
-	{0x0F12, 0xFEFD},   //TVAR_wbt_pBaseCcms[47]
-	{0x0F12, 0x0206},   //TVAR_wbt_pBaseCcms[48]
-	{0x0F12, 0xFF7F},   //TVAR_wbt_pBaseCcms[49]
-	{0x0F12, 0x0191},   //TVAR_wbt_pBaseCcms[50]
-	{0x0F12, 0xFF06},   //TVAR_wbt_pBaseCcms[51]
-	{0x0F12, 0x01BA},   //TVAR_wbt_pBaseCcms[52]
-	{0x0F12, 0x0108},   //TVAR_wbt_pBaseCcms[53]
-
-	{0x0F12, 0x0204},  	//TVAR_wbt_pBaseCcms[54] // CW
-	{0x0F12, 0xFFB2},  	//TVAR_wbt_pBaseCcms[55]
-	{0x0F12, 0xFFF5},  	//TVAR_wbt_pBaseCcms[56]
-	{0x0F12, 0xFEF1},  	//TVAR_wbt_pBaseCcms[57]
-	{0x0F12, 0x014E},  	//TVAR_wbt_pBaseCcms[58]
-	{0x0F12, 0xFF18},  	//TVAR_wbt_pBaseCcms[59]
-	{0x0F12, 0xFFE6},  	//TVAR_wbt_pBaseCcms[60]
-	{0x0F12, 0xFFDD},  	//TVAR_wbt_pBaseCcms[61]
-	{0x0F12, 0x01B2},  	//TVAR_wbt_pBaseCcms[62]
-	{0x0F12, 0x00F2},  	//TVAR_wbt_pBaseCcms[63]
-	{0x0F12, 0x00CA},  	//TVAR_wbt_pBaseCcms[64]
-	{0x0F12, 0xFF48},  	//TVAR_wbt_pBaseCcms[65]
-	{0x0F12, 0x0151},  	//TVAR_wbt_pBaseCcms[66]
-	{0x0F12, 0xFF50},  	//TVAR_wbt_pBaseCcms[67]
-	{0x0F12, 0x0147},  	//TVAR_wbt_pBaseCcms[68]
-	{0x0F12, 0xFF75},  	//TVAR_wbt_pBaseCcms[69]
-	{0x0F12, 0x0187},  	//TVAR_wbt_pBaseCcms[70]
-	{0x0F12, 0x01BF},  	//TVAR_wbt_pBaseCcms[71]
-
-	{0x0F12, 0x0204},  	//TVAR_wbt_pBaseCcms[72] // D50
-	{0x0F12, 0xFFB2},  	//TVAR_wbt_pBaseCcms[73]
-	{0x0F12, 0xFFF5},  	//TVAR_wbt_pBaseCcms[74]
-	{0x0F12, 0xFEF1},  	//TVAR_wbt_pBaseCcms[75]
-	{0x0F12, 0x014E},  	//TVAR_wbt_pBaseCcms[76]
-	{0x0F12, 0xFF18},  	//TVAR_wbt_pBaseCcms[77]
-	{0x0F12, 0xFFD9},  	//TVAR_wbt_pBaseCcms[78]
-	{0x0F12, 0xFFBA},  	//TVAR_wbt_pBaseCcms[79]
-	{0x0F12, 0x01D4},  	//TVAR_wbt_pBaseCcms[80]
-	{0x0F12, 0x00F2},  	//TVAR_wbt_pBaseCcms[81]
-	{0x0F12, 0x00CA},  	//TVAR_wbt_pBaseCcms[82]
-	{0x0F12, 0xFF48},  	//TVAR_wbt_pBaseCcms[83]
-	{0x0F12, 0x0151},  	//TVAR_wbt_pBaseCcms[84]
-	{0x0F12, 0xFF50},  	//TVAR_wbt_pBaseCcms[85]
-	{0x0F12, 0x0147},  	//TVAR_wbt_pBaseCcms[86]
-	{0x0F12, 0xFF75},  	//TVAR_wbt_pBaseCcms[87]
-	{0x0F12, 0x0187},  	//TVAR_wbt_pBaseCcms[88]
-	{0x0F12, 0x01BF},  	//TVAR_wbt_pBaseCcms[89]
-
-	{0x0F12, 0x0204},  	//TVAR_wbt_pBaseCcms[90] // D65
-	{0x0F12, 0xFFB2},  	//TVAR_wbt_pBaseCcms[91]
-	{0x0F12, 0xFFF5},  	//TVAR_wbt_pBaseCcms[92]
-	{0x0F12, 0xFEF1},  	//TVAR_wbt_pBaseCcms[93]
-	{0x0F12, 0x014E},  	//TVAR_wbt_pBaseCcms[94]
-	{0x0F12, 0xFF18},  	//TVAR_wbt_pBaseCcms[95]
-	{0x0F12, 0xFFD9},  	//TVAR_wbt_pBaseCcms[96]
-	{0x0F12, 0xFFBA},  	//TVAR_wbt_pBaseCcms[97]
-	{0x0F12, 0x01D4},  	//TVAR_wbt_pBaseCcms[98]
-	{0x0F12, 0x00F2},  	//TVAR_wbt_pBaseCcms[99]
-	{0x0F12, 0x00CA},  	//TVAR_wbt_pBaseCcms[100]
-	{0x0F12, 0xFF48},  	//TVAR_wbt_pBaseCcms[101]
-	{0x0F12, 0x0151},  	//TVAR_wbt_pBaseCcms[102]
-	{0x0F12, 0xFF50},  	//TVAR_wbt_pBaseCcms[103]
-	{0x0F12, 0x0147},  	//TVAR_wbt_pBaseCcms[104]
-	{0x0F12, 0xFF75},  	//TVAR_wbt_pBaseCcms[105]
-	{0x0F12, 0x0187},  	//TVAR_wbt_pBaseCcms[106]
-	{0x0F12, 0x01BF},  	//TVAR_wbt_pBaseCcms[107]
-
-	{0x0F12, 0x01E5}, 	//TVAR_wbt_pOutdoorCcm[0]
-	{0x0F12, 0xFFA4}, 	//TVAR_wbt_pOutdoorCcm[1]
-	{0x0F12, 0xFFDC}, 	//TVAR_wbt_pOutdoorCcm[2]
-	{0x0F12, 0xFE69},   //TVAR_wbt_pOutdoorCcm[3]
-	{0x0F12, 0x0130},   //TVAR_wbt_pOutdoorCcm[4]
-	{0x0F12, 0xFF55},   //TVAR_wbt_pOutdoorCcm[5]
-	{0x0F12, 0xFFD2}, 	//TVAR_wbt_pOutdoorCcm[6]
-	{0x0F12, 0xFFDF}, 	//TVAR_wbt_pOutdoorCcm[7]
-	{0x0F12, 0x0236}, 	//TVAR_wbt_pOutdoorCcm[8]
-	{0x0F12, 0x00C7}, 	//TVAR_wbt_pOutdoorCcm[9]
-	{0x0F12, 0x0118}, 	//TVAR_wbt_pOutdoorCcm[10]
-	{0x0F12, 0xFF38}, 	//TVAR_wbt_pOutdoorCcm[11]
-	{0x0F12, 0x01CE}, 	//TVAR_wbt_pOutdoorCcm[12]
-	{0x0F12, 0xFF83}, 	//TVAR_wbt_pOutdoorCcm[13]
-	{0x0F12, 0x0195}, 	//TVAR_wbt_pOutdoorCcm[14]
-	{0x0F12, 0xFEF3}, 	//TVAR_wbt_pOutdoorCcm[15]
-	{0x0F12, 0x0126}, 	//TVAR_wbt_pOutdoorCcm[16]
-	{0x0F12, 0x0162},   //TVAR_wbt_pOutdoorCcm[17]
-
-//===================================================================
-// 16.GAMMA
-//===================================================================
-	//RGB Indoor Gamma
-	{0x002A, 0x0734},  ///*R*/
-	{0x0F12, 0x0001},
-	{0x0F12, 0x0003},
-	{0x0F12, 0x000F},
-	{0x0F12, 0x0028},
-	{0x0F12, 0x0066},
-	{0x0F12, 0x00D9},
-	{0x0F12, 0x0138},
-	{0x0F12, 0x0163},
-	{0x0F12, 0x0189},
-	{0x0F12, 0x01C6},
-	{0x0F12, 0x01F8},
-	{0x0F12, 0x0222},
-	{0x0F12, 0x0247},
-	{0x0F12, 0x0282},
-	{0x0F12, 0x02B5},
-	{0x0F12, 0x030F},
-	{0x0F12, 0x035F},
-	{0x0F12, 0x03A2},
-	{0x0F12, 0x03D8},
-	{0x0F12, 0x03FF},
-	{0x0F12, 0x0001},//  /*G*/
-	{0x0F12, 0x0003},
-	{0x0F12, 0x000F},
-	{0x0F12, 0x0028},
-	{0x0F12, 0x0066},
-	{0x0F12, 0x00D9},
-	{0x0F12, 0x0138},
-	{0x0F12, 0x0163},
-	{0x0F12, 0x0189},
-	{0x0F12, 0x01C6},
-	{0x0F12, 0x01F8},
-	{0x0F12, 0x0222},
-	{0x0F12, 0x0247},
-	{0x0F12, 0x0282},
-	{0x0F12, 0x02B5},
-	{0x0F12, 0x030F},
-	{0x0F12, 0x035F},
-	{0x0F12, 0x03A2},
-	{0x0F12, 0x03D8},
-	{0x0F12, 0x03FF},
-	{0x0F12, 0x0001}, // /*B*/
-	{0x0F12, 0x0003},
-	{0x0F12, 0x000F},
-	{0x0F12, 0x0028},
-	{0x0F12, 0x0066},
-	{0x0F12, 0x00D9},
-	{0x0F12, 0x0138},
-	{0x0F12, 0x0163},
-	{0x0F12, 0x0189},
-	{0x0F12, 0x01C6},
-	{0x0F12, 0x01F8},
-	{0x0F12, 0x0222},
-	{0x0F12, 0x0247},
-	{0x0F12, 0x0282},
-	{0x0F12, 0x02B5},
-	{0x0F12, 0x030F},
-	{0x0F12, 0x035F},
-	{0x0F12, 0x03A2},
-	{0x0F12, 0x03D8},
-	{0x0F12, 0x03FF},
-
-
-	{0x0F12, 0x0007},//RED
-	{0x0F12, 0x0012},
-	{0x0F12, 0x0020},
-	{0x0F12, 0x0038},
-	{0x0F12, 0x0071},
-	{0x0F12, 0x00DA},
-	{0x0F12, 0x0137},
-	{0x0F12, 0x0161},
-	{0x0F12, 0x0187},
-	{0x0F12, 0x01C3},
-	{0x0F12, 0x01FE},
-	{0x0F12, 0x021B},
-	{0x0F12, 0x0245},
-	{0x0F12, 0x028C},
-	{0x0F12, 0x02CB},
-	{0x0F12, 0x0325},
-	{0x0F12, 0x0365},
-	{0x0F12, 0x039A},
-	{0x0F12, 0x03C7},
-	{0x0F12, 0x03F4},
-
-	{0x0F12, 0x0005},
-	{0x0F12, 0x0010},
-	{0x0F12, 0x001E},
-	{0x0F12, 0x0036},
-	{0x0F12, 0x006F},
-	{0x0F12, 0x00D8},
-	{0x0F12, 0x0135},
-	{0x0F12, 0x015F},
-	{0x0F12, 0x0185},
-	{0x0F12, 0x01C1},
-	{0x0F12, 0x01F3},
-	{0x0F12, 0x0220},
-	{0x0F12, 0x024A},
-	{0x0F12, 0x0291},
-	{0x0F12, 0x02D0},
-	{0x0F12, 0x032A},
-	{0x0F12, 0x036A},
-	{0x0F12, 0x039F},
-	{0x0F12, 0x03CC},
-	{0x0F12, 0x03F9},
-
-	{0x0F12, 0x0003},//Blue
-	{0x0F12, 0x000E},
-	{0x0F12, 0x001C},
-	{0x0F12, 0x0034},
-	{0x0F12, 0x006D},
-	{0x0F12, 0x00D6},
-	{0x0F12, 0x0133},
-	{0x0F12, 0x015D},
-	{0x0F12, 0x0183},
-	{0x0F12, 0x01BF},
-	{0x0F12, 0x01F5},
-	{0x0F12, 0x0222},
-	{0x0F12, 0x024C},
-	{0x0F12, 0x0293},
-	{0x0F12, 0x02D2},
-	{0x0F12, 0x032C},
-	{0x0F12, 0x036C},
-	{0x0F12, 0x03A1},
-	{0x0F12, 0x03CE},
-	{0x0F12, 0x03FB},
-
-//==================================================================================
-// 17.AFIT
-//==================================================================================
-	{0x002A, 0x0944}, // Noise Index setting
-	{0x0F12, 0x0050}, 	  	///*afit_uNoiseIndInDoor */
-	{0x0F12, 0x00B0}, 		///*afit_uNoiseIndInDoor */
-	{0x0F12, 0x0196}, 		///*afit_uNoiseIndInDoor */
-	{0x0F12, 0x0245}, 		///*afit_uNoiseIndInDoor */
-	{0x0F12, 0x0300}, 		///*afit_uNoiseIndInDoor */
-	{0x002A, 0x0976},
-	{0x0F12, 0x0070}, 	  	///*afit_usGamutTh */
-	{0x0F12, 0x0005}, 		///*afit_usNeargrayOffset */
-	{0x0F12, 0x0000}, 		///*afit_bUseSenBpr */
-	{0x0F12, 0x01CC}, 		///*afit_usBprThr_0_ */
-	{0x0F12, 0x01CC}, 		///*afit_usBprThr_1_ */
-	{0x0F12, 0x01CC}, 		///*afit_usBprThr_2_ */
-	{0x0F12, 0x01CC}, 		///*afit_usBprThr_3_ */
-	{0x0F12, 0x01CC}, 		///*afit_usBprThr_4_ */
-	{0x0F12, 0x0180}, 		///*afit_NIContrastAFITValue */
-	{0x0F12, 0x0196}, 		///*afit_NIContrastTh */
-	{0x002A, 0x0938},
-	{0x0F12, 0x0000},     	///* on/off AFIT by NB option */
-	{0x0F12, 0x0014}, 		///*SARR_uNormBrInDoor */
-	{0x0F12, 0x00D2}, 		///*SARR_uNormBrInDoor */
-	{0x0F12, 0x0384}, 		///*SARR_uNormBrInDoor */
-	{0x0F12, 0x07D0}, 		///*SARR_uNormBrInDoor */
-	{0x0F12, 0x1388}, 		///*SARR_uNormBrInDoor */
-	{0x002A, 0x098C},
-	{0x0F12, 0xFFEC},    //7000098C AFIT16_BRIGHTNESS
-	{0x0F12, 0x0000},    //7000098E AFIT16_CONTRAST
-	{0x0F12, 0x0000},    //70000990 AFIT16_SATURATION
-	{0x0F12, 0x0000},    //70000992 AFIT16_SHARP_BLUR
-	{0x0F12, 0x0000},    //70000994 AFIT16_GLAMOUR
-	{0x0F12, 0x00C0},    //70000996 AFIT16_bnr_edge_high
-	{0x0F12, 0x0064},    //70000998 AFIT16_postdmsc_iLowBright
-	{0x0F12, 0x0384},    //7000099A AFIT16_postdmsc_iHighBright
-	{0x0F12, 0x005F},    //7000099C AFIT16_postdmsc_iLowSat
-	{0x0F12, 0x01F4},    //7000099E AFIT16_postdmsc_iHighSat
-	{0x0F12, 0x0070},    //700009A0 AFIT16_postdmsc_iTune
-	{0x0F12, 0x0040},    //700009A2 AFIT16_yuvemix_mNegRanges_0
-	{0x0F12, 0x00A0},    //700009A4 AFIT16_yuvemix_mNegRanges_1
-	{0x0F12, 0x0100},    //700009A6 AFIT16_yuvemix_mNegRanges_2
-	{0x0F12, 0x0010},    //700009A8 AFIT16_yuvemix_mPosRanges_0
-	{0x0F12, 0x0040},    //700009AA AFIT16_yuvemix_mPosRanges_1
-	{0x0F12, 0x00A0},    //700009AC AFIT16_yuvemix_mPosRanges_2
-	{0x0F12, 0x1430},    //700009AE AFIT8_bnr_edge_low  [7:0] AFIT8_bnr_repl_thresh
-	{0x0F12, 0x0201},    //700009B0 AFIT8_bnr_repl_force  [7:0] AFIT8_bnr_iHotThreshHigh
-	{0x0F12, 0x0204},    //700009B2 AFIT8_bnr_iHotThreshLow   [7:0] AFIT8_bnr_iColdThreshHigh
-	{0x0F12, 0x3604},    //700009B4 AFIT8_bnr_iColdThreshLow   [7:0] AFIT8_bnr_DispTH_Low
-	{0x0F12, 0x032A},    //700009B6 AFIT8_bnr_DispTH_High   [7:0] AFIT8_bnr_DISP_Limit_Low
-	{0x0F12, 0x0103},    //700009B8 AFIT8_bnr_DISP_Limit_High   [7:0] AFIT8_bnr_iDistSigmaMin
-	{0x0F12, 0x1205},    //700009BA AFIT8_bnr_iDistSigmaMax   [7:0] AFIT8_bnr_iDiffSigmaLow
-	{0x0F12, 0x400D},    //700009BC AFIT8_bnr_iDiffSigmaHigh   [7:0] AFIT8_bnr_iNormalizedSTD_TH
-	{0x0F12, 0x0080},    //700009BE AFIT8_bnr_iNormalizedSTD_Limit   [7:0] AFIT8_bnr_iDirNRTune
-	{0x0F12, 0x2080},    //700009C0 AFIT8_bnr_iDirMinThres   [7:0] AFIT8_bnr_iDirFltDiffThresHigh
-	{0x0F12, 0x3840},    //700009C2 AFIT8_bnr_iDirFltDiffThresLow   [7:0] AFIT8_bnr_iDirSmoothPowerHigh
-	{0x0F12, 0x0638},    //700009C4 AFIT8_bnr_iDirSmoothPowerLow   [7:0] AFIT8_bnr_iLowMaxSlopeAllowed
-	{0x0F12, 0x0306},    //700009C6 AFIT8_bnr_iHighMaxSlopeAllowed   [7:0] AFIT8_bnr_iLowSlopeThresh
-	{0x0F12, 0x2003},    //700009C8 AFIT8_bnr_iHighSlopeThresh   [7:0] AFIT8_bnr_iSlopenessTH
-	{0x0F12, 0xFF01},    //700009CA AFIT8_bnr_iSlopeBlurStrength   [7:0] AFIT8_bnr_iSlopenessLimit
-	{0x0F12, 0x0000},    //700009CC AFIT8_bnr_AddNoisePower1   [7:0] AFIT8_bnr_AddNoisePower2
-	{0x0F12, 0x0400},    //700009CE AFIT8_bnr_iRadialTune   [7:0] AFIT8_bnr_iRadialPower
-	{0x0F12, 0x245A},    //700009D0 AFIT8_bnr_iRadialLimit   [7:0] AFIT8_ee_iFSMagThLow
-	{0x0F12, 0x102A},    //700009D2 AFIT8_ee_iFSMagThHigh   [7:0] AFIT8_ee_iFSVarThLow
-	{0x0F12, 0x000B},    //700009D4 AFIT8_ee_iFSVarThHigh   [7:0] AFIT8_ee_iFSThLow
-	{0x0F12, 0x0600},    //700009D6 AFIT8_ee_iFSThHigh   [7:0] AFIT8_ee_iFSmagPower
-	{0x0F12, 0x5A0F},    //700009D8 AFIT8_ee_iFSVarCountTh   [7:0] AFIT8_ee_iRadialLimit
-	{0x0F12, 0x0505},    //700009DA AFIT8_ee_iRadialPower   [7:0] AFIT8_ee_iSmoothEdgeSlope
-	{0x0F12, 0x1802},    //700009DC AFIT8_ee_iROADThres   [7:0] AFIT8_ee_iROADMaxNR
-	{0x0F12, 0x0000},    //700009DE AFIT8_ee_iROADSubMaxNR   [7:0] AFIT8_ee_iROADSubThres
-	{0x0F12, 0x2006},    //700009E0 AFIT8_ee_iROADNeiThres   [7:0] AFIT8_ee_iROADNeiMaxNR
-	{0x0F12, 0x3028},    //700009E2 AFIT8_ee_iSmoothEdgeThres   [7:0] AFIT8_ee_iMSharpen
-	{0x0F12, 0x0418},    //700009E4 AFIT8_ee_iWSharpen   [7:0] AFIT8_ee_iMShThresh
-	{0x0F12, 0x0101},    //700009E6 AFIT8_ee_iWShThresh   [7:0] AFIT8_ee_iReduceNegative
-	{0x0F12, 0x0800},    //700009E8 AFIT8_ee_iEmbossCentAdd   [7:0] AFIT8_ee_iShDespeckle
-	{0x0F12, 0x1804},    //700009EA AFIT8_ee_iReduceEdgeThresh   [7:0] AFIT8_dmsc_iEnhThresh
-	{0x0F12, 0x4008},    //700009EC AFIT8_dmsc_iDesatThresh   [7:0] AFIT8_dmsc_iDemBlurHigh
-	{0x0F12, 0x0540},    //700009EE AFIT8_dmsc_iDemBlurLow   [7:0] AFIT8_dmsc_iDemBlurRange
-	{0x0F12, 0x8006},    //700009F0 AFIT8_dmsc_iDecisionThresh   [7:0] AFIT8_dmsc_iCentGrad
-	{0x0F12, 0x0020},    //700009F2 AFIT8_dmsc_iMonochrom   [7:0] AFIT8_dmsc_iGBDenoiseVal
-	{0x0F12, 0x0000},    //700009F4 AFIT8_dmsc_iGRDenoiseVal   [7:0] AFIT8_dmsc_iEdgeDesatThrHigh
-	{0x0F12, 0x1800},    //700009F6 AFIT8_dmsc_iEdgeDesatThrLow   [7:0] AFIT8_dmsc_iEdgeDesat
-	{0x0F12, 0x0000},    //700009F8 AFIT8_dmsc_iNearGrayDesat   [7:0] AFIT8_dmsc_iEdgeDesatLimit
-	{0x0F12, 0x1E10},    //700009FA AFIT8_postdmsc_iBCoeff   [7:0] AFIT8_postdmsc_iGCoeff
-	{0x0F12, 0x000B},    //700009FC AFIT8_postdmsc_iWideMult   [7:0] AFIT8_yuvemix_mNegSlopes_0
-	{0x0F12, 0x0607},    //700009FE AFIT8_yuvemix_mNegSlopes_1   [7:0] AFIT8_yuvemix_mNegSlopes_2
-	{0x0F12, 0x0005},    //70000A00 AFIT8_yuvemix_mNegSlopes_3   [7:0] AFIT8_yuvemix_mPosSlopes_0
-	{0x0F12, 0x0607},    //70000A02 AFIT8_yuvemix_mPosSlopes_1   [7:0] AFIT8_yuvemix_mPosSlopes_2
-	{0x0F12, 0x0405},    //70000A04 AFIT8_yuvemix_mPosSlopes_3   [7:0] AFIT8_yuviirnr_iXSupportY
-	{0x0F12, 0x0205},    //70000A06 AFIT8_yuviirnr_iXSupportUV   [7:0] AFIT8_yuviirnr_iLowYNorm
-	{0x0F12, 0x0304},    //70000A08 AFIT8_yuviirnr_iHighYNorm   [7:0] AFIT8_yuviirnr_iLowUVNorm
-	{0x0F12, 0x0409},    //70000A0A AFIT8_yuviirnr_iHighUVNorm   [7:0] AFIT8_yuviirnr_iYNormShift
-	{0x0F12, 0x0306},    //70000A0C AFIT8_yuviirnr_iUVNormShift   [7:0] AFIT8_yuviirnr_iVertLength_Y
-	{0x0F12, 0x0407},    //70000A0E AFIT8_yuviirnr_iVertLength_UV   [7:0] AFIT8_yuviirnr_iDiffThreshL_Y
-	{0x0F12, 0x1C04},    //70000A10 AFIT8_yuviirnr_iDiffThreshH_Y   [7:0] AFIT8_yuviirnr_iDiffThreshL_UV
-	{0x0F12, 0x0214},    //70000A12 AFIT8_yuviirnr_iDiffThreshH_UV   [7:0] AFIT8_yuviirnr_iMaxThreshL_Y
-	{0x0F12, 0x1002},    //70000A14 AFIT8_yuviirnr_iMaxThreshH_Y   [7:0] AFIT8_yuviirnr_iMaxThreshL_UV
-	{0x0F12, 0x0610},    //70000A16 AFIT8_yuviirnr_iMaxThreshH_UV   [7:0] AFIT8_yuviirnr_iYNRStrengthL
-	{0x0F12, 0x1A02},    //70000A18 AFIT8_yuviirnr_iYNRStrengthH   [7:0] AFIT8_yuviirnr_iUVNRStrengthL
-	{0x0F12, 0x4A18},    //70000A1A AFIT8_yuviirnr_iUVNRStrengthH   [7:0] AFIT8_byr_gras_iShadingPower
-	{0x0F12, 0x0080},    //70000A1C AFIT8_RGBGamma2_iLinearity   [7:0] AFIT8_RGBGamma2_iDarkReduce
-	{0x0F12, 0x0350},    //70000A1E AFIT8_ccm_oscar_iSaturation   [7:0] AFIT8_RGB2YUV_iYOffset
-	{0x0F12, 0x0180},    //70000A20 AFIT8_RGB2YUV_iRGBGain   [7:0] AFIT8_bnr_nClustLevel_H
-	{0x0F12, 0x0A0A},    //70000A22 AFIT8_bnr_iClustMulT_H   [7:0] AFIT8_bnr_iClustMulT_C
-	{0x0F12, 0x0101},    //70000A24 AFIT8_bnr_iClustThresh_H   [7:0] AFIT8_bnr_iClustThresh_C
-	{0x0F12, 0x2A36},    //70000A26 AFIT8_bnr_iDenThreshLow   [7:0] AFIT8_bnr_iDenThreshHigh
-	{0x0F12, 0x6024},    //70000A28 AFIT8_ee_iLowSharpPower   [7:0] AFIT8_ee_iHighSharpPower
-	{0x0F12, 0x2A36},    //70000A2A AFIT8_ee_iLowShDenoise   [7:0] AFIT8_ee_iHighShDenoise
-	{0x0F12, 0xFFFF},    //70000A2C AFIT8_ee_iLowSharpClamp   [7:0] AFIT8_ee_iHighSharpClamp
-	{0x0F12, 0x0808},    //70000A2E AFIT8_ee_iReduceEdgeMinMult   [7:0] AFIT8_ee_iReduceEdgeSlope
-	{0x0F12, 0x0A01},    //70000A30 AFIT8_bnr_nClustLevel_H_Bin   [7:0] AFIT8_bnr_iClustMulT_H_Bin
-	{0x0F12, 0x010A},    //70000A32 AFIT8_bnr_iClustMulT_C_Bin   [7:0] AFIT8_bnr_iClustThresh_H_Bin
-	{0x0F12, 0x3601},    //70000A34 AFIT8_bnr_iClustThresh_C_Bin   [7:0] AFIT8_bnr_iDenThreshLow_Bin
-	{0x0F12, 0x242A},    //70000A36 AFIT8_bnr_iDenThreshHigh_Bin   [7:0] AFIT8_ee_iLowSharpPower_Bin
-	{0x0F12, 0x3660},    //70000A38 AFIT8_ee_iHighSharpPower_Bin   [7:0] AFIT8_ee_iLowShDenoise_Bin
-	{0x0F12, 0xFF2A},    //70000A3A AFIT8_ee_iHighShDenoise_Bin   [7:0] AFIT8_ee_iLowSharpClamp_Bin
-	{0x0F12, 0x08FF},    //70000A3C AFIT8_ee_iHighSharpClamp_Bin   [7:0] AFIT8_ee_iReduceEdgeMinMult_Bin
-	{0x0F12, 0x0008},    //70000A3E AFIT8_ee_iReduceEdgeSlope_Bin [7:0]
-	{0x0F12, 0x0001},    //70000A40 AFITB_bnr_nClustLevel_C      [0]
-	{0x0F12, 0x0000},    //70000A42 AFIT16_BRIGHTNESS
-	{0x0F12, 0x0000},    //70000A44 AFIT16_CONTRAST
-	{0x0F12, 0xFFFB},    // 0000},
-	{0x0F12, 0x0000},    //70000A48 AFIT16_SHARP_BLUR
-	{0x0F12, 0x0000},    //70000A4A AFIT16_GLAMOUR
-	{0x0F12, 0x00C0},    //70000A4C AFIT16_bnr_edge_high
-	{0x0F12, 0x0064},    //70000A4E AFIT16_postdmsc_iLowBright
-	{0x0F12, 0x0384},    //70000A50 AFIT16_postdmsc_iHighBright
-	{0x0F12, 0x0051},    //70000A52 AFIT16_postdmsc_iLowSat
-	{0x0F12, 0x01F4},    //70000A54 AFIT16_postdmsc_iHighSat
-	{0x0F12, 0x0070},    //70000A56 AFIT16_postdmsc_iTune
-	{0x0F12, 0x0040},    //70000A58 AFIT16_yuvemix_mNegRanges_0
-	{0x0F12, 0x00A0},    //70000A5A AFIT16_yuvemix_mNegRanges_1
-	{0x0F12, 0x0100},    //70000A5C AFIT16_yuvemix_mNegRanges_2
-	{0x0F12, 0x0010},    //70000A5E AFIT16_yuvemix_mPosRanges_0
-	{0x0F12, 0x0060},    //70000A60 AFIT16_yuvemix_mPosRanges_1
-	{0x0F12, 0x0100},    //70000A62 AFIT16_yuvemix_mPosRanges_2
-	{0x0F12, 0x1430},    //70000A64 AFIT8_bnr_edge_low  [7:0] AFIT8_bnr_repl_thresh
-	{0x0F12, 0x0201},    //70000A66 AFIT8_bnr_repl_force  [7:0] AFIT8_bnr_iHotThreshHigh
-	{0x0F12, 0x0204},    //70000A68 AFIT8_bnr_iHotThreshLow   [7:0] AFIT8_bnr_iColdThreshHigh
-	{0x0F12, 0x2404},    //70000A6A AFIT8_bnr_iColdThreshLow   [7:0] AFIT8_bnr_DispTH_Low
-	{0x0F12, 0x031B},    //70000A6C AFIT8_bnr_DispTH_High   [7:0] AFIT8_bnr_DISP_Limit_Low
-	{0x0F12, 0x0103},    //70000A6E AFIT8_bnr_DISP_Limit_High   [7:0] AFIT8_bnr_iDistSigmaMin
-	{0x0F12, 0x1004},    //70000A70 AFIT8_bnr_iDistSigmaMax   [7:0] AFIT8_bnr_iDiffSigmaLow
-	{0x0F12, 0x3A0C},    //70000A72 AFIT8_bnr_iDiffSigmaHigh   [7:0] AFIT8_bnr_iNormalizedSTD_TH
-	{0x0F12, 0x0070},    //70000A74 AFIT8_bnr_iNormalizedSTD_Limit   [7:0] AFIT8_bnr_iDirNRTune
-	{0x0F12, 0x1C80},    //70000A76 AFIT8_bnr_iDirMinThres   [7:0] AFIT8_bnr_iDirFltDiffThresHigh
-	{0x0F12, 0x3030},    //70000A78 AFIT8_bnr_iDirFltDiffThresLow   [7:0] AFIT8_bnr_iDirSmoothPowerHigh
-	{0x0F12, 0x0630},    //70000A7A AFIT8_bnr_iDirSmoothPowerLow   [7:0] AFIT8_bnr_iLowMaxSlopeAllowed
-	{0x0F12, 0x0306},    //70000A7C AFIT8_bnr_iHighMaxSlopeAllowed   [7:0] AFIT8_bnr_iLowSlopeThresh
-	{0x0F12, 0x2003},    //70000A7E AFIT8_bnr_iHighSlopeThresh   [7:0] AFIT8_bnr_iSlopenessTH
-	{0x0F12, 0xFF01},    //70000A80 AFIT8_bnr_iSlopeBlurStrength   [7:0] AFIT8_bnr_iSlopenessLimit
-	{0x0F12, 0x0404},    //70000A82 AFIT8_bnr_AddNoisePower1   [7:0] AFIT8_bnr_AddNoisePower2
-	{0x0F12, 0x0300},    //70000A84 AFIT8_bnr_iRadialTune   [7:0] AFIT8_bnr_iRadialPower
-	{0x0F12, 0x245A},    //70000A86 AFIT8_bnr_iRadialLimit   [7:0] AFIT8_ee_iFSMagThLow
-	{0x0F12, 0x1018},    //70000A88 AFIT8_ee_iFSMagThHigh   [7:0] AFIT8_ee_iFSVarThLow
-	{0x0F12, 0x000B},    //70000A8A AFIT8_ee_iFSVarThHigh   [7:0] AFIT8_ee_iFSThLow
-	{0x0F12, 0x0B00},    //70000A8C AFIT8_ee_iFSThHigh   [7:0] AFIT8_ee_iFSmagPower
-	{0x0F12, 0x5A0F},    //70000A8E AFIT8_ee_iFSVarCountTh   [7:0] AFIT8_ee_iRadialLimit
-	{0x0F12, 0x0505},    //70000A90 AFIT8_ee_iRadialPower   [7:0] AFIT8_ee_iSmoothEdgeSlope
-	{0x0F12, 0x1802},    //70000A92 AFIT8_ee_iROADThres   [7:0] AFIT8_ee_iROADMaxNR
-	{0x0F12, 0x0000},    //70000A94 AFIT8_ee_iROADSubMaxNR   [7:0] AFIT8_ee_iROADSubThres
-	{0x0F12, 0x2006},    //70000A96 AFIT8_ee_iROADNeiThres   [7:0] AFIT8_ee_iROADNeiMaxNR
-	{0x0F12, 0x3428},    //70000A98 AFIT8_ee_iSmoothEdgeThres   [7:0] AFIT8_ee_iMSharpen
-	{0x0F12, 0x041C},    //70000A9A AFIT8_ee_iWSharpen   [7:0] AFIT8_ee_iMShThresh
-	{0x0F12, 0x0101},    //70000A9C AFIT8_ee_iWShThresh   [7:0] AFIT8_ee_iReduceNegative
-	{0x0F12, 0x0800},    //70000A9E AFIT8_ee_iEmbossCentAdd   [7:0] AFIT8_ee_iShDespeckle
-	{0x0F12, 0x1004},    //70000AA0 AFIT8_ee_iReduceEdgeThresh   [7:0] AFIT8_dmsc_iEnhThresh
-	{0x0F12, 0x4008},    //70000AA2 AFIT8_dmsc_iDesatThresh   [7:0] AFIT8_dmsc_iDemBlurHigh
-	{0x0F12, 0x0540},    //70000AA4 AFIT8_dmsc_iDemBlurLow   [7:0] AFIT8_dmsc_iDemBlurRange
-	{0x0F12, 0x8006},    //70000AA6 AFIT8_dmsc_iDecisionThresh   [7:0] AFIT8_dmsc_iCentGrad
-	{0x0F12, 0x0020},    //70000AA8 AFIT8_dmsc_iMonochrom   [7:0] AFIT8_dmsc_iGBDenoiseVal
-	{0x0F12, 0x0000},    //70000AAA AFIT8_dmsc_iGRDenoiseVal   [7:0] AFIT8_dmsc_iEdgeDesatThrHigh
-	{0x0F12, 0x1800},    //70000AAC AFIT8_dmsc_iEdgeDesatThrLow   [7:0] AFIT8_dmsc_iEdgeDesat
-	{0x0F12, 0x0000},    //70000AAE AFIT8_dmsc_iNearGrayDesat   [7:0] AFIT8_dmsc_iEdgeDesatLimit
-	{0x0F12, 0x1E10},    //70000AB0 AFIT8_postdmsc_iBCoeff   [7:0] AFIT8_postdmsc_iGCoeff
-	{0x0F12, 0x000B},    //70000AB2 AFIT8_postdmsc_iWideMult   [7:0] AFIT8_yuvemix_mNegSlopes_0
-	{0x0F12, 0x0607},    //70000AB4 AFIT8_yuvemix_mNegSlopes_1   [7:0] AFIT8_yuvemix_mNegSlopes_2
-	{0x0F12, 0x0005},    //70000AB6 AFIT8_yuvemix_mNegSlopes_3   [7:0] AFIT8_yuvemix_mPosSlopes_0
-	{0x0F12, 0x0607},    //70000AB8 AFIT8_yuvemix_mPosSlopes_1   [7:0] AFIT8_yuvemix_mPosSlopes_2
-	{0x0F12, 0x0405},    //70000ABA AFIT8_yuvemix_mPosSlopes_3   [7:0] AFIT8_yuviirnr_iXSupportY
-	{0x0F12, 0x0205},    //70000ABC AFIT8_yuviirnr_iXSupportUV   [7:0] AFIT8_yuviirnr_iLowYNorm
-	{0x0F12, 0x0304},    //70000ABE AFIT8_yuviirnr_iHighYNorm   [7:0] AFIT8_yuviirnr_iLowUVNorm
-	{0x0F12, 0x0409},    //70000AC0 AFIT8_yuviirnr_iHighUVNorm   [7:0] AFIT8_yuviirnr_iYNormShift
-	{0x0F12, 0x0306},    //70000AC2 AFIT8_yuviirnr_iUVNormShift   [7:0] AFIT8_yuviirnr_iVertLength_Y
-	{0x0F12, 0x0407},    //70000AC4 AFIT8_yuviirnr_iVertLength_UV   [7:0] AFIT8_yuviirnr_iDiffThreshL_Y
-	{0x0F12, 0x1F04},    //70000AC6 AFIT8_yuviirnr_iDiffThreshH_Y   [7:0] AFIT8_yuviirnr_iDiffThreshL_UV
-	{0x0F12, 0x0218},    //70000AC8 AFIT8_yuviirnr_iDiffThreshH_UV   [7:0] AFIT8_yuviirnr_iMaxThreshL_Y
-	{0x0F12, 0x1102},    //70000ACA AFIT8_yuviirnr_iMaxThreshH_Y   [7:0] AFIT8_yuviirnr_iMaxThreshL_UV
-	{0x0F12, 0x0611},    //70000ACC AFIT8_yuviirnr_iMaxThreshH_UV   [7:0] AFIT8_yuviirnr_iYNRStrengthL
-	{0x0F12, 0x1A02},    //70000ACE AFIT8_yuviirnr_iYNRStrengthH   [7:0] AFIT8_yuviirnr_iUVNRStrengthL
-	{0x0F12, 0x8018},    //70000AD0 AFIT8_yuviirnr_iUVNRStrengthH   [7:0] AFIT8_byr_gras_iShadingPower
-	{0x0F12, 0x0080},    //70000AD2 AFIT8_RGBGamma2_iLinearity   [7:0] AFIT8_RGBGamma2_iDarkReduce
-	{0x0F12, 0x0380},    //70000AD4 AFIT8_ccm_oscar_iSaturation   [7:0] AFIT8_RGB2YUV_iYOffset
-	{0x0F12, 0x0180},    //70000AD6 AFIT8_RGB2YUV_iRGBGain   [7:0] AFIT8_bnr_nClustLevel_H
-	{0x0F12, 0x0A0A},    //70000AD8 AFIT8_bnr_iClustMulT_H   [7:0] AFIT8_bnr_iClustMulT_C
-	{0x0F12, 0x0101},    //70000ADA AFIT8_bnr_iClustThresh_H   [7:0] AFIT8_bnr_iClustThresh_C
-	{0x0F12, 0x1B24},    //70000ADC AFIT8_bnr_iDenThreshLow   [7:0] AFIT8_bnr_iDenThreshHigh
-	{0x0F12, 0x6024},    //70000ADE AFIT8_ee_iLowSharpPower   [7:0] AFIT8_ee_iHighSharpPower
-	{0x0F12, 0x1D22},    //70000AE0 AFIT8_ee_iLowShDenoise   [7:0] AFIT8_ee_iHighShDenoise
-	{0x0F12, 0xFFFF},    //70000AE2 AFIT8_ee_iLowSharpClamp   [7:0] AFIT8_ee_iHighSharpClamp
-	{0x0F12, 0x0808},    //70000AE4 AFIT8_ee_iReduceEdgeMinMult   [7:0] AFIT8_ee_iReduceEdgeSlope
-	{0x0F12, 0x0A01},    //70000AE6 AFIT8_bnr_nClustLevel_H_Bin   [7:0] AFIT8_bnr_iClustMulT_H_Bin
-	{0x0F12, 0x010A},    //70000AE8 AFIT8_bnr_iClustMulT_C_Bin   [7:0] AFIT8_bnr_iClustThresh_H_Bin
-	{0x0F12, 0x2401},    //70000AEA AFIT8_bnr_iClustThresh_C_Bin   [7:0] AFIT8_bnr_iDenThreshLow_Bin
-	{0x0F12, 0x241B},    //70000AEC AFIT8_bnr_iDenThreshHigh_Bin   [7:0] AFIT8_ee_iLowSharpPower_Bin
-	{0x0F12, 0x1E60},    //70000AEE AFIT8_ee_iHighSharpPower_Bin   [7:0] AFIT8_ee_iLowShDenoise_Bin
-	{0x0F12, 0xFF18},    //70000AF0 AFIT8_ee_iHighShDenoise_Bin   [7:0] AFIT8_ee_iLowSharpClamp_Bin
-	{0x0F12, 0x08FF},    //70000AF2 AFIT8_ee_iHighSharpClamp_Bin   [7:0] AFIT8_ee_iReduceEdgeMinMult_Bin
-	{0x0F12, 0x0008},    //70000AF4 AFIT8_ee_iReduceEdgeSlope_Bin [7:0]
-	{0x0F12, 0x0001},    //70000AF6 AFITB_bnr_nClustLevel_C      [0]
-	{0x0F12, 0x0000},    //70000AF8 AFIT16_BRIGHTNESS
-	{0x0F12, 0x0000},    //70000AFA AFIT16_CONTRAST
-	{0x0F12, 0xFFFB},    //70000AFC AFIT16_SATURATION
-	{0x0F12, 0x0000},    //70000AFE AFIT16_SHARP_BLUR
-	{0x0F12, 0x0000},    //70000B00 AFIT16_GLAMOUR
-	{0x0F12, 0x00C0},    //70000B02 AFIT16_bnr_edge_high
-	{0x0F12, 0x0064},    //70000B04 AFIT16_postdmsc_iLowBright
-	{0x0F12, 0x0384},    //70000B06 AFIT16_postdmsc_iHighBright
-	{0x0F12, 0x0043},    //70000B08 AFIT16_postdmsc_iLowSat
-	{0x0F12, 0x01F4},    //70000B0A AFIT16_postdmsc_iHighSat
-	{0x0F12, 0x0070},    //70000B0C AFIT16_postdmsc_iTune
-	{0x0F12, 0x0040},    //70000B0E AFIT16_yuvemix_mNegRanges_0
-	{0x0F12, 0x00A0},    //70000B10 AFIT16_yuvemix_mNegRanges_1
-	{0x0F12, 0x0100},    //70000B12 AFIT16_yuvemix_mNegRanges_2
-	{0x0F12, 0x0010},    //70000B14 AFIT16_yuvemix_mPosRanges_0
-	{0x0F12, 0x0060},    //70000B16 AFIT16_yuvemix_mPosRanges_1
-	{0x0F12, 0x0100},    //70000B18 AFIT16_yuvemix_mPosRanges_2
-	{0x0F12, 0x1430},    //70000B1A AFIT8_bnr_edge_low  [7:0] AFIT8_bnr_repl_thresh
-	{0x0F12, 0x0201},    //70000B1C AFIT8_bnr_repl_force  [7:0] AFIT8_bnr_iHotThreshHigh
-	{0x0F12, 0x0204},    //70000B1E AFIT8_bnr_iHotThreshLow   [7:0] AFIT8_bnr_iColdThreshHigh
-	{0x0F12, 0x1B04},    //70000B20 AFIT8_bnr_iColdThreshLow   [7:0] AFIT8_bnr_DispTH_Low
-	{0x0F12, 0x0312},    //70000B22 AFIT8_bnr_DispTH_High   [7:0] AFIT8_bnr_DISP_Limit_Low
-	{0x0F12, 0x0003},    //70000B24 AFIT8_bnr_DISP_Limit_High   [7:0] AFIT8_bnr_iDistSigmaMin
-	{0x0F12, 0x0C03},    //70000B26 AFIT8_bnr_iDistSigmaMax   [7:0] AFIT8_bnr_iDiffSigmaLow
-	{0x0F12, 0x2806},    //70000B28 AFIT8_bnr_iDiffSigmaHigh   [7:0] AFIT8_bnr_iNormalizedSTD_TH
-	{0x0F12, 0x0060},    //70000B2A AFIT8_bnr_iNormalizedSTD_Limit   [7:0] AFIT8_bnr_iDirNRTune
-	{0x0F12, 0x1580},    //70000B2C AFIT8_bnr_iDirMinThres   [7:0] AFIT8_bnr_iDirFltDiffThresHigh
-	{0x0F12, 0x2020},    //70000B2E AFIT8_bnr_iDirFltDiffThresLow   [7:0] AFIT8_bnr_iDirSmoothPowerHigh
-	{0x0F12, 0x0620},    //70000B30 AFIT8_bnr_iDirSmoothPowerLow   [7:0] AFIT8_bnr_iLowMaxSlopeAllowed
-	{0x0F12, 0x0306},    //70000B32 AFIT8_bnr_iHighMaxSlopeAllowed   [7:0] AFIT8_bnr_iLowSlopeThresh
-	{0x0F12, 0x2003},    //70000B34 AFIT8_bnr_iHighSlopeThresh   [7:0] AFIT8_bnr_iSlopenessTH
-	{0x0F12, 0xFF01},    //70000B36 AFIT8_bnr_iSlopeBlurStrength   [7:0] AFIT8_bnr_iSlopenessLimit
-	{0x0F12, 0x0404},    //70000B38 AFIT8_bnr_AddNoisePower1   [7:0] AFIT8_bnr_AddNoisePower2
-	{0x0F12, 0x0300},    //70000B3A AFIT8_bnr_iRadialTune   [7:0] AFIT8_bnr_iRadialPower
-	{0x0F12, 0x145A},    //70000B3C AFIT8_bnr_iRadialLimit   [7:0] AFIT8_ee_iFSMagThLow
-	{0x0F12, 0x1010},    //70000B3E AFIT8_ee_iFSMagThHigh   [7:0] AFIT8_ee_iFSVarThLow
-	{0x0F12, 0x000B},    //70000B40 AFIT8_ee_iFSVarThHigh   [7:0] AFIT8_ee_iFSThLow
-	{0x0F12, 0x0E00},    //70000B42 AFIT8_ee_iFSThHigh   [7:0] AFIT8_ee_iFSmagPower
-	{0x0F12, 0x5A0F},    //70000B44 AFIT8_ee_iFSVarCountTh   [7:0] AFIT8_ee_iRadialLimit
-	{0x0F12, 0x0504},    //70000B46 AFIT8_ee_iRadialPower   [7:0] AFIT8_ee_iSmoothEdgeSlope
-	{0x0F12, 0x1802},    //70000B48 AFIT8_ee_iROADThres   [7:0] AFIT8_ee_iROADMaxNR
-	{0x0F12, 0x0000},    //70000B4A AFIT8_ee_iROADSubMaxNR   [7:0] AFIT8_ee_iROADSubThres
-	{0x0F12, 0x2006},    //70000B4C AFIT8_ee_iROADNeiThres   [7:0] AFIT8_ee_iROADNeiMaxNR
-	{0x0F12, 0x3828},    //70000B4E AFIT8_ee_iSmoothEdgeThres   [7:0] AFIT8_ee_iMSharpen
-	{0x0F12, 0x0428},    //70000B50 AFIT8_ee_iWSharpen   [7:0] AFIT8_ee_iMShThresh
-	{0x0F12, 0x0101},    //70000B52 AFIT8_ee_iWShThresh   [7:0] AFIT8_ee_iReduceNegative
-	{0x0F12, 0x8000},    //70000B54 AFIT8_ee_iEmbossCentAdd   [7:0] AFIT8_ee_iShDespeckle
-	{0x0F12, 0x0A04},    //70000B56 AFIT8_ee_iReduceEdgeThresh   [7:0] AFIT8_dmsc_iEnhThresh
-	{0x0F12, 0x4008},    //70000B58 AFIT8_dmsc_iDesatThresh   [7:0] AFIT8_dmsc_iDemBlurHigh
-	{0x0F12, 0x0540},    //70000B5A AFIT8_dmsc_iDemBlurLow   [7:0] AFIT8_dmsc_iDemBlurRange
-	{0x0F12, 0x8006},    //70000B5C AFIT8_dmsc_iDecisionThresh   [7:0] AFIT8_dmsc_iCentGrad
-	{0x0F12, 0x0020},    //70000B5E AFIT8_dmsc_iMonochrom   [7:0] AFIT8_dmsc_iGBDenoiseVal
-	{0x0F12, 0x0000},    //70000B60 AFIT8_dmsc_iGRDenoiseVal   [7:0] AFIT8_dmsc_iEdgeDesatThrHigh
-	{0x0F12, 0x1800},    //70000B62 AFIT8_dmsc_iEdgeDesatThrLow   [7:0] AFIT8_dmsc_iEdgeDesat
-	{0x0F12, 0x0000},    //70000B64 AFIT8_dmsc_iNearGrayDesat   [7:0] AFIT8_dmsc_iEdgeDesatLimit
-	{0x0F12, 0x1E10},    //70000B66 AFIT8_postdmsc_iBCoeff   [7:0] AFIT8_postdmsc_iGCoeff
-	{0x0F12, 0x000B},    //70000B68 AFIT8_postdmsc_iWideMult   [7:0] AFIT8_yuvemix_mNegSlopes_0
-	{0x0F12, 0x0607},    //70000B6A AFIT8_yuvemix_mNegSlopes_1   [7:0] AFIT8_yuvemix_mNegSlopes_2
-	{0x0F12, 0x0005},    //70000B6C AFIT8_yuvemix_mNegSlopes_3   [7:0] AFIT8_yuvemix_mPosSlopes_0
-	{0x0F12, 0x0607},    //70000B6E AFIT8_yuvemix_mPosSlopes_1   [7:0] AFIT8_yuvemix_mPosSlopes_2
-	{0x0F12, 0x0405},    //70000B70 AFIT8_yuvemix_mPosSlopes_3   [7:0] AFIT8_yuviirnr_iXSupportY
-	{0x0F12, 0x0207},    //70000B72 AFIT8_yuviirnr_iXSupportUV   [7:0] AFIT8_yuviirnr_iLowYNorm
-	{0x0F12, 0x0304},    //70000B74 AFIT8_yuviirnr_iHighYNorm   [7:0] AFIT8_yuviirnr_iLowUVNorm
-	{0x0F12, 0x0409},    //70000B76 AFIT8_yuviirnr_iHighUVNorm   [7:0] AFIT8_yuviirnr_iYNormShift
-	{0x0F12, 0x0306},    //70000B78 AFIT8_yuviirnr_iUVNormShift   [7:0] AFIT8_yuviirnr_iVertLength_Y
-	{0x0F12, 0x0407},    //70000B7A AFIT8_yuviirnr_iVertLength_UV   [7:0] AFIT8_yuviirnr_iDiffThreshL_Y
-	{0x0F12, 0x2404},    //70000B7C AFIT8_yuviirnr_iDiffThreshH_Y   [7:0] AFIT8_yuviirnr_iDiffThreshL_UV
-	{0x0F12, 0x0221},    //70000B7E AFIT8_yuviirnr_iDiffThreshH_UV   [7:0] AFIT8_yuviirnr_iMaxThreshL_Y
-	{0x0F12, 0x1202},    //70000B80 AFIT8_yuviirnr_iMaxThreshH_Y   [7:0] AFIT8_yuviirnr_iMaxThreshL_UV
-	{0x0F12, 0x0613},    //70000B82 AFIT8_yuviirnr_iMaxThreshH_UV   [7:0] AFIT8_yuviirnr_iYNRStrengthL
-	{0x0F12, 0x1A02},    //70000B84 AFIT8_yuviirnr_iYNRStrengthH   [7:0] AFIT8_yuviirnr_iUVNRStrengthL
-	{0x0F12, 0x8018},    //70000B86 AFIT8_yuviirnr_iUVNRStrengthH   [7:0] AFIT8_byr_gras_iShadingPower
-	{0x0F12, 0x0080},    //70000B88 AFIT8_RGBGamma2_iLinearity   [7:0] AFIT8_RGBGamma2_iDarkReduce
-	{0x0F12, 0x0080},    //70000B8A AFIT8_ccm_oscar_iSaturation   [7:0] AFIT8_RGB2YUV_iYOffset
-	{0x0F12, 0x0180},    //70000B8C AFIT8_RGB2YUV_iRGBGain   [7:0] AFIT8_bnr_nClustLevel_H
-	{0x0F12, 0x0A0A},    //70000B8E AFIT8_bnr_iClustMulT_H   [7:0] AFIT8_bnr_iClustMulT_C
-	{0x0F12, 0x0101},    //70000B90 AFIT8_bnr_iClustThresh_H   [7:0] AFIT8_bnr_iClustThresh_C
-	{0x0F12, 0x141D},    //70000B92 AFIT8_bnr_iDenThreshLow   [7:0] AFIT8_bnr_iDenThreshHigh
-	{0x0F12, 0x6024},    //70000B94 AFIT8_ee_iLowSharpPower   [7:0] AFIT8_ee_iHighSharpPower
-	{0x0F12, 0x0C0C},    //70000B96 AFIT8_ee_iLowShDenoise   [7:0] AFIT8_ee_iHighShDenoise
-	{0x0F12, 0xFFFF},    //70000B98 AFIT8_ee_iLowSharpClamp   [7:0] AFIT8_ee_iHighSharpClamp
-	{0x0F12, 0x0808},    //70000B9A AFIT8_ee_iReduceEdgeMinMult   [7:0] AFIT8_ee_iReduceEdgeSlope
-	{0x0F12, 0x0A01},    //70000B9C AFIT8_bnr_nClustLevel_H_Bin   [7:0] AFIT8_bnr_iClustMulT_H_Bin
-	{0x0F12, 0x010A},    //70000B9E AFIT8_bnr_iClustMulT_C_Bin   [7:0] AFIT8_bnr_iClustThresh_H_Bin
-	{0x0F12, 0x1B01},    //70000BA0 AFIT8_bnr_iClustThresh_C_Bin   [7:0] AFIT8_bnr_iDenThreshLow_Bin
-	{0x0F12, 0x2412},    //70000BA2 AFIT8_bnr_iDenThreshHigh_Bin   [7:0] AFIT8_ee_iLowSharpPower_Bin
-	{0x0F12, 0x0C60},    //70000BA4 AFIT8_ee_iHighSharpPower_Bin   [7:0] AFIT8_ee_iLowShDenoise_Bin
-	{0x0F12, 0xFF0C},    //70000BA6 AFIT8_ee_iHighShDenoise_Bin   [7:0] AFIT8_ee_iLowSharpClamp_Bin
-	{0x0F12, 0x08FF},    //70000BA8 AFIT8_ee_iHighSharpClamp_Bin   [7:0] AFIT8_ee_iReduceEdgeMinMult_Bin
-	{0x0F12, 0x0008},    //70000BAA AFIT8_ee_iReduceEdgeSlope_Bin [7:0]
-	{0x0F12, 0x0001},    //70000BAC AFITB_bnr_nClustLevel_C      [0]
-	{0x0F12, 0x0000},    //70000BAE AFIT16_BRIGHTNESS
-	{0x0F12, 0x0000},    //70000BB0 AFIT16_CONTRAST
-	{0x0F12, 0x0000},    //70000BB2 AFIT16_SATURATION
-	{0x0F12, 0x0000},    //70000BB4 AFIT16_SHARP_BLUR
-	{0x0F12, 0x0000},    //70000BB6 AFIT16_GLAMOUR
-	{0x0F12, 0x00C0},    //70000BB8 AFIT16_bnr_edge_high
-	{0x0F12, 0x0064},    //70000BBA AFIT16_postdmsc_iLowBright
-	{0x0F12, 0x0384},    //70000BBC AFIT16_postdmsc_iHighBright
-	{0x0F12, 0x0032},    //70000BBE AFIT16_postdmsc_iLowSat
-	{0x0F12, 0x01F4},    //70000BC0 AFIT16_postdmsc_iHighSat
-	{0x0F12, 0x0070},    //70000BC2 AFIT16_postdmsc_iTune
-	{0x0F12, 0x0040},    //70000BC4 AFIT16_yuvemix_mNegRanges_0
-	{0x0F12, 0x00A0},    //70000BC6 AFIT16_yuvemix_mNegRanges_1
-	{0x0F12, 0x0100},    //70000BC8 AFIT16_yuvemix_mNegRanges_2
-	{0x0F12, 0x0010},    //70000BCA AFIT16_yuvemix_mPosRanges_0
-	{0x0F12, 0x0060},    //70000BCC AFIT16_yuvemix_mPosRanges_1
-	{0x0F12, 0x0100},    //70000BCE AFIT16_yuvemix_mPosRanges_2
-	{0x0F12, 0x1430},    //70000BD0 AFIT8_bnr_edge_low  [7:0] AFIT8_bnr_repl_thresh
-	{0x0F12, 0x0201},    //70000BD2 AFIT8_bnr_repl_force  [7:0] AFIT8_bnr_iHotThreshHigh
-	{0x0F12, 0x0204},    //70000BD4 AFIT8_bnr_iHotThreshLow   [7:0] AFIT8_bnr_iColdThreshHigh
-	{0x0F12, 0x1504},    //70000BD6 AFIT8_bnr_iColdThreshLow   [7:0] AFIT8_bnr_DispTH_Low
-	{0x0F12, 0x030F},    //70000BD8 AFIT8_bnr_DispTH_High   [7:0] AFIT8_bnr_DISP_Limit_Low
-	{0x0F12, 0x0003},    //70000BDA AFIT8_bnr_DISP_Limit_High   [7:0] AFIT8_bnr_iDistSigmaMin
-	{0x0F12, 0x0902},    //70000BDC AFIT8_bnr_iDistSigmaMax   [7:0] AFIT8_bnr_iDiffSigmaLow
-	{0x0F12, 0x2004},    //70000BDE AFIT8_bnr_iDiffSigmaHigh   [7:0] AFIT8_bnr_iNormalizedSTD_TH
-	{0x0F12, 0x0050},    //70000BE0 AFIT8_bnr_iNormalizedSTD_Limit   [7:0] AFIT8_bnr_iDirNRTune
-	{0x0F12, 0x1140},    //70000BE2 AFIT8_bnr_iDirMinThres   [7:0] AFIT8_bnr_iDirFltDiffThresHigh
-	{0x0F12, 0x201C},    //70000BE4 AFIT8_bnr_iDirFltDiffThresLow   [7:0] AFIT8_bnr_iDirSmoothPowerHigh
-	{0x0F12, 0x0620},    //70000BE6 AFIT8_bnr_iDirSmoothPowerLow   [7:0] AFIT8_bnr_iLowMaxSlopeAllowed
-	{0x0F12, 0x0306},    //70000BE8 AFIT8_bnr_iHighMaxSlopeAllowed   [7:0] AFIT8_bnr_iLowSlopeThresh
-	{0x0F12, 0x2003},    //70000BEA AFIT8_bnr_iHighSlopeThresh   [7:0] AFIT8_bnr_iSlopenessTH
-	{0x0F12, 0xFF01},    //70000BEC AFIT8_bnr_iSlopeBlurStrength   [7:0] AFIT8_bnr_iSlopenessLimit
-	{0x0F12, 0x0404},    //70000BEE AFIT8_bnr_AddNoisePower1   [7:0] AFIT8_bnr_AddNoisePower2
-	{0x0F12, 0x0300},    //70000BF0 AFIT8_bnr_iRadialTune   [7:0] AFIT8_bnr_iRadialPower
-	{0x0F12, 0x145A},    //70000BF2 AFIT8_bnr_iRadialLimit   [7:0] AFIT8_ee_iFSMagThLow
-	{0x0F12, 0x1010},    //70000BF4 AFIT8_ee_iFSMagThHigh   [7:0] AFIT8_ee_iFSVarThLow
-	{0x0F12, 0x000B},    //70000BF6 AFIT8_ee_iFSVarThHigh   [7:0] AFIT8_ee_iFSThLow
-	{0x0F12, 0x1000},    //70000BF8 AFIT8_ee_iFSThHigh   [7:0] AFIT8_ee_iFSmagPower
-	{0x0F12, 0x5A0F},    //70000BFA AFIT8_ee_iFSVarCountTh   [7:0] AFIT8_ee_iRadialLimit
-	{0x0F12, 0x0503},    //70000BFC AFIT8_ee_iRadialPower   [7:0] AFIT8_ee_iSmoothEdgeSlope
-	{0x0F12, 0x1802},    //70000BFE AFIT8_ee_iROADThres   [7:0] AFIT8_ee_iROADMaxNR
-	{0x0F12, 0x0000},    //70000C00 AFIT8_ee_iROADSubMaxNR   [7:0] AFIT8_ee_iROADSubThres
-	{0x0F12, 0x2006},    //70000C02 AFIT8_ee_iROADNeiThres   [7:0] AFIT8_ee_iROADNeiMaxNR
-	{0x0F12, 0x3C28},    //70000C04 AFIT8_ee_iSmoothEdgeThres   [7:0] AFIT8_ee_iMSharpen
-	{0x0F12, 0x042C},    //70000C06 AFIT8_ee_iWSharpen   [7:0] AFIT8_ee_iMShThresh
-	{0x0F12, 0x0101},    //70000C08 AFIT8_ee_iWShThresh   [7:0] AFIT8_ee_iReduceNegative
-	{0x0F12, 0xFF00},    //70000C0A AFIT8_ee_iEmbossCentAdd   [7:0] AFIT8_ee_iShDespeckle
-	{0x0F12, 0x0904},    //70000C0C AFIT8_ee_iReduceEdgeThresh   [7:0] AFIT8_dmsc_iEnhThresh
-	{0x0F12, 0x4008},    //70000C0E AFIT8_dmsc_iDesatThresh   [7:0] AFIT8_dmsc_iDemBlurHigh
-	{0x0F12, 0x0540},    //70000C10 AFIT8_dmsc_iDemBlurLow   [7:0] AFIT8_dmsc_iDemBlurRange
-	{0x0F12, 0x8006},    //70000C12 AFIT8_dmsc_iDecisionThresh   [7:0] AFIT8_dmsc_iCentGrad
-	{0x0F12, 0x0020},    //70000C14 AFIT8_dmsc_iMonochrom   [7:0] AFIT8_dmsc_iGBDenoiseVal
-	{0x0F12, 0x0000},    //70000C16 AFIT8_dmsc_iGRDenoiseVal   [7:0] AFIT8_dmsc_iEdgeDesatThrHigh
-	{0x0F12, 0x1800},    //70000C18 AFIT8_dmsc_iEdgeDesatThrLow   [7:0] AFIT8_dmsc_iEdgeDesat
-	{0x0F12, 0x0000},    //70000C1A AFIT8_dmsc_iNearGrayDesat   [7:0] AFIT8_dmsc_iEdgeDesatLimit
-	{0x0F12, 0x1E10},    //70000C1C AFIT8_postdmsc_iBCoeff   [7:0] AFIT8_postdmsc_iGCoeff
-	{0x0F12, 0x000B},    //70000C1E AFIT8_postdmsc_iWideMult   [7:0] AFIT8_yuvemix_mNegSlopes_0
-	{0x0F12, 0x0607},    //70000C20 AFIT8_yuvemix_mNegSlopes_1   [7:0] AFIT8_yuvemix_mNegSlopes_2
-	{0x0F12, 0x0005},    //70000C22 AFIT8_yuvemix_mNegSlopes_3   [7:0] AFIT8_yuvemix_mPosSlopes_0
-	{0x0F12, 0x0607},    //70000C24 AFIT8_yuvemix_mPosSlopes_1   [7:0] AFIT8_yuvemix_mPosSlopes_2
-	{0x0F12, 0x0405},    //70000C26 AFIT8_yuvemix_mPosSlopes_3   [7:0] AFIT8_yuviirnr_iXSupportY
-	{0x0F12, 0x0206},    //70000C28 AFIT8_yuviirnr_iXSupportUV   [7:0] AFIT8_yuviirnr_iLowYNorm
-	{0x0F12, 0x0304},    //70000C2A AFIT8_yuviirnr_iHighYNorm   [7:0] AFIT8_yuviirnr_iLowUVNorm
-	{0x0F12, 0x0409},    //70000C2C AFIT8_yuviirnr_iHighUVNorm   [7:0] AFIT8_yuviirnr_iYNormShift
-	{0x0F12, 0x0305},    //70000C2E AFIT8_yuviirnr_iUVNormShift   [7:0] AFIT8_yuviirnr_iVertLength_Y
-	{0x0F12, 0x0406},    //70000C30 AFIT8_yuviirnr_iVertLength_UV   [7:0] AFIT8_yuviirnr_iDiffThreshL_Y
-	{0x0F12, 0x2804},    //70000C32 AFIT8_yuviirnr_iDiffThreshH_Y   [7:0] AFIT8_yuviirnr_iDiffThreshL_UV
-	{0x0F12, 0x0228},    //70000C34 AFIT8_yuviirnr_iDiffThreshH_UV   [7:0] AFIT8_yuviirnr_iMaxThreshL_Y
-	{0x0F12, 0x1402},    //70000C36 AFIT8_yuviirnr_iMaxThreshH_Y   [7:0] AFIT8_yuviirnr_iMaxThreshL_UV
-	{0x0F12, 0x0618},    //70000C38 AFIT8_yuviirnr_iMaxThreshH_UV   [7:0] AFIT8_yuviirnr_iYNRStrengthL
-	{0x0F12, 0x1A02},    //70000C3A AFIT8_yuviirnr_iYNRStrengthH   [7:0] AFIT8_yuviirnr_iUVNRStrengthL
-	{0x0F12, 0x8018},    //70000C3C AFIT8_yuviirnr_iUVNRStrengthH   [7:0] AFIT8_byr_gras_iShadingPower
-	{0x0F12, 0x0080},    //70000C3E AFIT8_RGBGamma2_iLinearity   [7:0] AFIT8_RGBGamma2_iDarkReduce
-	{0x0F12, 0x0080},    //70000C40 AFIT8_ccm_oscar_iSaturation   [7:0] AFIT8_RGB2YUV_iYOffset
-	{0x0F12, 0x0180},    //70000C42 AFIT8_RGB2YUV_iRGBGain   [7:0] AFIT8_bnr_nClustLevel_H
-	{0x0F12, 0x0A0A},    //70000C44 AFIT8_bnr_iClustMulT_H   [7:0] AFIT8_bnr_iClustMulT_C
-	{0x0F12, 0x0101},    //70000C46 AFIT8_bnr_iClustThresh_H   [7:0] AFIT8_bnr_iClustThresh_C
-	{0x0F12, 0x1117},    //70000C48 AFIT8_bnr_iDenThreshLow   [7:0] AFIT8_bnr_iDenThreshHigh
-	{0x0F12, 0x6024},    //70000C4A AFIT8_ee_iLowSharpPower   [7:0] AFIT8_ee_iHighSharpPower
-	{0x0F12, 0x0A0A},    //70000C4C AFIT8_ee_iLowShDenoise   [7:0] AFIT8_ee_iHighShDenoise
-	{0x0F12, 0xFFFF},    //70000C4E AFIT8_ee_iLowSharpClamp   [7:0] AFIT8_ee_iHighSharpClamp
-	{0x0F12, 0x0808},    //70000C50 AFIT8_ee_iReduceEdgeMinMult   [7:0] AFIT8_ee_iReduceEdgeSlope
-	{0x0F12, 0x0A01},    //70000C52 AFIT8_bnr_nClustLevel_H_Bin   [7:0] AFIT8_bnr_iClustMulT_H_Bin
-	{0x0F12, 0x010A},    //70000C54 AFIT8_bnr_iClustMulT_C_Bin   [7:0] AFIT8_bnr_iClustThresh_H_Bin
-	{0x0F12, 0x1501},    //70000C56 AFIT8_bnr_iClustThresh_C_Bin   [7:0] AFIT8_bnr_iDenThreshLow_Bin
-	{0x0F12, 0x240F},    //70000C58 AFIT8_bnr_iDenThreshHigh_Bin   [7:0] AFIT8_ee_iLowSharpPower_Bin
-	{0x0F12, 0x0A60},    //70000C5A AFIT8_ee_iHighSharpPower_Bin   [7:0] AFIT8_ee_iLowShDenoise_Bin
-	{0x0F12, 0xFF0A},    //70000C5C AFIT8_ee_iHighShDenoise_Bin   [7:0] AFIT8_ee_iLowSharpClamp_Bin
-	{0x0F12, 0x08FF},    //70000C5E AFIT8_ee_iHighSharpClamp_Bin   [7:0] AFIT8_ee_iReduceEdgeMinMult_Bin
-	{0x0F12, 0x0008},    //70000C60 AFIT8_ee_iReduceEdgeSlope_Bin [7:0]
-	{0x0F12, 0x0001},    //70000C62 AFITB_bnr_nClustLevel_C      [0]
-	{0x0F12, 0x0000},    //70000C64 AFIT16_BRIGHTNESS  	//AFIT 4
-	{0x0F12, 0x0000},    //70000C66 AFIT16_CONTRAST
-	{0x0F12, 0x0000},    //70000C68 AFIT16_SATURATION
-	{0x0F12, 0x0000},    //70000C6A AFIT16_SHARP_BLUR
-	{0x0F12, 0x0000},    //70000C6C AFIT16_GLAMOUR
-	{0x0F12, 0x00C0},    //70000C6E AFIT16_bnr_edge_high
-	{0x0F12, 0x0064},    //70000C70 AFIT16_postdmsc_iLowBright
-	{0x0F12, 0x0384},    //70000C72 AFIT16_postdmsc_iHighBright
-	{0x0F12, 0x0032},    //70000C74 AFIT16_postdmsc_iLowSat
-	{0x0F12, 0x01F4},    //70000C76 AFIT16_postdmsc_iHighSat
-	{0x0F12, 0x0070},    //70000C78 AFIT16_postdmsc_iTune
-	{0x0F12, 0x0040},    //70000C7A AFIT16_yuvemix_mNegRanges_0
-	{0x0F12, 0x00A0},    //70000C7C AFIT16_yuvemix_mNegRanges_1
-	{0x0F12, 0x0100},    //70000C7E AFIT16_yuvemix_mNegRanges_2
-	{0x0F12, 0x0010},    //70000C80 AFIT16_yuvemix_mPosRanges_0
-	{0x0F12, 0x0060},    //70000C82 AFIT16_yuvemix_mPosRanges_1
-	{0x0F12, 0x0100},    //70000C84 AFIT16_yuvemix_mPosRanges_2
-	{0x0F12, 0x1430},    //70000C86 AFIT8_bnr_edge_low  [7:0] AFIT8_bnr_repl_thresh
-	{0x0F12, 0x0201},    //70000C88 AFIT8_bnr_repl_force  [7:0] AFIT8_bnr_iHotThreshHigh
-	{0x0F12, 0x0204},    //70000C8A AFIT8_bnr_iHotThreshLow   [7:0] AFIT8_bnr_iColdThreshHigh
-	{0x0F12, 0x0F04},    //70000C8C AFIT8_bnr_iColdThreshLow   [7:0] AFIT8_bnr_DispTH_Low
-	{0x0F12, 0x030C},    //70000C8E AFIT8_bnr_DispTH_High   [7:0] AFIT8_bnr_DISP_Limit_Low
-	{0x0F12, 0x0003},    //70000C90 AFIT8_bnr_DISP_Limit_High   [7:0] AFIT8_bnr_iDistSigmaMin
-	{0x0F12, 0x0602},    //70000C92 AFIT8_bnr_iDistSigmaMax   [7:0] AFIT8_bnr_iDiffSigmaLow
-	{0x0F12, 0x1803},    //70000C94 AFIT8_bnr_iDiffSigmaHigh   [7:0] AFIT8_bnr_iNormalizedSTD_TH
-	{0x0F12, 0x0040},    //70000C96 AFIT8_bnr_iNormalizedSTD_Limit   [7:0] AFIT8_bnr_iDirNRTune
-	{0x0F12, 0x0E20},    //70000C98 AFIT8_bnr_iDirMinThres   [7:0] AFIT8_bnr_iDirFltDiffThresHigh
-	{0x0F12, 0x2018},    //70000C9A AFIT8_bnr_iDirFltDiffThresLow   [7:0] AFIT8_bnr_iDirSmoothPowerHigh
-	{0x0F12, 0x0620},    //70000C9C AFIT8_bnr_iDirSmoothPowerLow   [7:0] AFIT8_bnr_iLowMaxSlopeAllowed
-	{0x0F12, 0x0306},    //70000C9E AFIT8_bnr_iHighMaxSlopeAllowed   [7:0] AFIT8_bnr_iLowSlopeThresh
-	{0x0F12, 0x2003},    //70000CA0 AFIT8_bnr_iHighSlopeThresh   [7:0] AFIT8_bnr_iSlopenessTH
-	{0x0F12, 0xFF01},    //70000CA2 AFIT8_bnr_iSlopeBlurStrength   [7:0] AFIT8_bnr_iSlopenessLimit
-	{0x0F12, 0x0404},    //70000CA4 AFIT8_bnr_AddNoisePower1   [7:0] AFIT8_bnr_AddNoisePower2
-	{0x0F12, 0x0200},    //70000CA6 AFIT8_bnr_iRadialTune   [7:0] AFIT8_bnr_iRadialPower
-	{0x0F12, 0x145A},    //70000CA8 AFIT8_bnr_iRadialLimit   [7:0] AFIT8_ee_iFSMagThLow
-	{0x0F12, 0x1010},    //70000CAA AFIT8_ee_iFSMagThHigh   [7:0] AFIT8_ee_iFSVarThLow
-	{0x0F12, 0x000B},    //70000CAC AFIT8_ee_iFSVarThHigh   [7:0] AFIT8_ee_iFSThLow
-	{0x0F12, 0x1200},    //70000CAE AFIT8_ee_iFSThHigh   [7:0] AFIT8_ee_iFSmagPower
-	{0x0F12, 0x5A0F},    //70000CB0 AFIT8_ee_iFSVarCountTh   [7:0] AFIT8_ee_iRadialLimit
-	{0x0F12, 0x0502},    //70000CB2 AFIT8_ee_iRadialPower   [7:0] AFIT8_ee_iSmoothEdgeSlope
-	{0x0F12, 0x1802},    //70000CB4 AFIT8_ee_iROADThres   [7:0] AFIT8_ee_iROADMaxNR
-	{0x0F12, 0x0000},    //70000CB6 AFIT8_ee_iROADSubMaxNR   [7:0] AFIT8_ee_iROADSubThres
-	{0x0F12, 0x2006},    //70000CB8 AFIT8_ee_iROADNeiThres   [7:0] AFIT8_ee_iROADNeiMaxNR
-	{0x0F12, 0x4028},    //70000CBA AFIT8_ee_iSmoothEdgeThres   [7:0] AFIT8_ee_iMSharpen
-	{0x0F12, 0x0430},    //70000CBC AFIT8_ee_iWSharpen   [7:0] AFIT8_ee_iMShThresh
-	{0x0F12, 0x0101},    //70000CBE AFIT8_ee_iWShThresh   [7:0] AFIT8_ee_iReduceNegative
-	{0x0F12, 0xFF00},    //70000CC0 AFIT8_ee_iEmbossCentAdd   [7:0] AFIT8_ee_iShDespeckle
-	{0x0F12, 0x0804},    //70000CC2 AFIT8_ee_iReduceEdgeThresh   [7:0] AFIT8_dmsc_iEnhThresh
-	{0x0F12, 0x4008},    //70000CC4 AFIT8_dmsc_iDesatThresh   [7:0] AFIT8_dmsc_iDemBlurHigh
-	{0x0F12, 0x0540},    //70000CC6 AFIT8_dmsc_iDemBlurLow   [7:0] AFIT8_dmsc_iDemBlurRange
-	{0x0F12, 0x8006},    //70000CC8 AFIT8_dmsc_iDecisionThresh   [7:0] AFIT8_dmsc_iCentGrad
-	{0x0F12, 0x0020},    //70000CCA AFIT8_dmsc_iMonochrom   [7:0] AFIT8_dmsc_iGBDenoiseVal
-	{0x0F12, 0x0000},    //70000CCC AFIT8_dmsc_iGRDenoiseVal   [7:0] AFIT8_dmsc_iEdgeDesatThrHigh
-	{0x0F12, 0x1800},    //70000CCE AFIT8_dmsc_iEdgeDesatThrLow   [7:0] AFIT8_dmsc_iEdgeDesat
-	{0x0F12, 0x0000},    //70000CD0 AFIT8_dmsc_iNearGrayDesat   [7:0] AFIT8_dmsc_iEdgeDesatLimit
-	{0x0F12, 0x1E10},    //70000CD2 AFIT8_postdmsc_iBCoeff   [7:0] AFIT8_postdmsc_iGCoeff
-	{0x0F12, 0x000B},    //70000CD4 AFIT8_postdmsc_iWideMult   [7:0] AFIT8_yuvemix_mNegSlopes_0
-	{0x0F12, 0x0607},    //70000CD6 AFIT8_yuvemix_mNegSlopes_1   [7:0] AFIT8_yuvemix_mNegSlopes_2
-	{0x0F12, 0x0005},    //70000CD8 AFIT8_yuvemix_mNegSlopes_3   [7:0] AFIT8_yuvemix_mPosSlopes_0
-	{0x0F12, 0x0607},    //70000CDA AFIT8_yuvemix_mPosSlopes_1   [7:0] AFIT8_yuvemix_mPosSlopes_2
-	{0x0F12, 0x0405},    //70000CDC AFIT8_yuvemix_mPosSlopes_3   [7:0] AFIT8_yuviirnr_iXSupportY
-	{0x0F12, 0x0205},    //70000CDE AFIT8_yuviirnr_iXSupportUV   [7:0] AFIT8_yuviirnr_iLowYNorm
-	{0x0F12, 0x0304},    //70000CE0 AFIT8_yuviirnr_iHighYNorm   [7:0] AFIT8_yuviirnr_iLowUVNorm
-	{0x0F12, 0x0409},    //70000CE2 AFIT8_yuviirnr_iHighUVNorm   [7:0] AFIT8_yuviirnr_iYNormShift
-	{0x0F12, 0x0306},    //70000CE4 AFIT8_yuviirnr_iUVNormShift   [7:0] AFIT8_yuviirnr_iVertLength_Y
-	{0x0F12, 0x0407},    //70000CE6 AFIT8_yuviirnr_iVertLength_UV   [7:0] AFIT8_yuviirnr_iDiffThreshL_Y
-	{0x0F12, 0x2C04},    //70000CE8 AFIT8_yuviirnr_iDiffThreshH_Y   [7:0] AFIT8_yuviirnr_iDiffThreshL_UV
-	{0x0F12, 0x022C},    //70000CEA AFIT8_yuviirnr_iDiffThreshH_UV   [7:0] AFIT8_yuviirnr_iMaxThreshL_Y
-	{0x0F12, 0x1402},    //70000CEC AFIT8_yuviirnr_iMaxThreshH_Y   [7:0] AFIT8_yuviirnr_iMaxThreshL_UV
-	{0x0F12, 0x0618},    //70000CEE AFIT8_yuviirnr_iMaxThreshH_UV   [7:0] AFIT8_yuviirnr_iYNRStrengthL
-	{0x0F12, 0x1A02},    //70000CF0 AFIT8_yuviirnr_iYNRStrengthH   [7:0] AFIT8_yuviirnr_iUVNRStrengthL
-	{0x0F12, 0x8018},    //70000CF2 AFIT8_yuviirnr_iUVNRStrengthH   [7:0] AFIT8_byr_gras_iShadingPower
-	{0x0F12, 0x0080},    //70000CF4 AFIT8_RGBGamma2_iLinearity   [7:0] AFIT8_RGBGamma2_iDarkReduce
-	{0x0F12, 0x0080},    //70000CF6 AFIT8_ccm_oscar_iSaturation   [7:0] AFIT8_RGB2YUV_iYOffset
-	{0x0F12, 0x0180},    //70000CF8 AFIT8_RGB2YUV_iRGBGain   [7:0] AFIT8_bnr_nClustLevel_H
-	{0x0F12, 0x0A0A},    //70000CFA AFIT8_bnr_iClustMulT_H   [7:0] AFIT8_bnr_iClustMulT_C
-	{0x0F12, 0x0101},    //70000CFC AFIT8_bnr_iClustThresh_H   [7:0] AFIT8_bnr_iClustThresh_C
-	{0x0F12, 0x0C0F},    //70000CFE AFIT8_bnr_iDenThreshLow   [7:0] AFIT8_bnr_iDenThreshHigh
-	{0x0F12, 0x6024},    //70000D00 AFIT8_ee_iLowSharpPower   [7:0] AFIT8_ee_iHighSharpPower
-	{0x0F12, 0x0808},    //70000D02 AFIT8_ee_iLowShDenoise   [7:0] AFIT8_ee_iHighShDenoise
-	{0x0F12, 0xFFFF},    //70000D04 AFIT8_ee_iLowSharpClamp   [7:0] AFIT8_ee_iHighSharpClamp
-	{0x0F12, 0x0808},    //70000D06 AFIT8_ee_iReduceEdgeMinMult   [7:0] AFIT8_ee_iReduceEdgeSlope
-	{0x0F12, 0x0A01},    //70000D08 AFIT8_bnr_nClustLevel_H_Bin   [7:0] AFIT8_bnr_iClustMulT_H_Bin
-	{0x0F12, 0x010A},    //70000D0A AFIT8_bnr_iClustMulT_C_Bin   [7:0] AFIT8_bnr_iClustThresh_H_Bin
-	{0x0F12, 0x0F01},    //70000D0C AFIT8_bnr_iClustThresh_C_Bin   [7:0] AFIT8_bnr_iDenThreshLow_Bin
-	{0x0F12, 0x240C},    //70000D0E AFIT8_bnr_iDenThreshHigh_Bin   [7:0] AFIT8_ee_iLowSharpPower_Bin
-	{0x0F12, 0x0860},    //70000D10 AFIT8_ee_iHighSharpPower_Bin   [7:0] AFIT8_ee_iLowShDenoise_Bin
-	{0x0F12, 0xFF08},    //70000D12 AFIT8_ee_iHighShDenoise_Bin   [7:0] AFIT8_ee_iLowSharpClamp_Bin
-	{0x0F12, 0x08FF},    //70000D14 AFIT8_ee_iHighSharpClamp_Bin   [7:0] AFIT8_ee_iReduceEdgeMinMult_Bin
-	{0x0F12, 0x0008},    //70000D16 AFIT8_ee_iReduceEdgeSlope_Bin [7:0]
-	{0x0F12, 0x0001},    //70000D18 AFITB_bnr_nClustLevel_C      [0]   bWideWide[1]
-	{0x0F12, 0x23CE}, 	//70000D1A	//[0]CAFITB_bnr_bypass
-	{0x0F12, 0xFDC8}, 	//70000D1C	//[0]CAFITB_bnr_bSlopenessTune
-	{0x0F12, 0x112E}, 	//70000D1E	//[0]CAFITB_ee_bReduceNegMedSh
-	{0x0F12, 0x93A5}, 	//70000D20	//[0]CAFITB_dmsc_bDoDesat
-	{0x0F12, 0xFE67}, 	//70000D22	//[0]CAFITB_postdmsc_bSat
-	{0x0F12, 0x0000}, 	//70000D24	//[0]CAFITB_yuviirnr_bWideY																				//
-
-
-//===================================================================
-// 18.JPEG Thumnail Setting
-//===================================================================
-// JPEG Quality
-	{0x002A, 0x0478},
-	{0x0F12, 0x005F}, 	//REG_TC_BRC_usPrevQuality
-	{0x0F12, 0x005F}, 	//REG_TC_BRC_usCaptureQuality
-
-
-	{0x0F12, 0x0001}, 	//REG_TC_THUMB_Thumb_bActive // JPEG Thumnail
-	{0x0F12, 0x0280}, 	//REG_TC_THUMB_Thumb_uWidth //640
-	{0x0F12, 0x01E0}, 	//REG_TC_THUMB_Thumb_uHeight //480
-	{0x0F12, 0x0005}, 	//REG_TC_THUMB_Thumb_Format //YUV
-
-
-	{0x002A, 0x17DC},   // JPEG setting
-	{0x0F12, 0x0054}, 	//jpeg_ManualMBCV
-	{0x002A, 0x1AE4},
-	{0x0F12, 0x001C}, 	//senHal_bExtraAddLine
-	{0x002A, 0x0284},
-	{0x0F12, 0x0001}, 	//REG_TC_GP_bBypassScalerJpg
-	{0x002A, 0x028A},
-	{0x0F12, 0x0000}, 	//REG_TC_GP_bUse1FrameCaptureMode //0:continus capture frame}, 1:single capture frame
-
-	{0x002A, 0x1CC2}, //DRx_uDRxWeight for AutoCont function
-	{0x0F12, 0x0100},
-	{0x0F12, 0x0100},
-	{0x0F12, 0x0100},
-	{0x0F12, 0x0100},
-	{0x002A, 0x147C}, 	// Brightness min/Max
-	{0x0F12, 0x0170},  ///*bp_uMaxBrightnessFactor*/
-	{0x002A, 0x1482},
-	{0x0F12, 0x01E0},  ///*bp_uMinBrightnessFactor	*/
-
-//===================================================================
-// Input Width & Height
-//===================================================================
-	{0x002A, 0x0250},
-	{0x0F12, 0x0A00},
-	{0x0F12, 0x0780},
-	{0x0F12, 0x0010},
-	{0x0F12, 0x000C},
-	{0x0F12, 0x0A00},
-	{0x0F12, 0x0780},
-	{0x0F12, 0x0010},
-	{0x0F12, 0x000C},
-	{0x002A, 0x0494},
-	{0x0F12, 0x0A00},
-	{0x0F12, 0x0780},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0A00},
-	{0x0F12, 0x0780},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x002A, 0x0262},
-	{0x0F12, 0x0001},
-	{0x0F12, 0x0001},
-
-
-//===================================================================
-// Preview
-//===================================================================
-	{0x002A, 0x02A6},   	//Preview config[0] 640 480  10~30fps
-	{0x0F12, 0x0280},   	//REG_0TC_PCFG_usWidth
-	{0x0F12, 0x01E0},   	//REG_0TC_PCFG_usHeight
-	{0x0F12, 0x0005},   	//REG_0TC_PCFG_Format //5:YUV}, 7:RAW}, 9:JPEG
-	{0x0F12, 0x278D},   	//REG_0TC_PCFG_usMaxOut4KHzRate
-	{0x0F12, 0x278D},   	//REG_0TC_PCFG_usMinOut4KHzRate
-	{0x0F12, 0x0100}, 	//REG_0TC_PCFG_OutClkPerPix88
-	{0x0F12, 0x0300}, 	//REG_0TC_PCFG_uBpp88
-	{0x0F12, 0x0012}, 	//REG_0TC_PCFG_PVIMask //[1]:PCLK Inversion
-	{0x0F12, 0x0000}, 	//REG_0TC_PCFG_OIFMask
-	{0x0F12, 0x01E0}, 	//REG_0TC_PCFG_usJpegPacketSize
-	{0x0F12, 0x0000}, 	//REG_0TC_PCFG_usJpegTotalPackets
-	{0x0F12, 0x0000}, 	//REG_0TC_PCFG_uClockInd
-	{0x0F12, 0x0000}, 	//REG_0TC_PCFG_usFrTimeType
-	{0x0F12, 0x0001}, 	//REG_0TC_PCFG_FrRateQualityType
-	{0x0F12, 0x03E8}, 	//REG_0TC_PCFG_usMaxFrTimeMsecMult10 //03E8h:10fps
-	{0x0F12, 0x014A}, 	//REG_0TC_PCFG_usMinFrTimeMsecMult10 //014Ah:30fps
-	{0x002A, 0x02D0},
-	{0x0F12, 0x0000}, 	//REG_0TC_PCFG_uPrevMirror
-	{0x0F12, 0x0000}, 	//REG_0TC_PCFG_uCaptureMirror
-
-//===================================================================
-// Capture
-//===================================================================
-	{0x002A, 0x0396},
-	{0x0F12, 0x0000}, 	//REG_0TC_CCFG_uCaptureMode
-	{0x0F12, 0x0A00}, 	//REG_0TC_CCFG_usWidth //2560
-	{0x0F12, 0x0780}, 	//REG_0TC_CCFG_usHeight //1920
-	{0x0F12, 0x0005}, 	//REG_0TC_CCFG_Format //5:YUV}, 7:RAW}, 9:JPEG
-	{0x0F12, 0x278D},   	//REG_0TC_CCFG_usMaxOut4KHzRate
-	{0x0F12, 0x278D},   	//REG_0TC_CCFG_usMinOut4KHzRate
-	{0x0F12, 0x0100}, 	//REG_0TC_CCFG_OutClkPerPix88
-	{0x0F12, 0x0300}, 	//REG_0TC_CCFG_uBpp88
-	{0x0F12, 0x0012}, 	//REG_0TC_CCFG_PVIMask //[1]:PCLK Inversion
-	{0x0F12, 0x0070}, 	//REG_0TC_CCFG_OIFMask
-	{0x0F12, 0x0810}, 	//REG_0TC_CCFG_usJpegPacketSize //2064d
-	{0x0F12, 0x0900}, 	//REG_0TC_CCFG_usJpegTotalPackets //2304d //Must be multiples of 16
-	{0x0F12, 0x0001}, 	//REG_0TC_CCFG_uClockInd
-	{0x0F12, 0x0000}, 	//REG_0TC_CCFG_usFrTimeType
-	{0x0F12, 0x0002}, 	//REG_0TC_CCFG_FrRateQualityType
-	{0x0F12, 0x0535}, 	//REG_0TC_CCFG_usMaxFrTimeMsecMult10 //0535h:7.5fps
-	{0x0F12, 0x029A}, 	//REG_0TC_CCFG_usMinFrTimeMsecMult10 //029Ah:15fps
-	{0x002A, 0x022C},
-	{0x0F12, 0x0001}, 	//REG_TC_IPRM_InitParamsUpdated
-
-//===========================================================
-// 21.Select Cofigration Display
-//===========================================================
-	{0x0028, 0x7000},
-	{0x002A, 0x0266},
-	{0x0F12, 0x0000}, 	//REG_TC_GP_ActivePrevConfig
-	{0x002A, 0x026A},
-	{0x0F12, 0x0001}, 	//REG_TC_GP_PrevOpenAfterChange
-	{0x002A, 0x0268},
-	{0x0F12, 0x0001}, 	//REG_TC_GP_PrevConfigChanged
-	{0x002A, 0x026E},
-	{0x0f12, 0x0000},
-	{0x002A, 0x026A},
-	{0x0F12, 0x0001}, 	//REG_TC_GP_PrevOpenAfterChange
-	{0x002A, 0x0270},
-	{0x0F12, 0x0001}, 	//REG_TC_GP_CapConfigChanged                      '
-	{0x002A, 0x024E},
-	{0x0F12, 0x0001}, 	//REG_TC_GP_NewConfigSync//
-	{0x002A, 0x023E},
-	{0x0F12, 0x0001},     //REG_TC_GP_EnablePreview
-	{0x0F12, 0x0001}, 	//REG_TC_GP_EnablePreviewChanged
-
-
-
-
-//===================================================================================
-// 22. ESD Check
-//===================================================================================
-
-	{0x0028, 0x7000},
-	{0x002A, 0x01A8}, 	///*ESD Check*/
-	{0x0F12, 0xAAAA},
-	{0x0028, 0x147C},
-	{0x0F12, 0x0170},
-	{0x0028, 0x1482},
-	{0x0F12, 0x01E0},
-
-
-//===================================================================================
-// 24.ISSUE
-//===================================================================================
-//20110728 : Sequence Changed by image dev. (by J.M.Ahn)
-//20110728 : ESD Check Register Address Change
-//20110829 : TnP Changed ( by S.Y.Lee)
-//20120104 : init Parm Update sequence changed by J.M.Ahn)
-//20120201 : Flash  Green Noise  setting (by J.M.Ahn)
-//20120229 : Brightness Block  (by J.W.Yoo)
-};
-
-//640X480 YUV
-LOCAL const SENSOR_REG_T s5k4ec_640X480[]=
-{
-	{0xFCFC, 0xD000},
-	{0x0028, 0x7000},
-
-	{0x002A, 0x18AC},
-	{0x0F12, 0x0060},	//senHal_uAddColsBin
-	{0x0F12, 0x0060},	//senHal_uAddColsNoBin
-	{0x0F12, 0x05C0},	//senHal_uMinColsBin
-	{0x0F12, 0x05C0},	//senHal_uMinColsNoBin
-
-	{0x002A, 0x0250},
-	{0x0F12, 0x0A00},	//REG_TC_GP_PrevReqInputWidth //2560
-	{0x0F12, 0x0780},	//REG_TC_GP_PrevReqInputHeight //1920
-	{0x0F12, 0x0010},	//REG_TC_GP_PrevInputWidthOfs //(2592-2560)/2
-	{0x0F12, 0x000C},	//REG_TC_GP_PrevInputHeightOfs //(1944-1920)/2
-
-	{0x002A, 0x0262},
-	{0x0F12, 0x0001},	//REG_TC_GP_bUseReqInputInPre
-
-	{0x002A, 0x0494},
-	{0x0F12, 0x0A00},	//REG_TC_PZOOM_PrevZoomReqInputWidth //2560
-	{0x0F12, 0x0780},	//REG_TC_PZOOM_PrevZoomReqInputHeight //1920
-	{0x0F12, 0x0000},	//REG_TC_PZOOM_PrevZoomReqInputWidthOfs
-	{0x0F12, 0x0000},	//REG_TC_PZOOM_PrevZoomReqInputHeightOfs
-
-	{0x002A, 0x02A6},
-	{0x0F12, 0x0280},	//REG_0TC_PCFG_usWidth //640
-	{0x0F12, 0x01E0},	//REG_0TC_PCFG_usHeight //480
-
-	{0x002A, 0x0266},
-	{0x0F12, 0x0000},	//REG_TC_GP_ActivePrevConfig
-	{0x002A, 0x026A},
-	{0x0F12, 0x0001},	//REG_TC_GP_PrevOpenAfterChange
-	{0x002A, 0x024E},
-	{0x0F12, 0x0001},	//REG_TC_GP_NewConfigSync
-	{0x002A, 0x0268},
-	{0x0F12, 0x0001},	//REG_TC_GP_PrevConfigChanged
-
-};
-
-LOCAL const SENSOR_REG_T s5k4ec_1280X720[] =
-{
-	{0xFCFC, 0xD000},
-	{0x0028, 0xD000},
-	{0x002A, 0xE410},
-	{0x0F12, 0x3E01},
-	{0x0028, 0x7000},
-	{0x002A, 0x18AC},
-	{0x0F12, 0x0060},
-	{0x0F12, 0x0060},
-	{0x0F12, 0x07DC},
-	{0x0F12, 0x05C0},
-
-	{0x002A, 0x1484},
-	{0x0F12, 0x002A},
-
-	{0x002A, 0x1492},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-	{0x0F12, 0x0101},
-
-	{0x002A, 0x1568},
-	{0x0F12, 0x0030},
-	{0x0F12, 0x0090},
-	{0x0F12, 0x00A8},
-	{0x0F12, 0x00C0},
-	{0x0F12, 0x0100},
-	{0x0F12, 0x0140},
-	{0x0F12, 0x0180},
-	{0x0F12, 0x0400},
-	{0x0F12, 0x2000},
-
-	{0x0F12, 0x0080},
-	{0x0F12, 0x00D0},
-	{0x0F12, 0x00D8},
-	{0x0F12, 0x00f8},
-	{0x0F12, 0x0100},
-	{0x0F12, 0x0103},
-	{0x0F12, 0x0110},
-	{0x0F12, 0x0150},
-	{0x0F12, 0x0400},
-
-	{0x002A, 0x0544},
-	{0x0F12, 0x0105},
-	{0x0F12, 0x00FA},
-
-	{0x002A, 0x0588},
-	{0x0F12, 0x0001},
-
-	{0x002A, 0x0582},
-	{0x0F12, 0x00D0},
-
-	{0x002A, 0x47B0},
-	{0x0F12, 0x0001},
-
-	{0x002A, 0x139A},
-	{0x0F12, 0x0258},
-
-	{0x002A, 0x1464},
-	{0x0F12, 0x0008},
-	{0x0F12, 0xFFFF},
-	{0x0F12, 0x0010},
-	{0x0F12, 0x0020},
-
-	{0x002A, 0x13A4},
-	{0x0F12, 0x0000},
-	{0x0F12, 0xFFD8},
-	{0x0F12, 0xFFD8},
-	{0x0F12, 0xFFD8},
-	{0x0F12, 0xFFD8},
-	{0x0F12, 0xFFD0},
-
-	{0x0F12, 0x0000},
-	{0x0F12, 0xFFD8},
-	{0x0F12, 0xFFD8},
-	{0x0F12, 0xFFD8},
-	{0x0F12, 0xFFD8},
-	{0x0F12, 0xFFD0},
-
-	{0x0F12, 0x0000},
-	{0x0F12, 0xFFD8},
-	{0x0F12, 0xFFD8},
-	{0x0F12, 0xFFD8},
-	{0x0F12, 0xFFD8},
-	{0x0F12, 0xFFD0},
-
-	{0x0F12, 0xFFEC},
-	{0x0F12, 0x000A},
-	{0x0F12, 0x000A},
-	{0x0F12, 0xFFC4},
-	{0x0F12, 0xFFC4},
-	{0x0F12, 0xFF66},
-
-	{0x0F12, 0xFFEC},
-	{0x0F12, 0x000A},
-	{0x0F12, 0x000A},
-	{0x0F12, 0xFFC4},
-	{0x0F12, 0xFFC4},
-	{0x0F12, 0xFF66},
-
-	{0x0F12, 0xFFEC},
-	{0x0F12, 0x000A},
-	{0x0F12, 0x000A},
-	{0x0F12, 0xFFC4},
-	{0x0F12, 0xFFC4},
-	{0x0F12, 0xFF66},
-
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-
-	{0x0F12, 0xFFC0},
-	{0x0F12, 0xFFC0},
-	{0x0F12, 0xFFC0},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-
-	{0x0F12, 0xFFC0},
-	{0x0F12, 0xFFC0},
-	{0x0F12, 0xFFC0},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-
-	{0x0F12, 0xFFC0},
-	{0x0F12, 0xFFC0},
-	{0x0F12, 0xFFC0},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-
-	{0x002A, 0x1208},
-	{0x0F12, 0x0020},
-
-	{0x002A, 0x144E},
-	{0x0F12, 0xFFE0},
-	{0x0F12, 0xFFE0},
-	{0x0F12, 0x0000},
-
-	{0x002A, 0x4800},
-	{0x0F12, 0x0208},
-	{0x0F12, 0xFFB5},
-	{0x0F12, 0xFFE8},
-	{0x0F12, 0xFF20},
-	{0x0F12, 0x01BF},
-	{0x0F12, 0xFF53},
-	{0x0F12, 0x0022},
-	{0x0F12, 0xFFEA},
-	{0x0F12, 0x01C2},
-	{0x0F12, 0x00C6},
-	{0x0F12, 0x0095},
-	{0x0F12, 0xFEFD},
-	{0x0F12, 0x0206},
-	{0x0F12, 0xFF7F},
-	{0x0F12, 0x0191},
-	{0x0F12, 0xFF06},
-	{0x0F12, 0x01BA},
-	{0x0F12, 0x0108},
-
-	{0x0F12, 0x0208},
-	{0x0F12, 0xFFB5},
-	{0x0F12, 0xFFE8},
-	{0x0F12, 0xFF20},
-	{0x0F12, 0x01BF},
-	{0x0F12, 0xFF53},
-	{0x0F12, 0x0022},
-	{0x0F12, 0xFFEA},
-	{0x0F12, 0x01C2},
-	{0x0F12, 0x00C6},
-	{0x0F12, 0x0095},
-	{0x0F12, 0xFEFD},
-	{0x0F12, 0x0206},
-	{0x0F12, 0xFF7F},
-	{0x0F12, 0x0191},
-	{0x0F12, 0xFF06},
-	{0x0F12, 0x01BA},
-	{0x0F12, 0x0108},
-
-	{0x0F12, 0x0208},
-	{0x0F12, 0xFFB5},
-	{0x0F12, 0xFFE8},
-	{0x0F12, 0xFF20},
-	{0x0F12, 0x01BF},
-	{0x0F12, 0xFF53},
-	{0x0F12, 0x0022},
-	{0x0F12, 0xFFEA},
-	{0x0F12, 0x01C2},
-	{0x0F12, 0x00C6},
-	{0x0F12, 0x0095},
-	{0x0F12, 0xFEFD},
-	{0x0F12, 0x0206},
-	{0x0F12, 0xFF7F},
-	{0x0F12, 0x0191},
-	{0x0F12, 0xFF06},
-	{0x0F12, 0x01BA},
-	{0x0F12, 0x0108},
-
-	{0x0F12, 0x0209},
-	{0x0F12, 0xFFBD},
-	{0x0F12, 0xFFDF},
-	{0x0F12, 0xFF20},
-	{0x0F12, 0x01BF},
-	{0x0F12, 0xFF53},
-	{0x0F12, 0x0022},
-	{0x0F12, 0xFFEA},
-	{0x0F12, 0x01C2},
-	{0x0F12, 0x00CC},
-	{0x0F12, 0x008F},
-	{0x0F12, 0xFEFE},
-	{0x0F12, 0x0206},
-	{0x0F12, 0xFF7F},
-	{0x0F12, 0x0191},
-	{0x0F12, 0xFF06},
-	{0x0F12, 0x01BA},
-	{0x0F12, 0x0108},
-
-	{0x0F12, 0x0209},
-	{0x0F12, 0xFFBD},
-	{0x0F12, 0xFFDF},
-	{0x0F12, 0xFF20},
-	{0x0F12, 0x01BF},
-	{0x0F12, 0xFF53},
-	{0x0F12, 0x0022},
-	{0x0F12, 0xFFEA},
-	{0x0F12, 0x01C2},
-	{0x0F12, 0x00CC},
-	{0x0F12, 0x008F},
-	{0x0F12, 0xFEFE},
-	{0x0F12, 0x0206},
-	{0x0F12, 0xFF7F},
-	{0x0F12, 0x0191},
-	{0x0F12, 0xFF06},
-	{0x0F12, 0x01BA},
-	{0x0F12, 0x0108},
-
-	{0x0F12, 0x0209},
-	{0x0F12, 0xFFBD},
-	{0x0F12, 0xFFDF},
-	{0x0F12, 0xFF20},
-	{0x0F12, 0x01BF},
-	{0x0F12, 0xFF53},
-	{0x0F12, 0x0022},
-	{0x0F12, 0xFFEA},
-	{0x0F12, 0x01C2},
-	{0x0F12, 0x00CC},
-	{0x0F12, 0x008F},
-	{0x0F12, 0xFEFE},
-	{0x0F12, 0x0206},
-	{0x0F12, 0xFF7F},
-	{0x0F12, 0x0191},
-	{0x0F12, 0xFF06},
-	{0x0F12, 0x01BA},
-	{0x0F12, 0x0108},
-
-
-
-	{0x002A, 0x0938},
-	{0x0F12, 0x0001},
-	{0x0F12, 0x0014},
-	{0x0F12, 0x00D2},
-	{0x0F12, 0x0784},
-	{0x0F12, 0x10D0},
-	{0x0F12, 0x1388},
-
-	{0x002A, 0x098C},
-	{0x0F12, 0x0000},   //7000098C AFIT16_BRIGHTNESS
-	{0x0F12, 0x0000},   //7000098E AFIT16_CONTRAST
-	{0x0F12, 0x0000},   //70000990 AFIT16_SATURATION
-	{0x0F12, 0x0000},   //70000992 AFIT16_SHARP_BLUR
-	{0x0F12, 0x0000},   //70000994 AFIT16_GLAMOUR
-	{0x0F12, 0x00C0},   //70000996 AFIT16_bnr_edge_high
-	{0x0F12, 0x0064},   //70000998 AFIT16_postdmsc_iLowBright
-	{0x0F12, 0x0384},   //7000099A AFIT16_postdmsc_iHighBright
-	{0x0F12, 0x0051},   //7000099C AFIT16_postdmsc_iLowSat
-	{0x0F12, 0x01F4},   //7000099E AFIT16_postdmsc_iHighSat
-	{0x0F12, 0x0070},   //700009A0 AFIT16_postdmsc_iTune
-	{0x0F12, 0x0040},   //700009A2 AFIT16_yuvemix_mNegRanges_0
-	{0x0F12, 0x00A0},   //700009A4 AFIT16_yuvemix_mNegRanges_1
-	{0x0F12, 0x0100},   //700009A6 AFIT16_yuvemix_mNegRanges_2
-	{0x0F12, 0x0010},   //700009A8 AFIT16_yuvemix_mPosRanges_0
-	{0x0F12, 0x0060},   //700009AA AFIT16_yuvemix_mPosRanges_1
-	{0x0F12, 0x0100},   //700009AC AFIT16_yuvemix_mPosRanges_2
-	{0x0F12, 0x1430},   //700009AE AFIT8_bnr_edge_low  [7:0] AFIT8_bnr_repl_thresh
-	{0x0F12, 0x0201},   //700009B0 AFIT8_bnr_repl_force  [7:0] AFIT8_bnr_iHotThreshHigh
-	{0x0F12, 0x0204},   //700009B2 AFIT8_bnr_iHotThreshLow   [7:0] AFIT8_bnr_iColdThreshHigh
-	{0x0F12, 0x2404},   //700009B4 AFIT8_bnr_iColdThreshLow   [7:0] AFIT8_bnr_DispTH_Low
-	{0x0F12, 0x031B},   //700009B6 AFIT8_bnr_DispTH_High   [7:0] AFIT8_bnr_DISP_Limit_Low
-	{0x0F12, 0x0103},   //700009B8 AFIT8_bnr_DISP_Limit_High   [7:0] AFIT8_bnr_iDistSigmaMin
-	{0x0F12, 0x1205},   //700009BA AFIT8_bnr_iDistSigmaMax   [7:0] AFIT8_bnr_iDiffSigmaLow
-	{0x0F12, 0x400D},   //700009BC AFIT8_bnr_iDiffSigmaHigh   [7:0] AFIT8_bnr_iNormalizedSTD_TH
-	{0x0F12, 0x0080},   //700009BE AFIT8_bnr_iNormalizedSTD_Limit   [7:0] AFIT8_bnr_iDirNRTune
-	{0x0F12, 0x2080},   //700009C0 AFIT8_bnr_iDirMinThres   [7:0] AFIT8_bnr_iDirFltDiffThresHigh
-	{0x0F12, 0x3040},   //700009C2 AFIT8_bnr_iDirFltDiffThresLow   [7:0] AFIT8_bnr_iDirSmoothPowerHigh
-	{0x0F12, 0x0630},   //700009C4 AFIT8_bnr_iDirSmoothPowerLow   [7:0] AFIT8_bnr_iLowMaxSlopeAllowed
-	{0x0F12, 0x0306},   //700009C6 AFIT8_bnr_iHighMaxSlopeAllowed   [7:0] AFIT8_bnr_iLowSlopeThresh
-	{0x0F12, 0x2003},   //700009C8 AFIT8_bnr_iHighSlopeThresh   [7:0] AFIT8_bnr_iSlopenessTH
-	{0x0F12, 0xFF01},   //700009CA AFIT8_bnr_iSlopeBlurStrength   [7:0] AFIT8_bnr_iSlopenessLimit
-	{0x0F12, 0x0404},   //700009CC AFIT8_bnr_AddNoisePower1   [7:0] AFIT8_bnr_AddNoisePower2
-	{0x0F12, 0x0300},   //700009CE AFIT8_bnr_iRadialTune   [7:0] AFIT8_bnr_iRadialPower
-	{0x0F12, 0x245A},   //700009D0 AFIT8_bnr_iRadialLimit   [7:0] AFIT8_ee_iFSMagThLow
-	{0x0F12, 0x1018},   //700009D2 AFIT8_ee_iFSMagThHigh   [7:0] AFIT8_ee_iFSVarThLow
-	{0x0F12, 0x000B},   //700009D4 AFIT8_ee_iFSVarThHigh   [7:0] AFIT8_ee_iFSThLow
-	{0x0F12, 0x0B00},   //700009D6 AFIT8_ee_iFSThHigh   [7:0] AFIT8_ee_iFSmagPower
-	{0x0F12, 0x5A0F},   //700009D8 AFIT8_ee_iFSVarCountTh   [7:0] AFIT8_ee_iRadialLimit
-	{0x0F12, 0x0505},   //700009DA AFIT8_ee_iRadialPower   [7:0] AFIT8_ee_iSmoothEdgeSlope
-	{0x0F12, 0x1802},   //700009DC AFIT8_ee_iROADThres   [7:0] AFIT8_ee_iROADMaxNR
-	{0x0F12, 0x0000},   //700009DE AFIT8_ee_iROADSubMaxNR   [7:0] AFIT8_ee_iROADSubThres
-	{0x0F12, 0x2006},   //700009E0 AFIT8_ee_iROADNeiThres   [7:0] AFIT8_ee_iROADNeiMaxNR
-	{0x0F12, 0x3428},   //700009E2 AFIT8_ee_iSmoothEdgeThres   [7:0] AFIT8_ee_iMSharpen
-	{0x0F12, 0x041C},   //700009E4 AFIT8_ee_iWSharpen   [7:0] AFIT8_ee_iMShThresh
-	{0x0F12, 0x0101},   //700009E6 AFIT8_ee_iWShThresh   [7:0] AFIT8_ee_iReduceNegative
-	{0x0F12, 0x0800},   //700009E8 AFIT8_ee_iEmbossCentAdd   [7:0] AFIT8_ee_iShDespeckle
-	{0x0F12, 0x1004},   //700009EA AFIT8_ee_iReduceEdgeThresh   [7:0] AFIT8_dmsc_iEnhThresh
-	{0x0F12, 0x4008},   //700009EC AFIT8_dmsc_iDesatThresh   [7:0] AFIT8_dmsc_iDemBlurHigh
-	{0x0F12, 0x0540},   //700009EE AFIT8_dmsc_iDemBlurLow   [7:0] AFIT8_dmsc_iDemBlurRange
-	{0x0F12, 0x8006},   //700009F0 AFIT8_dmsc_iDecisionThresh   [7:0] AFIT8_dmsc_iCentGrad
-	{0x0F12, 0x0020},   //700009F2 AFIT8_dmsc_iMonochrom   [7:0] AFIT8_dmsc_iGBDenoiseVal
-	{0x0F12, 0x0000},   //700009F4 AFIT8_dmsc_iGRDenoiseVal   [7:0] AFIT8_dmsc_iEdgeDesatThrHigh
-	{0x0F12, 0x1800},   //700009F6 AFIT8_dmsc_iEdgeDesatThrLow   [7:0] AFIT8_dmsc_iEdgeDesat
-	{0x0F12, 0x0000},   //700009F8 AFIT8_dmsc_iNearGrayDesat   [7:0] AFIT8_dmsc_iEdgeDesatLimit
-	{0x0F12, 0x1E10},   //700009FA AFIT8_postdmsc_iBCoeff   [7:0] AFIT8_postdmsc_iGCoeff
-	{0x0F12, 0x000B},   //700009FC AFIT8_postdmsc_iWideMult   [7:0] AFIT8_yuvemix_mNegSlopes_0
-	{0x0F12, 0x0607},   //700009FE AFIT8_yuvemix_mNegSlopes_1   [7:0] AFIT8_yuvemix_mNegSlopes_2
-	{0x0F12, 0x0005},   //70000A00 AFIT8_yuvemix_mNegSlopes_3   [7:0] AFIT8_yuvemix_mPosSlopes_0
-	{0x0F12, 0x0607},   //70000A02 AFIT8_yuvemix_mPosSlopes_1   [7:0] AFIT8_yuvemix_mPosSlopes_2
-	{0x0F12, 0x0405},   //70000A04 AFIT8_yuvemix_mPosSlopes_3   [7:0] AFIT8_yuviirnr_iXSupportY
-	{0x0F12, 0x0205},   //70000A06 AFIT8_yuviirnr_iXSupportUV   [7:0] AFIT8_yuviirnr_iLowYNorm
-	{0x0F12, 0x0304},   //70000A08 AFIT8_yuviirnr_iHighYNorm   [7:0] AFIT8_yuviirnr_iLowUVNorm
-	{0x0F12, 0x0409},   //70000A0A AFIT8_yuviirnr_iHighUVNorm   [7:0] AFIT8_yuviirnr_iYNormShift
-	{0x0F12, 0x0306},   //70000A0C AFIT8_yuviirnr_iUVNormShift   [7:0] AFIT8_yuviirnr_iVertLength_Y
-	{0x0F12, 0x0407},   //70000A0E AFIT8_yuviirnr_iVertLength_UV   [7:0] AFIT8_yuviirnr_iDiffThreshL_Y
-	{0x0F12, 0x1804},   //70000A10 AFIT8_yuviirnr_iDiffThreshH_Y   [7:0] AFIT8_yuviirnr_iDiffThreshL_UV
-	{0x0F12, 0x0214},   //70000A12 AFIT8_yuviirnr_iDiffThreshH_UV   [7:0] AFIT8_yuviirnr_iMaxThreshL_Y
-	{0x0F12, 0x1002},   //70000A14 AFIT8_yuviirnr_iMaxThreshH_Y   [7:0] AFIT8_yuviirnr_iMaxThreshL_UV
-	{0x0F12, 0x0610},   //70000A16 AFIT8_yuviirnr_iMaxThreshH_UV   [7:0] AFIT8_yuviirnr_iYNRStrengthL
-	{0x0F12, 0x1A02},   //70000A18 AFIT8_yuviirnr_iYNRStrengthH   [7:0] AFIT8_yuviirnr_iUVNRStrengthL
-	{0x0F12, 0x0000},  //0000},   //8018},   //70000A1A AFIT8_yuviirnr_iUVNRStrengthH   [7:0] AFIT8_byr_gras_iShadingPower
-	{0x0F12, 0x00B0},  //0080},  //00B0},   //70000A1C AFIT8_RGBGamma2_iLinearity   [7:0] AFIT8_RGBGamma2_iDarkReduce
-	{0x0F12, 0x0080},  //1480},   //70000A1E AFIT8_ccm_oscar_iSaturation   [7:0] AFIT8_RGB2YUV_iYOffset
-	{0x0F12, 0x0180},   //70000A20 AFIT8_RGB2YUV_iRGBGain   [7:0] AFIT8_bnr_nClustLevel_H
-	{0x0F12, 0x0A0A},   //70000A22 AFIT8_bnr_iClustMulT_H   [7:0] AFIT8_bnr_iClustMulT_C
-	{0x0F12, 0x0101},   //70000A24 AFIT8_bnr_iClustThresh_H   [7:0] AFIT8_bnr_iClustThresh_C
-	{0x0F12, 0x1B24},   //70000A26 AFIT8_bnr_iDenThreshLow   [7:0] AFIT8_bnr_iDenThreshHigh
-	{0x0F12, 0x6024},   //70000A28 AFIT8_ee_iLowSharpPower   [7:0] AFIT8_ee_iHighSharpPower
-	{0x0F12, 0x1D22},   //70000A2A AFIT8_ee_iLowShDenoise   [7:0] AFIT8_ee_iHighShDenoise
-	{0x0F12, 0xFFFF},   //70000A2C AFIT8_ee_iLowSharpClamp   [7:0] AFIT8_ee_iHighSharpClamp
-	{0x0F12, 0x0808},   //70000A2E AFIT8_ee_iReduceEdgeMinMult   [7:0] AFIT8_ee_iReduceEdgeSlope
-	{0x0F12, 0x0A01},   //70000A30 AFIT8_bnr_nClustLevel_H_Bin   [7:0] AFIT8_bnr_iClustMulT_H_Bin
-	{0x0F12, 0x010A},   //70000A32 AFIT8_bnr_iClustMulT_C_Bin   [7:0] AFIT8_bnr_iClustThresh_H_Bin
-	{0x0F12, 0x2401},   //70000A34 AFIT8_bnr_iClustThresh_C_Bin   [7:0] AFIT8_bnr_iDenThreshLow_Bin
-	{0x0F12, 0x241B},   //70000A36 AFIT8_bnr_iDenThreshHigh_Bin   [7:0] AFIT8_ee_iLowSharpPower_Bin
-	{0x0F12, 0x1E60},   //70000A38 AFIT8_ee_iHighSharpPower_Bin   [7:0] AFIT8_ee_iLowShDenoise_Bin
-	{0x0F12, 0xFF18},   //70000A3A AFIT8_ee_iHighShDenoise_Bin   [7:0] AFIT8_ee_iLowSharpClamp_Bin
-	{0x0F12, 0x08FF},   //70000A3C AFIT8_ee_iHighSharpClamp_Bin   [7:0] AFIT8_ee_iReduceEdgeMinMult_Bin
-	{0x0F12, 0x0008},   //70000A3E AFIT8_ee_iReduceEdgeSlope_Bin [7:0]
-	{0x0F12, 0x0001},   //70000A40 AFITB_bnr_nClustLevel_C      [0]
-
-	{0x0F12, 0x0000},   //70000A42 AFIT16_BRIGHTNESS
-	{0x0F12, 0x0000},   //70000A44 AFIT16_CONTRAST
-	{0x0F12, 0x0000},   //70000A46 AFIT16_SATURATION
-	{0x0F12, 0x0000},   //70000A48 AFIT16_SHARP_BLUR
-	{0x0F12, 0x0000},   //70000A4A AFIT16_GLAMOUR
-	{0x0F12, 0x00C0},   //70000A4C AFIT16_bnr_edge_high
-	{0x0F12, 0x0064},   //70000A4E AFIT16_postdmsc_iLowBright
-	{0x0F12, 0x0384},   //70000A50 AFIT16_postdmsc_iHighBright
-	{0x0F12, 0x0051},   //70000A52 AFIT16_postdmsc_iLowSat
-	{0x0F12, 0x01F4},   //70000A54 AFIT16_postdmsc_iHighSat
-	{0x0F12, 0x0070},   //70000A56 AFIT16_postdmsc_iTune
-	{0x0F12, 0x0040},   //70000A58 AFIT16_yuvemix_mNegRanges_0
-	{0x0F12, 0x00A0},   //70000A5A AFIT16_yuvemix_mNegRanges_1
-	{0x0F12, 0x0100},   //70000A5C AFIT16_yuvemix_mNegRanges_2
-	{0x0F12, 0x0010},   //70000A5E AFIT16_yuvemix_mPosRanges_0
-	{0x0F12, 0x0060},   //70000A60 AFIT16_yuvemix_mPosRanges_1
-	{0x0F12, 0x0100},   //70000A62 AFIT16_yuvemix_mPosRanges_2
-	{0x0F12, 0x1430},   //70000A64 AFIT8_bnr_edge_low  [7:0] AFIT8_bnr_repl_thresh
-	{0x0F12, 0x0201},   //70000A66 AFIT8_bnr_repl_force  [7:0] AFIT8_bnr_iHotThreshHigh
-	{0x0F12, 0x0204},   //70000A68 AFIT8_bnr_iHotThreshLow   [7:0] AFIT8_bnr_iColdThreshHigh
-	{0x0F12, 0x1B04},   //70000A6A AFIT8_bnr_iColdThreshLow   [7:0] AFIT8_bnr_DispTH_Low
-	{0x0F12, 0x0312},   //70000A6C AFIT8_bnr_DispTH_High   [7:0] AFIT8_bnr_DISP_Limit_Low
-	{0x0F12, 0x0003},   //70000A6E AFIT8_bnr_DISP_Limit_High   [7:0] AFIT8_bnr_iDistSigmaMin
-	{0x0F12, 0x0C03},   //70000A70 AFIT8_bnr_iDistSigmaMax   [7:0] AFIT8_bnr_iDiffSigmaLow
-	{0x0F12, 0x2806},   //70000A72 AFIT8_bnr_iDiffSigmaHigh   [7:0] AFIT8_bnr_iNormalizedSTD_TH
-	{0x0F12, 0x0060},   //70000A74 AFIT8_bnr_iNormalizedSTD_Limit   [7:0] AFIT8_bnr_iDirNRTune
-	{0x0F12, 0x1540},   //70000A76 AFIT8_bnr_iDirMinThres   [7:0] AFIT8_bnr_iDirFltDiffThresHigh
-	{0x0F12, 0x201C},   //70000A78 AFIT8_bnr_iDirFltDiffThresLow   [7:0] AFIT8_bnr_iDirSmoothPowerHigh
-	{0x0F12, 0x0620},   //70000A7A AFIT8_bnr_iDirSmoothPowerLow   [7:0] AFIT8_bnr_iLowMaxSlopeAllowed
-	{0x0F12, 0x0306},   //70000A7C AFIT8_bnr_iHighMaxSlopeAllowed   [7:0] AFIT8_bnr_iLowSlopeThresh
-	{0x0F12, 0x2003},   //70000A7E AFIT8_bnr_iHighSlopeThresh   [7:0] AFIT8_bnr_iSlopenessTH
-	{0x0F12, 0xFF01},   //70000A80 AFIT8_bnr_iSlopeBlurStrength   [7:0] AFIT8_bnr_iSlopenessLimit
-	{0x0F12, 0x0404},   //70000A82 AFIT8_bnr_AddNoisePower1   [7:0] AFIT8_bnr_AddNoisePower2
-	{0x0F12, 0x0300},   //70000A84 AFIT8_bnr_iRadialTune   [7:0] AFIT8_bnr_iRadialPower
-	{0x0F12, 0x145A},   //70000A86 AFIT8_bnr_iRadialLimit   [7:0] AFIT8_ee_iFSMagThLow
-	{0x0F12, 0x1010},   //70000A88 AFIT8_ee_iFSMagThHigh   [7:0] AFIT8_ee_iFSVarThLow
-	{0x0F12, 0x000B},   //70000A8A AFIT8_ee_iFSVarThHigh   [7:0] AFIT8_ee_iFSThLow
-	{0x0F12, 0x0B00},   //70000A8C AFIT8_ee_iFSThHigh   [7:0] AFIT8_ee_iFSmagPower
-	{0x0F12, 0x5A0F},   //70000A8E AFIT8_ee_iFSVarCountTh   [7:0] AFIT8_ee_iRadialLimit
-	{0x0F12, 0x0503},   //70000A90 AFIT8_ee_iRadialPower   [7:0] AFIT8_ee_iSmoothEdgeSlope
-	{0x0F12, 0x1802},   //70000A92 AFIT8_ee_iROADThres   [7:0] AFIT8_ee_iROADMaxNR
-	{0x0F12, 0x0000},   //70000A94 AFIT8_ee_iROADSubMaxNR   [7:0] AFIT8_ee_iROADSubThres
-	{0x0F12, 0x2006},   //70000A96 AFIT8_ee_iROADNeiThres   [7:0] AFIT8_ee_iROADNeiMaxNR
-	{0x0F12, 0x3C28},   //70000A98 AFIT8_ee_iSmoothEdgeThres   [7:0] AFIT8_ee_iMSharpen
-	{0x0F12, 0x0428},   //70000A9A AFIT8_ee_iWSharpen   [7:0] AFIT8_ee_iMShThresh
-	{0x0F12, 0x0101},   //70000A9C AFIT8_ee_iWShThresh   [7:0] AFIT8_ee_iReduceNegative
-	{0x0F12, 0x8000},   //70000A9E AFIT8_ee_iEmbossCentAdd   [7:0] AFIT8_ee_iShDespeckle
-	{0x0F12, 0x1004},   //70000AA0 AFIT8_ee_iReduceEdgeThresh   [7:0] AFIT8_dmsc_iEnhThresh
-	{0x0F12, 0x4008},   //70000AA2 AFIT8_dmsc_iDesatThresh   [7:0] AFIT8_dmsc_iDemBlurHigh
-	{0x0F12, 0x0540},   //70000AA4 AFIT8_dmsc_iDemBlurLow   [7:0] AFIT8_dmsc_iDemBlurRange
-	{0x0F12, 0x8006},   //70000AA6 AFIT8_dmsc_iDecisionThresh   [7:0] AFIT8_dmsc_iCentGrad
-	{0x0F12, 0x0020},   //70000AA8 AFIT8_dmsc_iMonochrom   [7:0] AFIT8_dmsc_iGBDenoiseVal
-	{0x0F12, 0x0000},   //70000AAA AFIT8_dmsc_iGRDenoiseVal   [7:0] AFIT8_dmsc_iEdgeDesatThrHigh
-	{0x0F12, 0x1800},   //70000AAC AFIT8_dmsc_iEdgeDesatThrLow   [7:0] AFIT8_dmsc_iEdgeDesat
-	{0x0F12, 0x0000},   //70000AAE AFIT8_dmsc_iNearGrayDesat   [7:0] AFIT8_dmsc_iEdgeDesatLimit
-	{0x0F12, 0x1E10},   //70000AB0 AFIT8_postdmsc_iBCoeff   [7:0] AFIT8_postdmsc_iGCoeff
-	{0x0F12, 0x000B},   //70000AB2 AFIT8_postdmsc_iWideMult   [7:0] AFIT8_yuvemix_mNegSlopes_0
-	{0x0F12, 0x0607},   //70000AB4 AFIT8_yuvemix_mNegSlopes_1   [7:0] AFIT8_yuvemix_mNegSlopes_2
-	{0x0F12, 0x0005},   //70000AB6 AFIT8_yuvemix_mNegSlopes_3   [7:0] AFIT8_yuvemix_mPosSlopes_0
-	{0x0F12, 0x0607},   //70000AB8 AFIT8_yuvemix_mPosSlopes_1   [7:0] AFIT8_yuvemix_mPosSlopes_2
-	{0x0F12, 0x0405},   //70000ABA AFIT8_yuvemix_mPosSlopes_3   [7:0] AFIT8_yuviirnr_iXSupportY
-	{0x0F12, 0x0205},   //70000ABC AFIT8_yuviirnr_iXSupportUV   [7:0] AFIT8_yuviirnr_iLowYNorm
-	{0x0F12, 0x0304},   //70000ABE AFIT8_yuviirnr_iHighYNorm   [7:0] AFIT8_yuviirnr_iLowUVNorm
-	{0x0F12, 0x0409},   //70000AC0 AFIT8_yuviirnr_iHighUVNorm   [7:0] AFIT8_yuviirnr_iYNormShift
-	{0x0F12, 0x0306},   //70000AC2 AFIT8_yuviirnr_iUVNormShift   [7:0] AFIT8_yuviirnr_iVertLength_Y
-	{0x0F12, 0x0407},   //70000AC4 AFIT8_yuviirnr_iVertLength_UV   [7:0] AFIT8_yuviirnr_iDiffThreshL_Y
-	{0x0F12, 0x1804},   //70000AC6 AFIT8_yuviirnr_iDiffThreshH_Y   [7:0] AFIT8_yuviirnr_iDiffThreshL_UV
-	{0x0F12, 0x0214},   //70000AC8 AFIT8_yuviirnr_iDiffThreshH_UV   [7:0] AFIT8_yuviirnr_iMaxThreshL_Y
-	{0x0F12, 0x1002},   //70000ACA AFIT8_yuviirnr_iMaxThreshH_Y   [7:0] AFIT8_yuviirnr_iMaxThreshL_UV
-	{0x0F12, 0x0610},   //70000ACC AFIT8_yuviirnr_iMaxThreshH_UV   [7:0] AFIT8_yuviirnr_iYNRStrengthL
-	{0x0F12, 0x1A02},   //70000ACE AFIT8_yuviirnr_iYNRStrengthH   [7:0] AFIT8_yuviirnr_iUVNRStrengthL
-	{0x0F12, 0x8018},   //70000AD0 AFIT8_yuviirnr_iUVNRStrengthH   [7:0] AFIT8_byr_gras_iShadingPower
-	{0x0F12, 0x00A0},   //70000AD2 AFIT8_RGBGamma2_iLinearity   [7:0] AFIT8_RGBGamma2_iDarkReduce
-	{0x0F12, 0x1480},   //70000AD4 AFIT8_ccm_oscar_iSaturation   [7:0] AFIT8_RGB2YUV_iYOffset
-	{0x0F12, 0x0180},   //70000AD6 AFIT8_RGB2YUV_iRGBGain   [7:0] AFIT8_bnr_nClustLevel_H
-	{0x0F12, 0x0A0A},   //70000AD8 AFIT8_bnr_iClustMulT_H   [7:0] AFIT8_bnr_iClustMulT_C
-	{0x0F12, 0x0101},   //70000ADA AFIT8_bnr_iClustThresh_H   [7:0] AFIT8_bnr_iClustThresh_C
-	{0x0F12, 0x1B24},   //70000ADC AFIT8_bnr_iDenThreshLow   [7:0] AFIT8_bnr_iDenThreshHigh
-	{0x0F12, 0x6024},   //70000ADE AFIT8_ee_iLowSharpPower   [7:0] AFIT8_ee_iHighSharpPower
-	{0x0F12, 0x0C0C},   //70000AE0 AFIT8_ee_iLowShDenoise   [7:0] AFIT8_ee_iHighShDenoise
-	{0x0F12, 0xFFFF},   //70000AE2 AFIT8_ee_iLowSharpClamp   [7:0] AFIT8_ee_iHighSharpClamp
-	{0x0F12, 0x0808},   //70000AE4 AFIT8_ee_iReduceEdgeMinMult   [7:0] AFIT8_ee_iReduceEdgeSlope
-	{0x0F12, 0x0A01},   //70000AE6 AFIT8_bnr_nClustLevel_H_Bin   [7:0] AFIT8_bnr_iClustMulT_H_Bin
-	{0x0F12, 0x010A},   //70000AE8 AFIT8_bnr_iClustMulT_C_Bin   [7:0] AFIT8_bnr_iClustThresh_H_Bin
-	{0x0F12, 0x1501},   //70000AEA AFIT8_bnr_iClustThresh_C_Bin   [7:0] AFIT8_bnr_iDenThreshLow_Bin
-	{0x0F12, 0x240F},   //70000AEC AFIT8_bnr_iDenThreshHigh_Bin   [7:0] AFIT8_ee_iLowSharpPower_Bin
-	{0x0F12, 0x0C60},   //70000AEE AFIT8_ee_iHighSharpPower_Bin   [7:0] AFIT8_ee_iLowShDenoise_Bin
-	{0x0F12, 0xFF0C},   //70000AF0 AFIT8_ee_iHighShDenoise_Bin   [7:0] AFIT8_ee_iLowSharpClamp_Bin
-	{0x0F12, 0x08FF},   //70000AF2 AFIT8_ee_iHighSharpClamp_Bin   [7:0] AFIT8_ee_iReduceEdgeMinMult_Bin
-	{0x0F12, 0x0008},   //70000AF4 AFIT8_ee_iReduceEdgeSlope_Bin [7:0]
-	{0x0F12, 0x0001},   //70000AF6 AFITB_bnr_nClustLevel_C      [0]
-
-	{0x0F12, 0x0000},   //70000AF8 AFIT16_BRIGHTNESS
-	{0x0F12, 0x0000},   //70000AFA AFIT16_CONTRAST
-	{0x0F12, 0x0000},   //70000AFC AFIT16_SATURATION
-	{0x0F12, 0x0000},   //70000AFE AFIT16_SHARP_BLUR
-	{0x0F12, 0x0000},   //70000B00 AFIT16_GLAMOUR
-	{0x0F12, 0x00C0},   //70000B02 AFIT16_bnr_edge_high
-	{0x0F12, 0x0064},   //70000B04 AFIT16_postdmsc_iLowBright
-	{0x0F12, 0x0384},   //70000B06 AFIT16_postdmsc_iHighBright
-	{0x0F12, 0x0043},   //70000B08 AFIT16_postdmsc_iLowSat
-	{0x0F12, 0x01F4},   //70000B0A AFIT16_postdmsc_iHighSat
-	{0x0F12, 0x0070},   //70000B0C AFIT16_postdmsc_iTune
-	{0x0F12, 0x0040},   //70000B0E AFIT16_yuvemix_mNegRanges_0
-	{0x0F12, 0x00A0},   //70000B10 AFIT16_yuvemix_mNegRanges_1
-	{0x0F12, 0x0100},   //70000B12 AFIT16_yuvemix_mNegRanges_2
-	{0x0F12, 0x0010},   //70000B14 AFIT16_yuvemix_mPosRanges_0
-	{0x0F12, 0x0060},   //70000B16 AFIT16_yuvemix_mPosRanges_1
-	{0x0F12, 0x0100},   //70000B18 AFIT16_yuvemix_mPosRanges_2
-	{0x0F12, 0x1430},   //70000B1A AFIT8_bnr_edge_low  [7:0] AFIT8_bnr_repl_thresh
-	{0x0F12, 0x0201},   //70000B1C AFIT8_bnr_repl_force  [7:0] AFIT8_bnr_iHotThreshHigh
-	{0x0F12, 0x0204},   //70000B1E AFIT8_bnr_iHotThreshLow   [7:0] AFIT8_bnr_iColdThreshHigh
-	{0x0F12, 0x1B04},   //70000B20 AFIT8_bnr_iColdThreshLow   [7:0] AFIT8_bnr_DispTH_Low
-	{0x0F12, 0x0312},   //70000B22 AFIT8_bnr_DispTH_High   [7:0] AFIT8_bnr_DISP_Limit_Low
-	{0x0F12, 0x0003},   //70000B24 AFIT8_bnr_DISP_Limit_High   [7:0] AFIT8_bnr_iDistSigmaMin
-	{0x0F12, 0x0C03},   //70000B26 AFIT8_bnr_iDistSigmaMax   [7:0] AFIT8_bnr_iDiffSigmaLow
-	{0x0F12, 0x2806},   //70000B28 AFIT8_bnr_iDiffSigmaHigh   [7:0] AFIT8_bnr_iNormalizedSTD_TH
-	{0x0F12, 0x0060},   //70000B2A AFIT8_bnr_iNormalizedSTD_Limit   [7:0] AFIT8_bnr_iDirNRTune
-	{0x0F12, 0x1540},   //70000B2C AFIT8_bnr_iDirMinThres   [7:0] AFIT8_bnr_iDirFltDiffThresHigh
-	{0x0F12, 0x201C},   //70000B2E AFIT8_bnr_iDirFltDiffThresLow   [7:0] AFIT8_bnr_iDirSmoothPowerHigh
-	{0x0F12, 0x0620},   //70000B30 AFIT8_bnr_iDirSmoothPowerLow   [7:0] AFIT8_bnr_iLowMaxSlopeAllowed
-	{0x0F12, 0x0306},   //70000B32 AFIT8_bnr_iHighMaxSlopeAllowed   [7:0] AFIT8_bnr_iLowSlopeThresh
-	{0x0F12, 0x2003},   //70000B34 AFIT8_bnr_iHighSlopeThresh   [7:0] AFIT8_bnr_iSlopenessTH
-	{0x0F12, 0xFF01},   //70000B36 AFIT8_bnr_iSlopeBlurStrength   [7:0] AFIT8_bnr_iSlopenessLimit
-	{0x0F12, 0x0404},   //70000B38 AFIT8_bnr_AddNoisePower1   [7:0] AFIT8_bnr_AddNoisePower2
-	{0x0F12, 0x0300},   //70000B3A AFIT8_bnr_iRadialTune   [7:0] AFIT8_bnr_iRadialPower
-	{0x0F12, 0x145A},   //70000B3C AFIT8_bnr_iRadialLimit   [7:0] AFIT8_ee_iFSMagThLow
-	{0x0F12, 0x1010},   //70000B3E AFIT8_ee_iFSMagThHigh   [7:0] AFIT8_ee_iFSVarThLow
-	{0x0F12, 0x000B},   //70000B40 AFIT8_ee_iFSVarThHigh   [7:0] AFIT8_ee_iFSThLow
-	{0x0F12, 0x0E00},   //70000B42 AFIT8_ee_iFSThHigh   [7:0] AFIT8_ee_iFSmagPower
-	{0x0F12, 0x5A0F},   //70000B44 AFIT8_ee_iFSVarCountTh   [7:0] AFIT8_ee_iRadialLimit
-	{0x0F12, 0x0503},   //70000B46 AFIT8_ee_iRadialPower   [7:0] AFIT8_ee_iSmoothEdgeSlope
-	{0x0F12, 0x1802},   //70000B48 AFIT8_ee_iROADThres   [7:0] AFIT8_ee_iROADMaxNR
-	{0x0F12, 0x0000},   //70000B4A AFIT8_ee_iROADSubMaxNR   [7:0] AFIT8_ee_iROADSubThres
-	{0x0F12, 0x2006},   //70000B4C AFIT8_ee_iROADNeiThres   [7:0] AFIT8_ee_iROADNeiMaxNR
-	{0x0F12, 0x3C28},   //70000B4E AFIT8_ee_iSmoothEdgeThres   [7:0] AFIT8_ee_iMSharpen
-	{0x0F12, 0x0428},   //70000B50 AFIT8_ee_iWSharpen   [7:0] AFIT8_ee_iMShThresh
-	{0x0F12, 0x0101},   //70000B52 AFIT8_ee_iWShThresh   [7:0] AFIT8_ee_iReduceNegative
-	{0x0F12, 0x8000},   //70000B54 AFIT8_ee_iEmbossCentAdd   [7:0] AFIT8_ee_iShDespeckle
-	{0x0F12, 0x0A04},   //70000B56 AFIT8_ee_iReduceEdgeThresh   [7:0] AFIT8_dmsc_iEnhThresh
-	{0x0F12, 0x4008},   //70000B58 AFIT8_dmsc_iDesatThresh   [7:0] AFIT8_dmsc_iDemBlurHigh
-	{0x0F12, 0x0540},   //70000B5A AFIT8_dmsc_iDemBlurLow   [7:0] AFIT8_dmsc_iDemBlurRange
-	{0x0F12, 0x8006},   //70000B5C AFIT8_dmsc_iDecisionThresh   [7:0] AFIT8_dmsc_iCentGrad
-	{0x0F12, 0x0020},   //70000B5E AFIT8_dmsc_iMonochrom   [7:0] AFIT8_dmsc_iGBDenoiseVal
-	{0x0F12, 0x0000},   //70000B60 AFIT8_dmsc_iGRDenoiseVal   [7:0] AFIT8_dmsc_iEdgeDesatThrHigh
-	{0x0F12, 0x1800},   //70000B62 AFIT8_dmsc_iEdgeDesatThrLow   [7:0] AFIT8_dmsc_iEdgeDesat
-	{0x0F12, 0x0000},   //70000B64 AFIT8_dmsc_iNearGrayDesat   [7:0] AFIT8_dmsc_iEdgeDesatLimit
-	{0x0F12, 0x1E10},   //70000B66 AFIT8_postdmsc_iBCoeff   [7:0] AFIT8_postdmsc_iGCoeff
-	{0x0F12, 0x000B},   //70000B68 AFIT8_postdmsc_iWideMult   [7:0] AFIT8_yuvemix_mNegSlopes_0
-	{0x0F12, 0x0607},   //70000B6A AFIT8_yuvemix_mNegSlopes_1   [7:0] AFIT8_yuvemix_mNegSlopes_2
-	{0x0F12, 0x0005},   //70000B6C AFIT8_yuvemix_mNegSlopes_3   [7:0] AFIT8_yuvemix_mPosSlopes_0
-	{0x0F12, 0x0607},   //70000B6E AFIT8_yuvemix_mPosSlopes_1   [7:0] AFIT8_yuvemix_mPosSlopes_2
-	{0x0F12, 0x0405},   //70000B70 AFIT8_yuvemix_mPosSlopes_3   [7:0] AFIT8_yuviirnr_iXSupportY
-	{0x0F12, 0x0205},   //70000B72 AFIT8_yuviirnr_iXSupportUV   [7:0] AFIT8_yuviirnr_iLowYNorm
-	{0x0F12, 0x0304},   //70000B74 AFIT8_yuviirnr_iHighYNorm   [7:0] AFIT8_yuviirnr_iLowUVNorm
-	{0x0F12, 0x0409},   //70000B76 AFIT8_yuviirnr_iHighUVNorm   [7:0] AFIT8_yuviirnr_iYNormShift
-	{0x0F12, 0x0306},   //70000B78 AFIT8_yuviirnr_iUVNormShift   [7:0] AFIT8_yuviirnr_iVertLength_Y
-	{0x0F12, 0x0407},   //70000B7A AFIT8_yuviirnr_iVertLength_UV   [7:0] AFIT8_yuviirnr_iDiffThreshL_Y
-	{0x0F12, 0x1804},   //70000B7C AFIT8_yuviirnr_iDiffThreshH_Y   [7:0] AFIT8_yuviirnr_iDiffThreshL_UV
-	{0x0F12, 0x0214},   //70000B7E AFIT8_yuviirnr_iDiffThreshH_UV   [7:0] AFIT8_yuviirnr_iMaxThreshL_Y
-	{0x0F12, 0x1002},   //70000B80 AFIT8_yuviirnr_iMaxThreshH_Y   [7:0] AFIT8_yuviirnr_iMaxThreshL_UV
-	{0x0F12, 0x0610},   //70000B82 AFIT8_yuviirnr_iMaxThreshH_UV   [7:0] AFIT8_yuviirnr_iYNRStrengthL
-	{0x0F12, 0x1A02},   //70000B84 AFIT8_yuviirnr_iYNRStrengthH   [7:0] AFIT8_yuviirnr_iUVNRStrengthL
-	{0x0F12, 0x8018},   //70000B86 AFIT8_yuviirnr_iUVNRStrengthH   [7:0] AFIT8_byr_gras_iShadingPower
-	{0x0F12, 0x0080},   //70000B88 AFIT8_RGBGamma2_iLinearity   [7:0] AFIT8_RGBGamma2_iDarkReduce
-	{0x0F12, 0x1180},   //70000B8A AFIT8_ccm_oscar_iSaturation   [7:0] AFIT8_RGB2YUV_iYOffset
-	{0x0F12, 0x0180},   //70000B8C AFIT8_RGB2YUV_iRGBGain   [7:0] AFIT8_bnr_nClustLevel_H
-	{0x0F12, 0x0A0A},   //70000B8E AFIT8_bnr_iClustMulT_H   [7:0] AFIT8_bnr_iClustMulT_C
-	{0x0F12, 0x0101},   //70000B90 AFIT8_bnr_iClustThresh_H   [7:0] AFIT8_bnr_iClustThresh_C
-	{0x0F12, 0x141D},   //70000B92 AFIT8_bnr_iDenThreshLow   [7:0] AFIT8_bnr_iDenThreshHigh
-	{0x0F12, 0x6024},   //70000B94 AFIT8_ee_iLowSharpPower   [7:0] AFIT8_ee_iHighSharpPower
-	{0x0F12, 0x0C0C},   //70000B96 AFIT8_ee_iLowShDenoise   [7:0] AFIT8_ee_iHighShDenoise
-	{0x0F12, 0xFFFF},   //70000B98 AFIT8_ee_iLowSharpClamp   [7:0] AFIT8_ee_iHighSharpClamp
-	{0x0F12, 0x0808},   //70000B9A AFIT8_ee_iReduceEdgeMinMult   [7:0] AFIT8_ee_iReduceEdgeSlope
-	{0x0F12, 0x0A01},   //70000B9C AFIT8_bnr_nClustLevel_H_Bin   [7:0] AFIT8_bnr_iClustMulT_H_Bin
-	{0x0F12, 0x010A},   //70000B9E AFIT8_bnr_iClustMulT_C_Bin   [7:0] AFIT8_bnr_iClustThresh_H_Bin
-	{0x0F12, 0x1501},   //70000BA0 AFIT8_bnr_iClustThresh_C_Bin   [7:0] AFIT8_bnr_iDenThreshLow_Bin
-	{0x0F12, 0x240F},   //70000BA2 AFIT8_bnr_iDenThreshHigh_Bin   [7:0] AFIT8_ee_iLowSharpPower_Bin
-	{0x0F12, 0x0C60},   //70000BA4 AFIT8_ee_iHighSharpPower_Bin   [7:0] AFIT8_ee_iLowShDenoise_Bin
-	{0x0F12, 0xFF0C},   //70000BA6 AFIT8_ee_iHighShDenoise_Bin   [7:0] AFIT8_ee_iLowSharpClamp_Bin
-	{0x0F12, 0x08FF},   //70000BA8 AFIT8_ee_iHighSharpClamp_Bin   [7:0] AFIT8_ee_iReduceEdgeMinMult_Bin
-	{0x0F12, 0x0008},   //70000BAA AFIT8_ee_iReduceEdgeSlope_Bin [7:0]
-	{0x0F12, 0x0001},   //70000BAC AFITB_bnr_nClustLevel_C      [0]
-
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},   //70000BAE AFIT16_BRIGHTNESS
-	{0x0F12, 0x0000},   //70000BB0 AFIT16_CONTRAST
-	{0x0F12, 0x0000},   //70000BB2 AFIT16_SATURATION
-	{0x0F12, 0x0000},   //70000BB4 AFIT16_SHARP_BLUR
-	{0x0F12, 0x00C0},   //70000BB6 AFIT16_GLAMOUR
-	{0x0F12, 0x0064},   //70000BB8 AFIT16_bnr_edge_high
-	{0x0F12, 0x0384},   //70000BBA AFIT16_postdmsc_iLowBright
-	{0x0F12, 0x0032},   //70000BBC AFIT16_postdmsc_iHighBright
-	{0x0F12, 0x01F4},   //70000BBE AFIT16_postdmsc_iLowSat
-	{0x0F12, 0x0070},   //70000BC0 AFIT16_postdmsc_iHighSat
-	{0x0F12, 0x0040},   //70000BC2 AFIT16_postdmsc_iTune
-	{0x0F12, 0x00A0},   //70000BC4 AFIT16_yuvemix_mNegRanges_0
-	{0x0F12, 0x0100},   //70000BC6 AFIT16_yuvemix_mNegRanges_1
-	{0x0F12, 0x0010},   //70000BC8 AFIT16_yuvemix_mNegRanges_2
-	{0x0F12, 0x0060},   //70000BCA AFIT16_yuvemix_mPosRanges_0
-	{0x0F12, 0x0100},   //70000BCC AFIT16_yuvemix_mPosRanges_1
-	{0x0F12, 0x1430},   //70000BCE AFIT16_yuvemix_mPosRanges_2
-	{0x0F12, 0x0201},   //70000BD0 AFIT8_bnr_edge_low  [7:0] AFIT8_bnr_repl_thresh
-	{0x0F12, 0x0204},   //70000BD2 AFIT8_bnr_repl_force  [7:0] AFIT8_bnr_iHotThreshHigh
-	{0x0F12, 0x1504},   //70000BD4 AFIT8_bnr_iHotThreshLow   [7:0] AFIT8_bnr_iColdThreshHigh
-	{0x0F12, 0x030F},   //70000BD6 AFIT8_bnr_iColdThreshLow   [7:0] AFIT8_bnr_DispTH_Low
-	{0x0F12, 0x0003},   //70000BD8 AFIT8_bnr_DispTH_High   [7:0] AFIT8_bnr_DISP_Limit_Low
-	{0x0F12, 0x0902},   //70000BDA AFIT8_bnr_DISP_Limit_High   [7:0] AFIT8_bnr_iDistSigmaMin
-	{0x0F12, 0x2004},   //70000BDC AFIT8_bnr_iDistSigmaMax   [7:0] AFIT8_bnr_iDiffSigmaLow
-	{0x0F12, 0x0050},   //70000BDE AFIT8_bnr_iDiffSigmaHigh   [7:0] AFIT8_bnr_iNormalizedSTD_TH
-	{0x0F12, 0x1140},   //70000BE0 AFIT8_bnr_iNormalizedSTD_Limit   [7:0] AFIT8_bnr_iDirNRTune
-	{0x0F12, 0x201C},   //70000BE2 AFIT8_bnr_iDirMinThres   [7:0] AFIT8_bnr_iDirFltDiffThresHigh
-	{0x0F12, 0x0620},   //70000BE4 AFIT8_bnr_iDirFltDiffThresLow   [7:0] AFIT8_bnr_iDirSmoothPowerHigh
-	{0x0F12, 0x0306},   //70000BE6 AFIT8_bnr_iDirSmoothPowerLow   [7:0] AFIT8_bnr_iLowMaxSlopeAllowed
-	{0x0F12, 0x2003},   //70000BE8 AFIT8_bnr_iHighMaxSlopeAllowed   [7:0] AFIT8_bnr_iLowSlopeThresh
-	{0x0F12, 0xFF01},   //70000BEA AFIT8_bnr_iHighSlopeThresh   [7:0] AFIT8_bnr_iSlopenessTH
-	{0x0F12, 0x0404},   //70000BEC AFIT8_bnr_iSlopeBlurStrength   [7:0] AFIT8_bnr_iSlopenessLimit
-	{0x0F12, 0x0300},   //70000BEE AFIT8_bnr_AddNoisePower1   [7:0] AFIT8_bnr_AddNoisePower2
-	{0x0F12, 0x145A},   //70000BF0 AFIT8_bnr_iRadialTune   [7:0] AFIT8_bnr_iRadialPower
-	{0x0F12, 0x1010},   //70000BF2 AFIT8_bnr_iRadialLimit   [7:0] AFIT8_ee_iFSMagThLow
-	{0x0F12, 0x000B},   //70000BF4 AFIT8_ee_iFSMagThHigh   [7:0] AFIT8_ee_iFSVarThLow
-	{0x0F12, 0x1000},   //70000BF6 AFIT8_ee_iFSVarThHigh   [7:0] AFIT8_ee_iFSThLow
-	{0x0F12, 0x5A0F},   //70000BF8 AFIT8_ee_iFSThHigh   [7:0] AFIT8_ee_iFSmagPower
-	{0x0F12, 0x0503},   //70000BFA AFIT8_ee_iFSVarCountTh   [7:0] AFIT8_ee_iRadialLimit
-	{0x0F12, 0x1802},   //70000BFC AFIT8_ee_iRadialPower   [7:0] AFIT8_ee_iSmoothEdgeSlope
-	{0x0F12, 0x0000},   //70000BFE AFIT8_ee_iROADThres   [7:0] AFIT8_ee_iROADMaxNR
-	{0x0F12, 0x2006},   //70000C00 AFIT8_ee_iROADSubMaxNR   [7:0] AFIT8_ee_iROADSubThres
-	{0x0F12, 0x3C28},   //70000C02 AFIT8_ee_iROADNeiThres   [7:0] AFIT8_ee_iROADNeiMaxNR
-	{0x0F12, 0x042C},   //70000C04 AFIT8_ee_iSmoothEdgeThres   [7:0] AFIT8_ee_iMSharpen
-	{0x0F12, 0x0101},   //70000C06 AFIT8_ee_iWSharpen   [7:0] AFIT8_ee_iMShThresh
-	{0x0F12, 0x8000},   //70000C08 AFIT8_ee_iWShThresh   [7:0] AFIT8_ee_iReduceNegative
-	{0x0F12, 0x0904},   //70000C0A AFIT8_ee_iEmbossCentAdd   [7:0] AFIT8_ee_iShDespeckle
-	{0x0F12, 0x4008},   //70000C0C AFIT8_ee_iReduceEdgeThresh   [7:0] AFIT8_dmsc_iEnhThresh
-	{0x0F12, 0x0540},   //70000C0E AFIT8_dmsc_iDesatThresh   [7:0] AFIT8_dmsc_iDemBlurHigh
-	{0x0F12, 0x8006},   //70000C10 AFIT8_dmsc_iDemBlurLow   [7:0] AFIT8_dmsc_iDemBlurRange
-	{0x0F12, 0x0020},   //70000C12 AFIT8_dmsc_iDecisionThresh   [7:0] AFIT8_dmsc_iCentGrad
-	{0x0F12, 0x0000},   //70000C14 AFIT8_dmsc_iMonochrom   [7:0] AFIT8_dmsc_iGBDenoiseVal
-	{0x0F12, 0x1800},   //70000C16 AFIT8_dmsc_iGRDenoiseVal   [7:0] AFIT8_dmsc_iEdgeDesatThrHigh
-	{0x0F12, 0x0000},   //70000C18 AFIT8_dmsc_iEdgeDesatThrLow   [7:0] AFIT8_dmsc_iEdgeDesat
-	{0x0F12, 0x1E10},   //70000C1A AFIT8_dmsc_iNearGrayDesat   [7:0] AFIT8_dmsc_iEdgeDesatLimit
-	{0x0F12, 0x000B},   //70000C1C AFIT8_postdmsc_iBCoeff   [7:0] AFIT8_postdmsc_iGCoeff
-	{0x0F12, 0x0607},   //70000C1E AFIT8_postdmsc_iWideMult   [7:0] AFIT8_yuvemix_mNegSlopes_0
-	{0x0F12, 0x0005},   //70000C20 AFIT8_yuvemix_mNegSlopes_1   [7:0] AFIT8_yuvemix_mNegSlopes_2
-	{0x0F12, 0x0607},   //70000C22 AFIT8_yuvemix_mNegSlopes_3   [7:0] AFIT8_yuvemix_mPosSlopes_0
-	{0x0F12, 0x0405},   //70000C24 AFIT8_yuvemix_mPosSlopes_1   [7:0] AFIT8_yuvemix_mPosSlopes_2
-	{0x0F12, 0x0205},   //70000C26 AFIT8_yuvemix_mPosSlopes_3   [7:0] AFIT8_yuviirnr_iXSupportY
-	{0x0F12, 0x0304},   //70000C28 AFIT8_yuviirnr_iXSupportUV   [7:0] AFIT8_yuviirnr_iLowYNorm
-	{0x0F12, 0x0409},   //70000C2A AFIT8_yuviirnr_iHighYNorm   [7:0] AFIT8_yuviirnr_iLowUVNorm
-	{0x0F12, 0x0306},   //70000C2C AFIT8_yuviirnr_iHighUVNorm   [7:0] AFIT8_yuviirnr_iYNormShift
-	{0x0F12, 0x0407},   //70000C2E AFIT8_yuviirnr_iUVNormShift   [7:0] AFIT8_yuviirnr_iVertLength_Y
-	{0x0F12, 0x2804},   //70000C30 AFIT8_yuviirnr_iVertLength_UV   [7:0] AFIT8_yuviirnr_iDiffThreshL_Y
-	{0x0F12, 0x0228},   //70000C32 AFIT8_yuviirnr_iDiffThreshH_Y   [7:0] AFIT8_yuviirnr_iDiffThreshL_UV
-	{0x0F12, 0x1402},   //70000C34 AFIT8_yuviirnr_iDiffThreshH_UV   [7:0] AFIT8_yuviirnr_iMaxThreshL_Y
-	{0x0F12, 0x0618},   //70000C36 AFIT8_yuviirnr_iMaxThreshH_Y   [7:0] AFIT8_yuviirnr_iMaxThreshL_UV
-	{0x0F12, 0x1A02},   //70000C38 AFIT8_yuviirnr_iMaxThreshH_UV   [7:0] AFIT8_yuviirnr_iYNRStrengthL
-	{0x0F12, 0x8018},   //70000C3A AFIT8_yuviirnr_iYNRStrengthH   [7:0] AFIT8_yuviirnr_iUVNRStrengthL
-	{0x0F12, 0x0080},   //70000C3C AFIT8_yuviirnr_iUVNRStrengthH   [7:0] AFIT8_byr_gras_iShadingPower
-	{0x0F12, 0x1080},   //70000C3E AFIT8_RGBGamma2_iLinearity   [7:0] AFIT8_RGBGamma2_iDarkReduce
-	{0x0F12, 0x0180},   //70000C40 AFIT8_ccm_oscar_iSaturation   [7:0] AFIT8_RGB2YUV_iYOffset
-	{0x0F12, 0x0A0A},   //70000C42 AFIT8_RGB2YUV_iRGBGain   [7:0] AFIT8_bnr_nClustLevel_H
-	{0x0F12, 0x0101},   //70000C44 AFIT8_bnr_iClustMulT_H   [7:0] AFIT8_bnr_iClustMulT_C
-	{0x0F12, 0x1117},   //70000C46 AFIT8_bnr_iClustThresh_H   [7:0] AFIT8_bnr_iClustThresh_C
-	{0x0F12, 0x6024},   //70000C48 AFIT8_bnr_iDenThreshLow   [7:0] AFIT8_bnr_iDenThreshHigh
-	{0x0F12, 0x0A0A},   //70000C4A AFIT8_ee_iLowSharpPower   [7:0] AFIT8_ee_iHighSharpPower
-	{0x0F12, 0xFFFF},   //70000C4C AFIT8_ee_iLowShDenoise   [7:0] AFIT8_ee_iHighShDenoise
-	{0x0F12, 0x0808},   //70000C4E AFIT8_ee_iLowSharpClamp   [7:0] AFIT8_ee_iHighSharpClamp
-	{0x0F12, 0x0A01},   //70000C50 AFIT8_ee_iReduceEdgeMinMult   [7:0] AFIT8_ee_iReduceEdgeSlope
-	{0x0F12, 0x010A},   //70000C52 AFIT8_bnr_nClustLevel_H_Bin   [7:0] AFIT8_bnr_iClustMulT_H_Bin
-	{0x0F12, 0x1501},   //70000C54 AFIT8_bnr_iClustMulT_C_Bin   [7:0] AFIT8_bnr_iClustThresh_H_Bin
-	{0x0F12, 0x240F},   //70000C56 AFIT8_bnr_iClustThresh_C_Bin   [7:0] AFIT8_bnr_iDenThreshLow_Bin
-	{0x0F12, 0x0A60},   //70000C58 AFIT8_bnr_iDenThreshHigh_Bin   [7:0] AFIT8_ee_iLowSharpPower_Bin
-	{0x0F12, 0xFF0A},   //70000C5A AFIT8_ee_iHighSharpPower_Bin   [7:0] AFIT8_ee_iLowShDenoise_Bin
-	{0x0F12, 0x08FF},   //70000C5C AFIT8_ee_iHighShDenoise_Bin   [7:0] AFIT8_ee_iLowSharpClamp_Bin
-	{0x0F12, 0x0008},   //70000C5E AFIT8_ee_iHighSharpClamp_Bin   [7:0] AFIT8_ee_iReduceEdgeMinMult_Bin
-	{0x0F12, 0x0001},   //70000C60 AFIT8_ee_iReduceEdgeSlope_Bin [7:0]
-	                    //70000C62 AFITB_bnr_nClustLevel_C      [0]
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},   //70000C64 AFIT16_BRIGHTNESS
-	{0x0F12, 0x0000},   //70000C66 AFIT16_CONTRAST
-	{0x0F12, 0x0000},   //70000C68 AFIT16_SATURATION
-	{0x0F12, 0x00C0},   //70000C6A AFIT16_SHARP_BLUR
-	{0x0F12, 0x0064},   //70000C6C AFIT16_GLAMOUR
-	{0x0F12, 0x0384},   //70000C6E AFIT16_bnr_edge_high
-	{0x0F12, 0x0032},   //70000C70 AFIT16_postdmsc_iLowBright
-	{0x0F12, 0x01F4},   //70000C72 AFIT16_postdmsc_iHighBright
-	{0x0F12, 0x0070},   //70000C74 AFIT16_postdmsc_iLowSat
-	{0x0F12, 0x0040},   //70000C76 AFIT16_postdmsc_iHighSat
-	{0x0F12, 0x00A0},   //70000C78 AFIT16_postdmsc_iTune
-	{0x0F12, 0x0100},   //70000C7A AFIT16_yuvemix_mNegRanges_0
-	{0x0F12, 0x0010},   //70000C7C AFIT16_yuvemix_mNegRanges_1
-	{0x0F12, 0x0060},   //70000C7E AFIT16_yuvemix_mNegRanges_2
-	{0x0F12, 0x0100},   //70000C80 AFIT16_yuvemix_mPosRanges_0
-	{0x0F12, 0x1430},   //70000C82 AFIT16_yuvemix_mPosRanges_1
-	{0x0F12, 0x0201},   //70000C84 AFIT16_yuvemix_mPosRanges_2
-	{0x0F12, 0x0204},   //70000C86 AFIT8_bnr_edge_low  [7:0] AFIT8_bnr_repl_thresh
-	{0x0F12, 0x0F04},   //70000C88 AFIT8_bnr_repl_force  [7:0] AFIT8_bnr_iHotThreshHigh
-	{0x0F12, 0x030C},   //70000C8A AFIT8_bnr_iHotThreshLow   [7:0] AFIT8_bnr_iColdThreshHigh
-	{0x0F12, 0x0003},   //70000C8C AFIT8_bnr_iColdThreshLow   [7:0] AFIT8_bnr_DispTH_Low
-	{0x0F12, 0x0602},   //70000C8E AFIT8_bnr_DispTH_High   [7:0] AFIT8_bnr_DISP_Limit_Low
-	{0x0F12, 0x1803},   //70000C90 AFIT8_bnr_DISP_Limit_High   [7:0] AFIT8_bnr_iDistSigmaMin
-	{0x0F12, 0x0040},   //70000C92 AFIT8_bnr_iDistSigmaMax   [7:0] AFIT8_bnr_iDiffSigmaLow
-	{0x0F12, 0x0E20},   //70000C94 AFIT8_bnr_iDiffSigmaHigh   [7:0] AFIT8_bnr_iNormalizedSTD_TH
-	{0x0F12, 0x2018},   //70000C96 AFIT8_bnr_iNormalizedSTD_Limit   [7:0] AFIT8_bnr_iDirNRTune
-	{0x0F12, 0x0620},   //70000C98 AFIT8_bnr_iDirMinThres   [7:0] AFIT8_bnr_iDirFltDiffThresHigh
-	{0x0F12, 0x0306},   //70000C9A AFIT8_bnr_iDirFltDiffThresLow   [7:0] AFIT8_bnr_iDirSmoothPowerHigh
-	{0x0F12, 0x2003},   //70000C9C AFIT8_bnr_iDirSmoothPowerLow   [7:0] AFIT8_bnr_iLowMaxSlopeAllowed
-	{0x0F12, 0xFF01},   //70000C9E AFIT8_bnr_iHighMaxSlopeAllowed   [7:0] AFIT8_bnr_iLowSlopeThresh
-	{0x0F12, 0x0404},   //70000CA0 AFIT8_bnr_iHighSlopeThresh   [7:0] AFIT8_bnr_iSlopenessTH
-	{0x0F12, 0x0200},   //70000CA2 AFIT8_bnr_iSlopeBlurStrength   [7:0] AFIT8_bnr_iSlopenessLimit
-	{0x0F12, 0x145A},   //70000CA4 AFIT8_bnr_AddNoisePower1   [7:0] AFIT8_bnr_AddNoisePower2
-	{0x0F12, 0x1010},   //70000CA6 AFIT8_bnr_iRadialTune   [7:0] AFIT8_bnr_iRadialPower
-	{0x0F12, 0x000B},   //70000CA8 AFIT8_bnr_iRadialLimit   [7:0] AFIT8_ee_iFSMagThLow
-	{0x0F12, 0x1200},   //70000CAA AFIT8_ee_iFSMagThHigh   [7:0] AFIT8_ee_iFSVarThLow
-	{0x0F12, 0x5A0F},   //70000CAC AFIT8_ee_iFSVarThHigh   [7:0] AFIT8_ee_iFSThLow
-	{0x0F12, 0x0502},   //70000CAE AFIT8_ee_iFSThHigh   [7:0] AFIT8_ee_iFSmagPower
-	{0x0F12, 0x1802},   //70000CB0 AFIT8_ee_iFSVarCountTh   [7:0] AFIT8_ee_iRadialLimit
-	{0x0F12, 0x0000},   //70000CB2 AFIT8_ee_iRadialPower   [7:0] AFIT8_ee_iSmoothEdgeSlope
-	{0x0F12, 0x2006},   //70000CB4 AFIT8_ee_iROADThres   [7:0] AFIT8_ee_iROADMaxNR
-	{0x0F12, 0x4028},   //70000CB6 AFIT8_ee_iROADSubMaxNR   [7:0] AFIT8_ee_iROADSubThres
-	{0x0F12, 0x0430},   //70000CB8 AFIT8_ee_iROADNeiThres   [7:0] AFIT8_ee_iROADNeiMaxNR
-	{0x0F12, 0x0101},   //70000CBA AFIT8_ee_iSmoothEdgeThres   [7:0] AFIT8_ee_iMSharpen
-	{0x0F12, 0xFF00},   //70000CBC AFIT8_ee_iWSharpen   [7:0] AFIT8_ee_iMShThresh
-	{0x0F12, 0x0804},   //70000CBE AFIT8_ee_iWShThresh   [7:0] AFIT8_ee_iReduceNegative
-	{0x0F12, 0x4008},   //70000CC0 AFIT8_ee_iEmbossCentAdd   [7:0] AFIT8_ee_iShDespeckle
-	{0x0F12, 0x0540},   //70000CC2 AFIT8_ee_iReduceEdgeThresh   [7:0] AFIT8_dmsc_iEnhThresh
-	{0x0F12, 0x8006},   //70000CC4 AFIT8_dmsc_iDesatThresh   [7:0] AFIT8_dmsc_iDemBlurHigh
-	{0x0F12, 0x0020},   //70000CC6 AFIT8_dmsc_iDemBlurLow   [7:0] AFIT8_dmsc_iDemBlurRange
-	{0x0F12, 0x0000},   //70000CC8 AFIT8_dmsc_iDecisionThresh   [7:0] AFIT8_dmsc_iCentGrad
-	{0x0F12, 0x1800},   //70000CCA AFIT8_dmsc_iMonochrom   [7:0] AFIT8_dmsc_iGBDenoiseVal
-	{0x0F12, 0x0000},   //70000CCC AFIT8_dmsc_iGRDenoiseVal   [7:0] AFIT8_dmsc_iEdgeDesatThrHigh
-	{0x0F12, 0x1E10},   //70000CCE AFIT8_dmsc_iEdgeDesatThrLow   [7:0] AFIT8_dmsc_iEdgeDesat
-	{0x0F12, 0x000B},   //70000CD0 AFIT8_dmsc_iNearGrayDesat   [7:0] AFIT8_dmsc_iEdgeDesatLimit
-	{0x0F12, 0x0607},   //70000CD2 AFIT8_postdmsc_iBCoeff   [7:0] AFIT8_postdmsc_iGCoeff
-	{0x0F12, 0x0005},   //70000CD4 AFIT8_postdmsc_iWideMult   [7:0] AFIT8_yuvemix_mNegSlopes_0
-	{0x0F12, 0x0607},   //70000CD6 AFIT8_yuvemix_mNegSlopes_1   [7:0] AFIT8_yuvemix_mNegSlopes_2
-	{0x0F12, 0x0405},   //70000CD8 AFIT8_yuvemix_mNegSlopes_3   [7:0] AFIT8_yuvemix_mPosSlopes_0
-	{0x0F12, 0x0205},   //70000CDA AFIT8_yuvemix_mPosSlopes_1   [7:0] AFIT8_yuvemix_mPosSlopes_2
-	{0x0F12, 0x0304},   //70000CDC AFIT8_yuvemix_mPosSlopes_3   [7:0] AFIT8_yuviirnr_iXSupportY
-	{0x0F12, 0x0409},   //70000CDE AFIT8_yuviirnr_iXSupportUV   [7:0] AFIT8_yuviirnr_iLowYNorm
-	{0x0F12, 0x0306},   //70000CE0 AFIT8_yuviirnr_iHighYNorm   [7:0] AFIT8_yuviirnr_iLowUVNorm
-	{0x0F12, 0x0407},   //70000CE2 AFIT8_yuviirnr_iHighUVNorm   [7:0] AFIT8_yuviirnr_iYNormShift
-	{0x0F12, 0x2C04},   //70000CE4 AFIT8_yuviirnr_iUVNormShift   [7:0] AFIT8_yuviirnr_iVertLength_Y
-	{0x0F12, 0x022C},   //70000CE6 AFIT8_yuviirnr_iVertLength_UV   [7:0] AFIT8_yuviirnr_iDiffThreshL_Y
-	{0x0F12, 0x1402},   //70000CE8 AFIT8_yuviirnr_iDiffThreshH_Y   [7:0] AFIT8_yuviirnr_iDiffThreshL_UV
-	{0x0F12, 0x0618},   //70000CEA AFIT8_yuviirnr_iDiffThreshH_UV   [7:0] AFIT8_yuviirnr_iMaxThreshL_Y
-	{0x0F12, 0x1A02},   //70000CEC AFIT8_yuviirnr_iMaxThreshH_Y   [7:0] AFIT8_yuviirnr_iMaxThreshL_UV
-	{0x0F12, 0x8018},   //70000CEE AFIT8_yuviirnr_iMaxThreshH_UV   [7:0] AFIT8_yuviirnr_iYNRStrengthL
-	{0x0F12, 0x0080},   //70000CF0 AFIT8_yuviirnr_iYNRStrengthH   [7:0] AFIT8_yuviirnr_iUVNRStrengthL
-	{0x0F12, 0x1080},   //70000CF2 AFIT8_yuviirnr_iUVNRStrengthH   [7:0] AFIT8_byr_gras_iShadingPower
-	{0x0F12, 0x0180},   //70000CF4 AFIT8_RGBGamma2_iLinearity   [7:0] AFIT8_RGBGamma2_iDarkReduce
-	{0x0F12, 0x0A0A},   //70000CF6 AFIT8_ccm_oscar_iSaturation   [7:0] AFIT8_RGB2YUV_iYOffset
-	{0x0F12, 0x0101},   //70000CF8 AFIT8_RGB2YUV_iRGBGain   [7:0] AFIT8_bnr_nClustLevel_H
-	{0x0F12, 0x0C0F},   //70000CFA AFIT8_bnr_iClustMulT_H   [7:0] AFIT8_bnr_iClustMulT_C
-	{0x0F12, 0x6024},   //70000CFC AFIT8_bnr_iClustThresh_H   [7:0] AFIT8_bnr_iClustThresh_C
-	{0x0F12, 0x0808},   //70000CFE AFIT8_bnr_iDenThreshLow   [7:0] AFIT8_bnr_iDenThreshHigh
-	{0x0F12, 0xFFFF},   //70000D00 AFIT8_ee_iLowSharpPower   [7:0] AFIT8_ee_iHighSharpPower
-	{0x0F12, 0x0808},   //70000D02 AFIT8_ee_iLowShDenoise   [7:0] AFIT8_ee_iHighShDenoise
-	{0x0F12, 0x0A01},   //70000D04 AFIT8_ee_iLowSharpClamp   [7:0] AFIT8_ee_iHighSharpClamp
-	{0x0F12, 0x010A},   //70000D06 AFIT8_ee_iReduceEdgeMinMult   [7:0] AFIT8_ee_iReduceEdgeSlope
-	{0x0F12, 0x0F01},   //70000D08 AFIT8_bnr_nClustLevel_H_Bin   [7:0] AFIT8_bnr_iClustMulT_H_Bin
-	{0x0F12, 0x240C},   //70000D0A AFIT8_bnr_iClustMulT_C_Bin   [7:0] AFIT8_bnr_iClustThresh_H_Bin
-	{0x0F12, 0x0860},   //70000D0C AFIT8_bnr_iClustThresh_C_Bin   [7:0] AFIT8_bnr_iDenThreshLow_Bin
-	{0x0F12, 0xFF08},   //70000D0E AFIT8_bnr_iDenThreshHigh_Bin   [7:0] AFIT8_ee_iLowSharpPower_Bin
-	{0x0F12, 0x08FF},   //70000D10 AFIT8_ee_iHighSharpPower_Bin   [7:0] AFIT8_ee_iLowShDenoise_Bin
-	{0x0F12, 0x0008},   //70000D12 AFIT8_ee_iHighShDenoise_Bin   [7:0] AFIT8_ee_iLowSharpClamp_Bin
-	{0x0F12, 0x0001},   //70000D14 AFIT8_ee_iHighSharpClamp_Bin   [7:0] AFIT8_ee_iReduceEdgeMinMult_Bin
-                      //70000D16 AFIT8_ee_iReduceEdgeSlope_Bin [7:0]
-                      //70000D18 AFITB_bnr_nClustLevel_C      [0]   bWideWide[1]
-	{0x002A, 0x060C},
-	{0x0F12, 0x0940},
-
-	{0x0028, 0xD000},
-	{0x002A, 0xE410},
-	{0x0F12, 0x3E01},
-	{0x0028, 0x7000},
-	{0x002A, 0x18AC},
-	{0x0F12, 0x0060},
-	{0x0f12, 0x0060},
-	{0x0f12, 0x07DC},
-	{0x0f12, 0x05C0},
-
-	{0x002A, 0x02A6},
-	{0x0F12, 0x0500},
-	{0x0f12, 0x02D0},
-
-	{0x002A, 0x0250},
-	{0x0F12, 0x0A00},
-	{0x0F12, 0x05A0},
-	{0x0F12, 0x0010},
-	{0x0F12, 0x00F0},
-	{0x0F12, 0x0A00},
-	{0x0F12, 0x05A0},
-	{0x0F12, 0x0010},
-	{0x0F12, 0x00F0},
-	{0x002A, 0x0494},
-	{0x0F12, 0x0A00},
-	{0x0F12, 0x05A0},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0A00},
-	{0x0F12, 0x05A0},
-	{0x0F12, 0x0000},
-	{0x0F12, 0x0000},
-
-	{0x002A, 0x0262},
-	{0x0F12, 0x0001},
-	{0x0F12, 0x0001},
-
-	{0x002A, 0x0266},
-	{0x0F12, 0x0000},
-	{0x002A, 0x026A},
-	{0x0F12, 0x0001},
-	{0x002A, 0x024E},
-	{0x0F12, 0x0001},
-	{0x002A, 0x0268},
-	{0x0F12, 0x0001},
-	{0x002A, 0x0270},
-	{0x0F12, 0x0001},
-	{0x002A, 0x023E},
-	{0x0F12, 0x0001},
-	{0x0F12, 0x0001},
-};
-
-//1280X960  YUV   Mode
-LOCAL const SENSOR_REG_T s5k4ec_1280X960[] =
-{
-	{0xFCFC, 0xD000},
-	{0x0028, 0x7000},
-	{0x002A, 0x0258},
-	{0x0F12, 0x0A00},	//REG_TC_GP_CapReqInputWidth //2560
-	{0x0F12, 0x0600},	//REG_TC_GP_CapReqInputHeight //1536
-	{0x0F12, 0x0010},	//REG_TC_GP_CapInputWidthOfs //(2592-2560)/2
-	{0x0F12, 0x00CC},	//REG_TC_GP_CapInputHeightOfs //(1944-1536)/2
-
-	{0x002A, 0x0264},
-	{0x0F12, 0x0001},	//REG_TC_GP_bUseReqInputInCap
-
-	{0x002A, 0x049C},
-	{0x0F12, 0x0A00},	//REG_TC_PZOOM_CapZoomReqInputWidth //2560
-	{0x0F12, 0x0600},	//REG_TC_PZOOM_CapZoomReqInputHeight //1536
-	{0x0F12, 0x0000},	//REG_TC_PZOOM_CapZoomReqInputWidthOfs
-	{0x0F12, 0x0000},	//REG_TC_PZOOM_CapZoomReqInputHeightOfs
-
-	{0x002A, 0x047C},
-	{0x0F12, 0x0001},	//REG_TC_THUMB_Thumb_bActive
-	{0x0F12, 0x0320},	//REG_TC_THUMB_Thumb_uWidth //800
-	{0x0F12, 0x01E0},	//REG_TC_THUMB_Thumb_uHeight //480
-
-	{0x002A, 0x0398},
-	{0x0F12, 0x0640},	//REG_0TC_CCFG_usWidth //1600
-	{0x0F12, 0x03C0},	//REG_0TC_CCFG_usHeight //960
-
-	{0x002A, 0x024E},
-	{0x0F12, 0x0001},	//REG_TC_GP_NewConfigSync
-	{0x002A, 0x0270},
-	{0x0F12, 0x0001},	//REG_TC_GP_CapConfigChanged
-};
-
-//1600X1200  YUV   Mode
-LOCAL const SENSOR_REG_T s5k4ec_1600X1200[] =
-{
-// 1600 1200 capture
-	{0xFCFC, 0xD000},
-	{0x0028, 0x7000},
-	{0x002A, 0x0258},
-	{0x0F12, 0x0A00}, 	  /*REG_TC_GP_CapReqInputWidth 2560 */
-	{0x0F12, 0x0780}, 	  /*REG_TC_GP_CapReqInputHeight 1920 */
-	{0x0F12, 0x0010}, 	  /*REG_TC_GP_CapInputWidthOfs (2592-2560)/2 */
-	{0x0F12, 0x000C}, 	  /*REG_TC_GP_CapInputHeightOfs (1944-1920)/2 */
-
-	{0x002A, 0x0264},
-	{0x0F12, 0x0001}, 	  /*REG_TC_GP_bUseReqInputInCap */
-
-	{0x002A, 0x049C},
-	{0x0F12, 0x0A00}, 	  /*REG_TC_PZOOM_CapZoomReqInputWidth 2560 */
-	{0x0F12, 0x0780}, 	  /*REG_TC_PZOOM_CapZoomReqInputHeight 1920 */
-	{0x0F12, 0x0000}, 	  /*REG_TC_PZOOM_CapZoomReqInputWidthOfs */
-	{0x0F12, 0x0000}, 	  /*REG_TC_PZOOM_CapZoomReqInputHeightOfs */
-
-	{0x002A, 0x047C},
-	{0x0F12, 0x0001}, 	  /*REG_TC_THUMB_Thumb_bActive */
-	{0x0F12, 0x0280}, 	  /*REG_TC_THUMB_Thumb_uWidth 640 */
-	{0x0F12, 0x01E0}, 	  /*REG_TC_THUMB_Thumb_uHeight 480 */
-
-	{0x002A, 0x0398},
-	{0x0F12, 0x0640}, 	  /*REG_0TC_CCFG_usWidth 1600 */
-	{0x0F12, 0x04B0}, 	  /*REG_0TC_CCFG_usHeight 1200 */
-
-	{0x002A, 0x024E},
-	{0x0F12, 0x0001}, 	  /*REG_TC_GP_NewConfigSync */
-	{0x002A, 0x0270},
-	{0x0F12, 0x0001}, 	  /*REG_TC_GP_CapConfigChanged */
-};
+// Additional functions
+LOCAL uint32_t s5k4ec_I2C_write(SENSOR_REG_T* sensor_reg_ptr);
+LOCAL uint32_t s5k4ec_lightcheck();
+LOCAL uint32_t s5k4ec_set_Metering(uint32_t metering_mode);
+LOCAL uint32_t s5k4ec_set_sharpness(uint32_t level);
+LOCAL uint32_t s5k4ec_flash(uint32_t param);
+LOCAL uint32_t s5k4ec_get_ISO_rate();
+LOCAL uint32_t s5k4ec_get_shutter_speed();
+LOCAL uint32_t s5k4ecgx_set_focus_mode(uint32_t mode);
+LOCAL uint32_t __s5k4ecgx_set_focus_mode(uint32_t mode); // Force-set
+LOCAL uint16_t s5k4ecgx_get_frame_time();
+LOCAL uint32_t s5k4ec_wait_until_ae_stable();
+
+LOCAL uint32_t s5k4ecgx_fast_ae(uint32_t on);
+LOCAL uint32_t s5k4ec_preflash_af(uint32_t on);
+LOCAL uint32_t s5k4ec_main_flash(uint32_t on);
+LOCAL uint32_t s5k4ec_low_light_AF_check();
+LOCAL uint32_t s5k4ec_set_FPS(uint32_t fps);
+LOCAL uint32_t s5k4ec_set_FPS_mode(uint32_t fps_mode);
 
-//20480X1536  YUV   Mode
-LOCAL const SENSOR_REG_T s5k4ec_2048X1536[] =
-{
-	{0xFCFC, 0xD000},
-	{0x0028, 0x7000},
-	{0x002A, 0x0258},
-	{0x0F12, 0x0A00}, 	  /*REG_TC_GP_CapReqInputWidth 2560 */
-	{0x0F12, 0x0780}, 	  /*REG_TC_GP_CapReqInputHeight 1920 */
-	{0x0F12, 0x0010}, 	  /*REG_TC_GP_CapInputWidthOfs (2592-2560)/2 */
-	{0x0F12, 0x000C}, 	  /*REG_TC_GP_CapInputHeightOfs (1944-1920)/2 */
-
-	{0x002A, 0x0264},
-	{0x0F12, 0x0001}, 	  /*REG_TC_GP_bUseReqInputInCap */
-
-	{0x002A, 0x049C},
-	{0x0F12, 0x0A00}, 	  /*REG_TC_PZOOM_CapZoomReqInputWidth 2560 */
-	{0x0F12, 0x0780}, 	  /*REG_TC_PZOOM_CapZoomReqInputHeight 1920 */
-	{0x0F12, 0x0000}, 	  /*REG_TC_PZOOM_CapZoomReqInputWidthOfs */
-	{0x0F12, 0x0000}, 	  /*REG_TC_PZOOM_CapZoomReqInputHeightOfs */
-
-	{0x002A, 0x047C},
-	{0x0F12, 0x0001}, 	  /*REG_TC_THUMB_Thumb_bActive */
-	{0x0F12, 0x0280}, 	  /*REG_TC_THUMB_Thumb_uWidth 640 */
-	{0x0F12, 0x01E0}, 	  /*REG_TC_THUMB_Thumb_uHeight 480 */
-
-	{0x002A, 0x0398},
-	{0x0F12, 0x0800}, 	  /*REG_0TC_CCFG_usWidth 2048 */
-	{0x0F12, 0x0600}, 	  /*REG_0TC_CCFG_usHeight 1536 */
-
-	{0x002A, 0x024E},
-	{0x0F12, 0x0001}, 	  /*REG_TC_GP_NewConfigSync */
-	{0x002A, 0x0270},
-	{0x0F12, 0x0001}, 	  /*REG_TC_GP_CapConfigChanged */
-};
-//2592X1944  YUV   Mode
-LOCAL const SENSOR_REG_T s5k4ec_2592X1944[] =
-{
-	{0xFCFC, 0xD000},
-	{0x0028, 0x7000},
-	{0x002A, 0x0258},
-	{0x0F12, 0x0A00},		/*REG_TC_GP_CapReqInputWidth 2560 */
-	{0x0F12, 0x0780},		/*REG_TC_GP_CapReqInputHeight 1920 */
-	{0x0F12, 0x0010},		/*REG_TC_GP_CapInputWidthOfs (2592-2560)/2 */
-	{0x0F12, 0x000C},		/*REG_TC_GP_CapInputHeightOfs (1944-1920)/2 */
-
-	{0x002A, 0x0264},
-	{0x0F12, 0x0001},		/*REG_TC_GP_bUseReqInputInCap */
-
-	{0x002A, 0x049C},
-	{0x0F12, 0x0A00},		/*REG_TC_PZOOM_CapZoomReqInputWidth 2560 */
-	{0x0F12, 0x0780},		/*REG_TC_PZOOM_CapZoomReqInputHeight 1920 */
-	{0x0F12, 0x0000},		/*REG_TC_PZOOM_CapZoomReqInputWidthOfs */
-	{0x0F12, 0x0000},		/*REG_TC_PZOOM_CapZoomReqInputHeightOfs */
-
-	{0x002A, 0x047C},
-	{0x0F12, 0x0001},		/*REG_TC_THUMB_Thumb_bActive */
-	{0x0F12, 0x0280},		/*REG_TC_THUMB_Thumb_uWidth 640 */
-	{0x0F12, 0x01E0},		/*REG_TC_THUMB_Thumb_uHeight 480 */
-
-	{0x002A, 0x0398},
-	{0x0F12, 0x0A00},		/*REG_0TC_CCFG_usWidth 2560 */
-	{0x0F12, 0x0780},		/*REG_0TC_CCFG_usHeight 1920 */
-
-	{0x002A, 0x024E},
-	{0x0F12, 0x0001},		/*REG_TC_GP_NewConfigSync */
-	{0x002A, 0x0270},
-	{0x0F12, 0x0001},		/*REG_TC_GP_CapConfigChanged */
-};
+LOCAL EXIF_SPEC_PIC_TAKING_COND_T s_s5k4ec_exif;
 
 LOCAL SENSOR_REG_TAB_INFO_T s_s5k4ec_resolution_Tab_YUV[] = {
 	//COMMON INIT
@@ -4582,8 +114,10 @@ LOCAL SENSOR_REG_TAB_INFO_T s_s5k4ec_resolution_Tab_YUV[] = {
 	//YUV422 PREVIEW 1
 	{ADDR_AND_LEN_OF_ARRAY(s5k4ec_640X480), 640, 480, 24, SENSOR_IMAGE_FORMAT_YUV422},
 	{ADDR_AND_LEN_OF_ARRAY(s5k4ec_1280X720), 1280, 720, 24, SENSOR_IMAGE_FORMAT_YUV422},
-	{ADDR_AND_LEN_OF_ARRAY(s5k4ec_2592X1944), 2560, 1920, 24,	 SENSOR_IMAGE_FORMAT_YUV422},
+	{ADDR_AND_LEN_OF_ARRAY(s5k4ec_2592X1944), 2560, 1920, 24, SENSOR_IMAGE_FORMAT_YUV422},
 	{PNULL, 0, 0, 0, 0, 0},
+
+	//YUV422 PREVIEW 2
 	{PNULL, 0, 0, 0, 0, 0},
 	{PNULL, 0, 0, 0, 0, 0},
 	{PNULL, 0, 0, 0, 0, 0},
@@ -4592,20 +126,54 @@ LOCAL SENSOR_REG_TAB_INFO_T s_s5k4ec_resolution_Tab_YUV[] = {
 	{PNULL, 0, 0, 0, 0, 0}
 };
 
-LOCAL uint32_t s5k4ec_set_ae_enable(uint32_t enable)
+LOCAL uint32_t s5k4ec_set_awb_enable(uint32_t enable)
 {
-	return 0;
-}
+	uint16_t unlock = 1;
+
+	if (enable == 1) {
+		SENSOR_PRINT_HIGH("Unlock AWB");
+		unlock = 1;
+	} else if (enable == 0) {
+		SENSOR_PRINT_HIGH("Lock AWB");
+		unlock = 0;
+	} else {
+		SENSOR_PRINT_HIGH("Undefined parameter %u", enable);
+		return SENSOR_OP_PARAM_ERR;
+	}
+
+	Sensor_WriteReg(0xFCFC, 0xD000);
+	Sensor_WriteReg(0x0028, 0x7000);
+	Sensor_WriteReg(0x002A, 0x2c66);
+	Sensor_WriteReg(0x0F12, unlock);
 
-LOCAL uint32_t s5k4ec_set_hmirror_enable(uint32_t enable)
-{
 	return 0;
 }
 
-LOCAL uint32_t s5k4ec_set_vmirror_enable(uint32_t enable)
+LOCAL uint32_t s5k4ec_set_ae_enable(uint32_t enable)
 {
+	uint16_t unlock = 1;
+
+	if (enable == 1) {
+		SENSOR_PRINT_HIGH("Unlock AE");
+		unlock = 1;
+	} else if (enable == 0) {
+		SENSOR_PRINT_HIGH("Lock AE");
+		unlock = 0;
+	} else {
+		SENSOR_PRINT_HIGH("Undefined parameter %u", enable);
+		return SENSOR_OP_PARAM_ERR;
+	}
+
+	Sensor_WriteReg(0xFCFC, 0xD000);
+	Sensor_WriteReg(0x0028, 0x7000);
+	Sensor_WriteReg(0x002A, 0x2C5E);
+	Sensor_WriteReg(0x0F12, unlock);
+
+	s5k4ec_set_awb_enable(enable);
+
 	return 0;
 }
+
 LOCAL SENSOR_TRIM_T s_s5k4ec_Resolution_Trim_Tab[]=
 {
 	// COMMON INIT
@@ -4622,7 +190,7 @@ LOCAL SENSOR_TRIM_T s_s5k4ec_Resolution_Trim_Tab[]=
 	{0, 0, 0, 0, 0, 0, 0, {0, 0, 0, 0}},
 	{0, 0, 0, 0, 0, 0, 0, {0, 0, 0, 0}}
 };
-LOCAL EXIF_SPEC_PIC_TAKING_COND_T s_s5k4ec_exif;
+
 LOCAL SENSOR_IOCTL_FUNC_TAB_T s_s5k4ec_ioctl_func_tab =
 {
 	// Internal
@@ -4636,54 +204,45 @@ LOCAL SENSOR_IOCTL_FUNC_TAB_T s_s5k4ec_ioctl_func_tab =
 	_s5k4ec_GetResolutionTrimTab,//PNULL,/*7*/
 
 	// External
-	PNULL,/*8*///s5k4ec_set_ae_enable,
-	PNULL,/*9*///s5k4ec_set_hmirror_enable,
-	PNULL,/*10*///s5k4ec_set_vmirror_enable,
-	PNULL,//_s5k4ec_set_brightness,//PNULL,//    s5k4ec_set_brightness,/*11*/
-	_s5k4ec_set_contrast,//PNULL,//    s5k4ec_set_contrast,/*12*/
-	PNULL,/*13*///s5k4ec_set_sharpness,
-	PNULL,//_s5k4ec_set_saturation,//PNULL,/*14*///s5k4ec_set_saturation,
-	PNULL,//_s5k4ec_set_work_mode,//PNULL,//    s5k4ec_set_scene_mode ,/*15*///s5k4ec_set_preview_mode,
-	PNULL,//_s5k4ec_set_image_effect,//PNULL,//    s5k4ec_set_image_effect,/*16*/
-	_s5k4ec_BeforeSnapshot,//PNULL,//    s5k4ec_BeforeSnapshot,/*17*/
-	_s5k4ec_after_snapshot,//PNULL,//    s5k4ec_after_snapshot,/*18*/
-	PNULL,//_s5k4ec_flash,//PNULL,/*19*/
+	s5k4ec_set_ae_enable,/*8*/
+	PNULL,/*9*/
+	PNULL,/*10*/
+	_s5k4ec_set_brightness,/*11*/
+	_s5k4ec_set_contrast,/*12*/
+	s5k4ec_set_sharpness,/*13*/
+	_s5k4ec_set_saturation,/*14*/
+	_s5k4ec_set_scene_mode,/*15*/
+	_s5k4ec_set_image_effect,/*16*/
+	_s5k4ec_BeforeSnapshot,/*17*/
+	_s5k4ec_after_snapshot,/*18*/
+	s5k4ec_flash,//PNULL,/*19*/
 	PNULL,/*20*///read_ae_value
 	PNULL,/*21*///write_ae_value
 	PNULL,/*22*///read_gain_value
 	PNULL,/*23*///write_gain_value
 	PNULL,/*24*///read_gain_scale
-	PNULL,//    set_frame_rate,/*25*/
-	PNULL,//    af_enable/*26*/
-	PNULL,//    af_get_status,/*27*/
-	PNULL,//_s5k4ec_set_awb,//PNULL,//    s5k4ec_set_awb,/*28*/
-	PNULL,//   get_skip_frame,/*29*/
-	PNULL,//_s5k4ec_set_iso,/*30*///iso
-	PNULL,//_s5k4ec_set_ev,//PNULL,/*31*///exposure
+	PNULL,/*25*///set_frame_rate
+	s5k4ecgx_set_focus_mode,/*26*///af_enable
+	PNULL,/*27*///af_get_status
+	_s5k4ec_set_awb,/*28*/
+	PNULL,/*29*///get_skip_frame
+	_s5k4ec_set_iso,/*30*///iso
+	_s5k4ec_set_ev,/*31*///exposure
 	PNULL,//_s5k4ec_check_image_format_support,//PNULL,/*32*///check_image_format_support
-	PNULL,/*33*///change_image_format)
-	PNULL,/*34*/ //set_zoom
-	PNULL,//_s5k4ec_GetExifInfo,//PNULL,/*35*/// set_focus
-	_s5k4ec_ExtFunc,//PNULL,/*36*///get_exif
-	PNULL,//_s5k4ec_set_anti_flicker,//PNULL,/*37*///set_anti_banding_flicker
-	PNULL,//_s5k4ec_set_video_mode,//PNULL,/*38*/// set_video_mode
+	PNULL,/*33*///change_image_format
+	PNULL,/*34*///set_zoom
+	_s5k4ec_GetExifInfo,//PNULL,/*35*///get_exif
+	_s5k4ec_ExtFunc,//PNULL,/*36*///set_focus
+	_s5k4ec_set_anti_flicker,/*37*///set_anti_banding_flicker
+	_s5k4ec_set_video_mode,/*38*///set_video_mode
 	PNULL,//_s5k4ec_pick_out_jpeg_stream,//PNULL,/*39*///pick_jpeg_stream
-	PNULL,//    s5k4ec_set_Metering,/*40*///set_meter_mode
+	s5k4ec_set_Metering,/*40*///set_meter_mode
 	PNULL, /*41*///get_status
-	_s5k4ec_StreamOn, /*42*///stream_on
-#ifdef CONFIG_CAMERA_SENSOR_NEW_FEATURE
-	_s5k4ec_StreamOff, /*43*/ // stream_off
+	_s5k4ec_StreamOn,/*42*///stream_on
+	PNULL,//_s5k4ec_StreamOff/*43*/// stream_off
 	NULL,
-#else
-	_s5k4ec_StreamOff,
-	NULL,
-#endif
 };
 
-
-/**---------------------------------------------------------------------------*
- ** 						Global Variables								  *
- **---------------------------------------------------------------------------*/
 SENSOR_INFO_T g_s5k4ec_mipi_yuv_info =
 {
 	S5K4EC_I2C_ADDR_W,				// salve i2c write address
@@ -4759,9 +318,31 @@ SENSOR_INFO_T g_s5k4ec_mipi_yuv_info =
 	1,                     // skip frame num while change setting
 };
 
-LOCAL uint32_t _s5k4ec_GetExifInfo(uint32_t param)
+LOCAL uint32_t _s5k4ec_GetExifInfo(__attribute__((unused)) uint32_t param)
 {
-	return (uint32_t)&s_s5k4ec_exif;
+	EXIF_SPEC_PIC_TAKING_COND_T* exif_ptr=&s_s5k4ec_exif;
+	uint32_t shutter_speed;
+	uint16_t iso_value;
+
+	iso_value = s5k4ec_get_ISO_rate();
+
+	exif_ptr->ISOSpeedRatings.count = 1;
+	exif_ptr->ISOSpeedRatings.type = EXIF_SHORT;
+	exif_ptr->ISOSpeedRatings.size = sizeof(uint16_t);
+	memcpy((void*)&exif_ptr->ISOSpeedRatings.ptr[0],
+	       (void*)&iso_value, sizeof(uint16_t));
+
+	shutter_speed = s5k4ec_get_shutter_speed();
+
+	if (shutter_speed == 0) {
+		exif_ptr->valid.ExposureTime = 0;
+	} else {
+		exif_ptr->valid.ExposureTime = 1;
+		exif_ptr->ExposureTime.numerator = 1;
+		exif_ptr->ExposureTime.denominator = shutter_speed;
+	}
+
+	return (unsigned long)exif_ptr;
 }
 
 LOCAL uint32_t _s5k4ec_InitExifInfo(void)
@@ -4770,7 +351,7 @@ LOCAL uint32_t _s5k4ec_InitExifInfo(void)
 
 	memset(&s_s5k4ec_exif, 0, sizeof(EXIF_SPEC_PIC_TAKING_COND_T));
 
-	SENSOR_PRINT("SENSOR: _s5k4ec_InitExifInfo \n");
+	SENSOR_PRINT_HIGH("Initializing Exif data template");
 
 	exif_ptr->valid.FNumber=1;
 	exif_ptr->FNumber.numerator=14;
@@ -4841,846 +422,436 @@ LOCAL uint32_t _s5k4ec_InitExifInfo(void)
 	return SENSOR_SUCCESS;
 }
 
-LOCAL uint32_t _s5k4ec_GetResolutionTrimTab(uint32_t param)
+LOCAL uint32_t _s5k4ec_GetResolutionTrimTab(__attribute__((unused)) uint32_t param)
 {
-	return (uint32_t)s_s5k4ec_Resolution_Trim_Tab;
+	return (unsigned long)s_s5k4ec_Resolution_Trim_Tab;
 }
 
 LOCAL uint32_t _s5k4ec_PowerOn(uint32_t power_on)
 {
+#ifndef CONFIG_CAMERA_IOCTL_IOCTL_HAS_POWER_ONOFF
+	/*
+	 * Some devices have a convenience IOCTL SENSOR_IO_POWER_ONOFF that
+	 * will handle the process of turning this on and off.
+	 * The CONFIG_CAMERA_IOCTL_IOCTL_HAS_POWER_ONOFF when set will
+	 * attempt to call that only after the poweron function has
+	 * been called.
+	 * If that IOCTL is present, it is advisable to use that instead
+	 * of this.
+	 */
 	SENSOR_AVDD_VAL_E dvdd_val = g_s5k4ec_mipi_yuv_info.dvdd_val;
 	SENSOR_AVDD_VAL_E avdd_val = g_s5k4ec_mipi_yuv_info.avdd_val;
 	SENSOR_AVDD_VAL_E iovdd_val = g_s5k4ec_mipi_yuv_info.iovdd_val;
 	BOOLEAN power_down = g_s5k4ec_mipi_yuv_info.power_down_level;
 	BOOLEAN reset_level = g_s5k4ec_mipi_yuv_info.reset_pulse_level;
-	//uint32_t reset_width=g_ov5640_yuv_info.reset_pulse_width;
 
-	SENSOR_PRINT("SENSOR_s5k4ec: _s5k4ec_PowerOn:E!!  (1:on, 0:off): %d \n", power_on);
+	SENSOR_PRINT("_s5k4ec_PowerOn: E!!  (1:on, 0:off): %u \n", power_on);
 
  	if (SENSOR_TRUE == power_on) {
 		Sensor_PowerDown(power_down);
 		Sensor_SetResetLevel(reset_level);
+		SENSOR_Sleep(1);
+
 		// Open power
-		SENSOR_Sleep(10);
-		Sensor_SetVoltage(dvdd_val, avdd_val, iovdd_val);
-		SENSOR_Sleep(20);
+		Sensor_SetAvddVoltage(avdd_val);
+		SENSOR_Sleep(5);
+		Sensor_SetIovddVoltage(iovdd_val);
+		Sensor_SetMonitorVoltage(avdd_val); // AF
+		SENSOR_Sleep(2);
+
 		Sensor_SetMCLK(SENSOR_DEFALUT_MCLK);
-		SENSOR_Sleep(10);
+		SENSOR_Sleep(7);
+
+		Sensor_SetDvddVoltage(dvdd_val);
+		SENSOR_Sleep(1);
+
 		Sensor_PowerDown(!power_down);
-		SENSOR_Sleep(15);
-		// Reset sensor
-		Sensor_Reset(reset_level);
-		SENSOR_Sleep(12);
-        } else {
+		SENSOR_Sleep(1);
+
+		Sensor_Reset(!reset_level);
+		SENSOR_Sleep(5);
+	} else {
 		Sensor_SetResetLevel(reset_level);
-		SENSOR_Sleep(10);
+		SENSOR_Sleep(1);
 
 		Sensor_SetMCLK(SENSOR_DISABLE_MCLK);
+		SENSOR_Sleep(5);
+
 		Sensor_PowerDown(power_down);
-		//SENSOR_Sleep(10);
+		SENSOR_Sleep(1);
+
 		Sensor_SetVoltage(SENSOR_AVDD_CLOSED, SENSOR_AVDD_CLOSED, SENSOR_AVDD_CLOSED);
+		Sensor_SetMonitorVoltage(SENSOR_AVDD_CLOSED);
 		SENSOR_Sleep(10);
-        }
+	}
+#endif
+	SENSOR_PRINT_HIGH("(1:on, 0:off): %u", power_on);
 
-	SENSOR_PRINT("SENSOR: _s5k4ec_PowerOn (1:on, 0:off): %d \n", power_on);
 	return SENSOR_SUCCESS;
 }
 
-LOCAL uint32_t _s5k4ec_Identify(uint32_t param)
+LOCAL uint32_t _s5k4ec_Identify(__attribute__((unused)) uint32_t param)
 {
 #define s5k4ec_PID_VALUE    0x4ec0
 #define s5k4ec_PID_ADDR     0x01a4
 #define s5k4ec_VER_VALUE    0x0011
 #define s5k4ec_VER_ADDR     0x01a6
-	uint16_t test=0x00;
+	uint16_t pid_value = 0x00;
+	uint16_t ver_value = 0x00;
+	uint32_t ret_value = SENSOR_FAIL;
+	uint8_t max_attmp = 2;
 
-	uint16_t pid_value=0x00;
-	uint16_t ver_value=0x00;
-	uint32_t ret_value=SENSOR_FAIL;
-	#if 1
-	SENSOR_PRINT("SENSOR:s5k4ec identify  -----20130610----.\n");
+	SENSOR_PRINT_HIGH("-----20130610----");
 
-	Sensor_WriteReg(0xfcfc,0xd000);
-	Sensor_WriteReg(0x002c, 0x7000);
-	Sensor_WriteReg(0x002e, 0x01a4);
-	pid_value = Sensor_ReadReg(0x0f12);
+	for (uint8_t i = 1; i <= max_attmp; i++) {
+		SENSOR_PRINT_HIGH("identify tries: %u/%u", i, max_attmp);
 
-	SENSOR_PRINT("=====sonia SENSOR:s5k4ec identify  .pid_value=%x\n",pid_value);
-
-	if (s5k4ec_PID_VALUE == pid_value) {
+		Sensor_WriteReg(0xfcfc,0xd000);
 		Sensor_WriteReg(0x002c, 0x7000);
-		Sensor_WriteReg(0x002e, s5k4ec_VER_ADDR);
-		ver_value = Sensor_ReadReg(0x0f12);
-		SENSOR_PRINT("SENSOR: s5k4ec_Identify: PID = %x, VER = %x \n",
-			     pid_value, ver_value);
-		if (s5k4ec_VER_VALUE == ver_value) {
-			ret_value = SENSOR_SUCCESS;
-			SENSOR_PRINT_HIGH("SENSOR: this is s5k4ec sensor ! \n");
+		Sensor_WriteReg(0x002e, 0x01a4);
+		pid_value = Sensor_ReadReg(0x0f12);
+
+
+		if (s5k4ec_PID_VALUE == pid_value) {
+			Sensor_WriteReg(0x002c, 0x7000);
+			Sensor_WriteReg(0x002e, s5k4ec_VER_ADDR);
+			ver_value = Sensor_ReadReg(0x0f12);
+			SENSOR_PRINT_HIGH("PID = %x, VER = %x", pid_value, ver_value);
+			if (s5k4ec_VER_VALUE == ver_value) {
+				ret_value = SENSOR_SUCCESS;
+				SENSOR_PRINT_HIGH("this is s5k4ec sensor !");
+			} else {
+				SENSOR_PRINT_ERR("this is xx%x%x sensor !",
+				pid_value, ver_value);
+			}
+			break;
 		} else {
-			SENSOR_PRINT_ERR("SENSOR: s5k4ec_Identify this is xx%x%x sensor ! \n",
-			     pid_value, ver_value);
+			SENSOR_PRINT_ERR("identify fail, pid_value=%d", pid_value);
+
+			if (i != max_attmp) {
+				SENSOR_PRINT_HIGH("Retrying after 100 msec");
+				SENSOR_Sleep(100);
+			} else {
+				SENSOR_PRINT_HIGH("Bailing out");
+			}
 		}
-	} else {
-		SENSOR_PRINT_ERR("SENSOR:s5k4ec identify fail,pid_value=%d .\n",
-			     pid_value);
 	}
 
-	#endif
-
-	//_s5k4ec_InitExifInfo();  //
+	if (SENSOR_SUCCESS == ret_value) {
+		//_s5k4ec_get_antibanding();
+		_s5k4ec_InitExifInfo();
+		//_s5k4ec_set_vendorid();
+	}
 
 	return ret_value;
 }
 
-LOCAL const SENSOR_REG_T s5k4ec_brightness_tab[][4] = {
-	{//level -3
-		{0x0028, 0x7000},  {0x002A ,0x0230}, {0x0F12 ,0xFF81}, {0xffff, 0xffff}
-	},
-	{//level -2
-		{0x0028, 0x7000}, {0x002A ,0x0230}, {0x0F12 ,0xFFAC}, {0xffff, 0xffff}
-	},
-	{//level -1
-		{0x0028, 0x7000},  {0x002A ,0x0230}, {0x0F12 ,0xFFD5}, {0xffff, 0xffff}
-	},
-	{//level 0
-		{0x0028, 0x7000},  {0x002A ,0x0230}, {0x0F12 ,0x0000}, {0xffff, 0xffff}
-	},
-	{//level 1
-		{0x0028, 0x7000},  {0x002A ,0x0230}, {0x0F12 ,0x002B}, {0xffff, 0xffff}
-	},
-	{//level 2
-		{0x0028, 0x7000},  {0x002A ,0x0230}, {0x0F12 ,0x0057}, {0xffff, 0xffff}
-	},
-	{//level 3
-		{0x0028, 0x7000},  {0x002A ,0x0230}, {0x0F12 ,0x007F}, {0xffff, 0xffff}
-	}
-};
 LOCAL uint32_t _s5k4ec_set_brightness(uint32_t level)
 {
-	uint16_t i=0x00;
-	//uint32_t reg_bits = 0;
-	//uint32_t reg_value = 0;
-	SENSOR_REG_T_PTR sensor_reg_ptr =(SENSOR_REG_T_PTR) s5k4ec_brightness_tab[level];
-
-	if (level > 7)
+	if (level > 7) {
+		SENSOR_PRINT_ERR("Undefined Brightness level %u", level);
 		return 0;
-
-	for (i = 0x00;(0xffff != sensor_reg_ptr[i].reg_addr)|| (0xffff != sensor_reg_ptr[i].reg_value); i++)
-	{
-			Sensor_WriteReg(sensor_reg_ptr[i].reg_addr,sensor_reg_ptr[i].reg_value);
 	}
+	SENSOR_PRINT_HIGH("Apply Brightness level %u", level);
+
+	s5k4ec_I2C_write(s5k4ec_brightness_tab[level]);
+	Sensor_SetSensorExifInfo(SENSOR_EXIF_CTRL_BRIGHTNESSVALUE, (uint32_t) level);
 
-	SENSOR_PRINT("SENSOR: _s5k4ec_set_brightness = 0x%02x.\n",level);
 	return 0;
 }
 
-LOCAL const SENSOR_REG_T s5k4ec_contrast_tab[][4] = {
-	{//level -3
-		{0x0028, 0x7000}, {0x002A ,0x0232}, {0x0F12 ,0xFF9C}, {0xffff, 0xffff}
-	},
-	{//level -2
-		{0x0028, 0x7000}, {0x002A ,0x0232}, {0x0F12 ,0xFFAC}, {0xffff, 0xffff}
-	},
-	{//level -1
-		{0x0028, 0x7000}, {0x002A ,0x0232}, {0x0F12 ,0xFFD5}, {0xffff, 0xffff}
-	},
-	{//level 0
-		{0x0028, 0x7000}, {0x002A ,0x0232}, {0x0F12 ,0x0000}, {0xffff, 0xffff}
-	},
-	{//level 1
-		{0x0028, 0x7000}, {0x002A ,0x0232}, {0x0F12 ,0x002B}, {0xffff, 0xffff}
-	},
-	{//level 2
-		{0x0028, 0x7000}, {0x002A ,0x0232}, {0x0F12 ,0x0057}, {0xffff, 0xffff}
-	},
-	{//level 3
-		{0x0028, 0x7000}, {0x002A ,0x0232}, {0x0F12 ,0x0064}, {0xffff, 0xffff}
-	}
-};
-
 LOCAL uint32_t _s5k4ec_set_contrast(uint32_t level)
 {
-#if 0
-	uint16_t i=0x00;
-	SENSOR_REG_T_PTR sensor_reg_ptr =(SENSOR_REG_T_PTR) s5k4ec_contrast_tab[level];
-
-	if (level > 7)
+	if (level > 7) {
+		SENSOR_PRINT_ERR("Undefined Contrast level %u", level);
 		return 0;
-
-	for (i = 0x00;(0xffff != sensor_reg_ptr[i].reg_addr)|| (0xffff != sensor_reg_ptr[i].reg_value); i++)
-	{
-			Sensor_WriteReg(sensor_reg_ptr[i].reg_addr,sensor_reg_ptr[i].reg_value);
 	}
+
+	SENSOR_PRINT_HIGH("Apply Contrast level %u", level);
+
+	s5k4ec_I2C_write(s5k4ec_contrast_tab[level]);
 	Sensor_SetSensorExifInfo(SENSOR_EXIF_CTRL_CONTRAST, (uint32_t) level);
-        usleep(100*1000);
-#endif
-	SENSOR_PRINT("SENSOR: _s5k4ec_set_contrast = 0x%02x.\n",level);
+
 	return 0;
 }
-/******************************************************************************/
-// Description: set contrast
-// Global resource dependence:
-// Author: Tim.zhu
-// Note:
-//
-/******************************************************************************/
-LOCAL const SENSOR_REG_T s5k4ec_iso_tab[][6] = {
-    {/*ISO AUTO*/
-         {0x0028, 0x7000}, {0x002A ,0x04D0}, {0x0F12 ,0x0000}, {0x0F12 ,0x0000}, {0x0F12 ,0x0001},{0xffff, 0xffff}
-    },
-    {/*ISO 100*/
-         {0x0028, 0x7000}, {0x002A ,0x04D0}, {0x0F12 ,0x0001}, {0x0F12 ,0x0064}, {0x0F12 ,0x0001},{0xffff, 0xffff}
-    },
-    {/*ISO 200*/
-         {0x0028, 0x7000}, {0x002A ,0x04D0}, {0x0F12 ,0x0001}, {0x0F12 ,0x00C8}, {0x0F12 ,0x0001},{0xffff, 0xffff}
-    },
-    {/*ISO 400*/
-         {0x0028, 0x7000}, {0x002A ,0x04D0}, {0x0F12 ,0x0001}, {0x0F12 ,0x0190}, {0x0F12 ,0x0001},{0xffff, 0xffff}
-    },
-    {/*ISO 800*/
-         {0x0028, 0x7000}, {0x002A ,0x04D0}, {0x0F12 ,0x0001}, {0x0F12 ,0x0320}, {0x0F12 ,0x0001},{0xffff, 0xffff}
-    },
-    {/*ISO 1600*/
-         {0x0028, 0x7000}, {0x002A ,0x04D0}, {0x0F12 ,0x0001}, {0x0F12 ,0x0640}, {0x0F12 ,0x0001},{0xffff, 0xffff}
-    }
-
-};
 
 LOCAL uint32_t _s5k4ec_set_iso(uint32_t level)
 {
-        uint16_t i=0x00;
-        SENSOR_REG_T_PTR sensor_reg_ptr =(SENSOR_REG_T_PTR) s5k4ec_iso_tab[level];
-
-        if (level > 5)
-                return 0;
-
-        for (i = 0x00;(0xffff != sensor_reg_ptr[i].reg_addr)|| (0xffff != sensor_reg_ptr[i].reg_value); i++)
-        {
-                        Sensor_WriteReg(sensor_reg_ptr[i].reg_addr,sensor_reg_ptr[i].reg_value);
-        }
-        //Sensor_SetSensorExifInfo(SENSOR_EXIF_CTRL_ISO, (uint32_t) level);
-        SENSOR_PRINT("SENSOR: _s5k4ec_set_iso = 0x%02x.\n",level);
+	if (CAMERA_ISO_MAX < level) {
+		SENSOR_PRINT_ERR("Undefined ISO mode %u", level);
+		return 0;
+	}
+
+	SENSOR_PRINT_HIGH("Apply ISO mode %u", level);
+
+	switch(level) {
+		case CAMERA_ISO_50:
+			s5k4ec_I2C_write(s5k4ec_ISO_50);
+			break;
+		case CAMERA_ISO_100:
+			s5k4ec_I2C_write(s5k4ec_ISO_100);
+			break;
+		case CAMERA_ISO_200:
+			s5k4ec_I2C_write(s5k4ec_ISO_200);
+			break;
+		case CAMERA_ISO_300: /* This value is linearly interpolated */
+			s5k4ec_I2C_write(s5k4ec_ISO_300);
+			break;
+		/*
+		 * Maximum iso gain is about 5232 which is about
+		 * 400 ISO as it seems with the msm implementation
+		 * and the stock rom. AUTO ISO might never
+		 * reach this level, but would still appear
+		 * on the Exif data as 400 ISO though.
+		 */
+		case CAMERA_ISO_400:
+		case CAMERA_ISO_800:
+		case CAMERA_ISO_1600:
+			s5k4ec_I2C_write(s5k4ec_ISO_400);
+			break;
+
+		/*
+		 * If ever the check passed but with an unknown value
+		 * default to auto.
+		 */
+		default:
+		case CAMERA_ISO_AUTO:
+			s5k4ec_I2C_write(s5k4ec_ISO_auto);
+			break;
+
+	}
+
         return 0;
 }
 
-LOCAL const SENSOR_REG_T s5k4ec_saturation_tab[][4] = {
-	{//level -3
-         {0x0028, 0x7000}, {0x002A ,0x0234}, {0x0F12 ,0xFF81}, {0xffff, 0xffff}
-    },
-    {//level -2
-         {0x0028, 0x7000}, {0x002A ,0x0234}, {0x0F12 ,0xFFAC}, {0xffff, 0xffff}
-    },
-    {//level -1
-         {0x0028, 0x7000}, {0x002A ,0x0234}, {0x0F12 ,0xFFD5}, {0xffff, 0xffff}
-    },
-    {//level 0
-         {0x0028, 0x7000}, {0x002A ,0x0234}, {0x0F12 ,0x0010}, {0xffff, 0xffff}
-    },
-    {//level 1
-         {0x0028, 0x7000}, {0x002A ,0x0234}, {0x0F12 ,0x002B}, {0xffff, 0xffff}
-    },
-    {//level 2
-         {0x0028, 0x7000}, {0x002A ,0x0234}, {0x0F12 ,0x0057}, {0xffff, 0xffff}
-    },
-    {//level 3
-         {0x0028, 0x7000}, {0x002A ,0x0234}, {0x0F12 ,0x007F}, {0xffff, 0xffff}
-    }
-};
 LOCAL uint32_t _s5k4ec_set_saturation(uint32_t level)
 {
-	uint16_t i=0x00;
-
-	SENSOR_REG_T_PTR sensor_reg_ptr =(SENSOR_REG_T_PTR) s5k4ec_saturation_tab[level];
-
-	if(level>6)
+	if (level > 6) {
+		SENSOR_PRINT_ERR("Undefined Saturation level %u", level);
 		return 0;
-
-	for (i = 0x00;(0xffff != sensor_reg_ptr[i].reg_addr)|| (0xffff != sensor_reg_ptr[i].reg_value); i++)
-	{
-			Sensor_WriteReg(sensor_reg_ptr[i].reg_addr,sensor_reg_ptr[i].reg_value);
 	}
-	SENSOR_PRINT("SENSOR: _s5k4ec_set_saturation = 0x%02x.\n",level);
+
+	SENSOR_PRINT_HIGH("Apply Saturation level %u",level);
+	s5k4ec_I2C_write(s5k4ec_saturation_tab[level]);
+
 	return 0;
 }
 
-/******************************************************************************/
-// Description:
-// Global resource dependence:
-// Author: Tim.zhu
-// Note:
-//
-/******************************************************************************/
-LOCAL const SENSOR_REG_T s5k4ec_image_effect_tab[][15] = {
-	// effect normal        --effect normal
-	{
-		{0x0028, 0x7000},
-		{0x002A, 0x04E6},
-		{0x0F12, 0x077f},
-		{0x002A, 0x023C},
-		{0x0F12, 0x0000},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff}
-	},
-    // effect monochrome    --effect BLACKWHITE
-	{
-		{0x0028, 0x7000},
-		{0x002A, 0x04E6},
-		{0x0F12, 0x077f},
-		{0x002A, 0x023C},
-		{0x0F12, 0x0001},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff}
-    },
-    // effect negative      --effect RED
-	{
-		{0x0028, 0x7000},
-		{0x002A, 0x023C},
-		{0x0F12, 0x0000},
-		{0x002A, 0x04E6},
-		{0x0F12, 0x0777},
-
-		{0x002A, 0x04BA},
-		{0x0F12, 0x0300},
-		{0x0F12, 0x0001},
-		{0x002A, 0x04BE},
-		{0x0F12, 0x0100},
-		{0x0F12, 0x0001},
-		{0x002A, 0x04C2},
-		{0x0F12, 0x0100},
-		{0x0F12, 0x0001},
-		{0xffff, 0xffff}
-	},
-    // effect sepia         --effect GREEN
-	{
-		{0x0028, 0x7000},
-		{0x002A, 0x023C},
-		{0x0F12, 0x0000},
-		{0x002A, 0x04E6},
-		{0x0F12, 0x0777},
-
-	  	{0x002A, 0x04BA},
-	  	{0x0F12, 0x0100},
-	  	{0x0F12, 0x0001},
-	  	{0x002A, 0x04BE},
-	  	{0x0F12, 0x0200},
-	  	{0x0F12, 0x0001},
-	  	{0x002A, 0x04C2},
-	  	{0x0F12, 0x0100},
-	  	{0x0F12, 0x0001},
-		{0xffff, 0xffff}
-	},
-	// effect  aqua         --effect  BLUE
-	{
-		{0x0028, 0x7000},
-		{0x002A, 0x023C},
-		{0x0F12, 0x0000},
-		{0x002A, 0x04E6},
-		{0x0F12, 0x0777},
-
-		{0x002A, 0x04BA},
-		{0x0F12, 0x0100},
-		{0x0F12, 0x0001},
-		{0x002A, 0x04BE},
-		{0x0F12, 0x0100},
-		{0x0F12, 0x0001},
-		{0x002A, 0x04C2},
-		{0x0F12, 0x0200},
-		{0x0F12, 0x0001},
-		{0xffff, 0xffff}
-	},
-	// effect  sketch       --effect  YELLOW
-	{
-		{0x0028, 0x7000},
-		{0x002A, 0x023C},
-		{0x0F12, 0x0000},
-		{0x002A, 0x04E6},
-		{0x0F12, 0x0777},
-
-		{0x002A, 0x04BA},
-		{0x0F12, 0x0200},
-		{0x0F12, 0x0001},
-		{0x002A, 0x04BE},
-		{0x0F12, 0x0200},
-		{0x0F12, 0x0001},
-		{0x002A, 0x04C2},
-		{0x0F12, 0x0100},
-		{0x0F12, 0x0001},
-		{0xffff, 0xffff}
-	},
-	// effect emboss color  --effect NEGATIVE
-	{
-		{0x0028, 0x7000},
-		{0x002A, 0x04E6},
-		{0x0F12, 0x077f},
-		{0x002A, 0x023C},
-		{0x0F12, 0x0002},
-
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff}
-	},
-	//effect emboss mono    --effect ANTIQUE
-	{
-		{0x0028, 0x7000},
-		{0x002A, 0x04E6},
-		{0x0F12, 0x077f},
-		{0x002A, 0x023C},
-		{0x0F12, 0x0004},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff},
-		{0xffff, 0xffff}
-	},
-};
-
 LOCAL uint32_t _s5k4ec_set_image_effect(uint32_t effect_type)
 {
-	uint16_t i = 0x00;
-	SENSOR_REG_T_PTR sensor_reg_ptr =(SENSOR_REG_T_PTR) s5k4ec_image_effect_tab[effect_type];
-
-	if (effect_type > 7)
+	static uint8_t should_revert_WB = 0;
+	if (effect_type > 8) {
+		SENSOR_PRINT_ERR("Undefined Image Effect type %u", effect_type);
 		return 0;
+	}
 
-	for (i = 0x00;(0xffff != sensor_reg_ptr[i].reg_addr)|| (0xffff != sensor_reg_ptr[i].reg_value); i++)
-	{
- 			Sensor_WriteReg(sensor_reg_ptr[i].reg_addr,sensor_reg_ptr[i].reg_value);
+	SENSOR_PRINT_HIGH("Apply Image Effect type %u", effect_type);
+	s5k4ec_I2C_write(s5k4ec_image_effect_tab[effect_type]);
+
+	/*
+	 * Work around to image effects affecting the whitebalance.
+	 * Switching to None should also revert the alteration to WB.
+	 */
+	if (effect_type >= 2 && effect_type <= 4) {
+		should_revert_WB = 1;
+	} else if (should_revert_WB) {
+		SENSOR_PRINT_HIGH("Reverting White Balance from effects.");
+		_s5k4ec_set_awb(s_white_balance);
+		should_revert_WB = 0;
 	}
 
-	SENSOR_PRINT("SENSOR: _s5k4ec_set_image_effect = 0x%02x\n",effect_type);
 	return 0;
 }
 
-LOCAL const SENSOR_REG_T s5k4ec_ev_tab[][7] = {
-	{//level -3 TVAR_ae_BrAve
-		{0x0028, 0x7000},{0x002A, 0x1484},{0x0F12, 0x000C}, {0xffff, 0xffff}
-	},
-	{//level -2
-		{0x0028, 0x7000},{0x002A, 0x1484},{0x0F12, 0x001E}, {0xffff, 0xffff}
-	},
-	{//level -1
-		{0x0028, 0x7000},{0x002A, 0x1484},{0x0F12, 0x002E}, {0xffff, 0xffff}
-	},
-	{//level 0
-		{0x0028, 0x7000},{0x002A, 0x1484},{0x0F12, 0x003C}, {0xffff, 0xffff}
-	},
-	{//level 1
-		{0x0028, 0x7000},{0x002A, 0x1484},{0x0F12, 0x0054}, {0xffff, 0xffff}
-	},
-	{//level 2
-		{0x0028, 0x7000},{0x002A, 0x1484},{0x0F12, 0x0066}, {0xffff, 0xffff}
-	},
-	{//level 3
-		{0x0028, 0x7000},{0x002A, 0x1484},{0x0F12, 0x0078}, {0xffff, 0xffff}
-	}
-};
-
 LOCAL uint32_t _s5k4ec_set_ev(uint32_t level)
 {
-	uint16_t i = 0x00;
-	SENSOR_REG_T_PTR sensor_reg_ptr =(SENSOR_REG_T_PTR) s5k4ec_ev_tab[level];
-
-
-	if (level > 6)
+	if (level > 6) {
+		SENSOR_PRINT_ERR("Undefined Exposure Compensation level %u", level);
 		return 0;
-
-	for (i = 0x00;(0xffff != sensor_reg_ptr[i].reg_addr)|| (0xffff != sensor_reg_ptr[i].reg_value); i++)
-	{
- 			Sensor_WriteReg(sensor_reg_ptr[i].reg_addr,sensor_reg_ptr[i].reg_value);
 	}
 
-	SENSOR_PRINT("SENSOR: _s5k4ec_set_ev = 0x%02x \n", level);
+	SENSOR_PRINT_HIGH("Apply Exposure Compensation level %u", level);
+	s_current_ev = level;
+	s5k4ec_I2C_write(s5k4ec_ev_tab[level]);
+
 	return 0;
 }
-/******************************************************************************/
-// Description: anti 50/60 hz banding flicker
-// Global resource dependence:
-// Author: Tim.zhu
-// Note:
-//
-/******************************************************************************/
-LOCAL const SENSOR_REG_T s5k4ec_anti_banding_flicker_tab[][7] = {
-	{//50hz
-		{0x0028, 0x7000},
-		{0x002a, 0x04e6},
-		{0x0f12, 0x075f},
-		{0x002a, 0x04d6},
-		{0x0f12, 0x0001},
-		{0x0f12, 0x0001},
-		{0xffff, 0xffff}
-	},
-	{//60hz
-		{0x0028, 0x7000},
-		{0x002a, 0x04e6},
-		{0x0f12, 0x075f},
-		{0x002a, 0x04d6},
-		{0x0f12, 0x0002},
-		{0x0f12, 0x0001},
-		{0xffff, 0xffff}
-	}
-};
 
 LOCAL uint32_t _s5k4ec_set_anti_flicker(uint32_t mode)
 {
-	uint16_t i = 0x00;
-	SENSOR_REG_T_PTR sensor_reg_ptr =(SENSOR_REG_T_PTR) s5k4ec_anti_banding_flicker_tab[mode];
-
-	if (mode > 1)
+	if (mode > 6) {
+		SENSOR_PRINT_ERR("Undefined Anti-banding mode %u", mode);
 		return 0;
-
-	for (i = 0x00;(0xffff != sensor_reg_ptr[i].reg_addr)|| (0xffff != sensor_reg_ptr[i].reg_value); i++)
-	{
- 			Sensor_WriteReg(sensor_reg_ptr[i].reg_addr,sensor_reg_ptr[i].reg_value);
 	}
 
-	SENSOR_PRINT("SENSOR: _s5k4ec_set_anti_flicker = 0x%02x \n", mode);
+	SENSOR_PRINT_HIGH("Applied %s Anti-banding", mode ? "50Hz" : "60Hz");
+	s5k4ec_I2C_write(s5k4ec_anti_banding_flicker_tab[mode]);
 
 	return 0;
 }
 
-LOCAL const SENSOR_REG_T s5k4ec_video_mode_tab[][40]=
-{
-	/* preview mode: 30 fps*/
-	{
-	{0xfcfc, 0xd000},
-	{0x0028, 0x7000},
-	////////////////////////////////////////////////////
-	// Preview Config 0     640*480
-	////////////////////////////////////////////////////
-	{0x002A, 0x02A6},
-	{0x0F12, 0x0280},  //#REG_0TC_PCFG_usWidth
-	{0x0F12, 0x01e0},  //#REG_0TC_PCFG_usHeight
-	{0x0F12, 0x0005},  //#REG_0TC_PCFG_Format
-	{0x0F12, 0x2EE0},  //#REG_0TC_PCFG_usMaxOut4KHzRate
-	{0x0F12, 0x2EE0},  //#REG_0TC_PCFG_usMinOut4KHzRate
-	{0x0F12, 0x0100},  //#REG_0TC_PCFG_OutClkPerPix88
-	{0x0F12, 0x0300},  //#REG_0TC_PCFG_uBpp88
-	{0x0F12, 0x0042},  //#REG_0TC_PCFG_PVIMask
-	{0x0F12, 0x0800},  //#REG_0TC_PCFG_OIFMask
-	{0x0F12, 0x01E0},  //#REG_0TC_PCFG_usJpegPacketSize
-	{0x0F12, 0x0000},  //#REG_0TC_PCFG_usJpegTotalPackets
-	{0x0F12, 0x0000},  //#REG_0TC_PCFG_uClockInd
-	{0x0F12, 0x0000},  //#REG_0TC_PCFG_usFrTimeType
-	{0x0F12, 0x0001},  //#REG_0TC_PCFG_FrRateQualityType
-	{0x0F12, 0x03e8},  //#REG_0TC_PCFG_usMaxFrTimeMsecMult10
-	{0x0F12, 0x0000},  //#REG_0TC_PCFG_usMinFrTimeMsecMult10
-	{0x002A, 0x02D0},
-	{0x0F12, 0x0000},  //#REG_0TC_PCFG_uPrevMirror
-	{0x0F12, 0x0000},  //#REG_0TC_PCFG_uCaptureMirror
-	{0x0F12, 0x0000},  //#REG_0TC_PCFG_uRotation
-
-	{0x002A, 0x0266},
-	{0x0F12, 0x0000},  //#REG_TC_GP_ActivePrevConfig
-	{0x002A, 0x026A},
-	{0x0F12, 0x0001},  //#REG_TC_GP_PrevOpenAfterChange
-	{0x002A, 0x026E},
-	{0x0F12, 0x0000},	 //REG_TC_GP_ActiveCapConfig
-	{0x002A, 0x024E},
-	{0x0F12, 0x0001},  //#REG_TC_GP_NewConfigSync
-	{0x002A, 0x0268},
-	{0x0F12, 0x0001},  //#REG_TC_GP_PrevConfigChanged
-	{0x002A, 0x0270},
-	{0x0F12, 0x0001},  //#REG_TC_GP_CapConfigChanged
-	{0x002A, 0x023E},
-	{0x0F12, 0x0001},  //#REG_TC_GP_EnablePreview
-	{0x0F12, 0x0001},  //#REG_TC_GP_EnablePreviewChanged
-	{0xffff, 0xffff},
-	{0xffff, 0xffff}
-	},
-	/* video mode: if use 35 fps, change it to 0x50*/
-	{
-	{0xfcfc, 0xd000},
-	{0x0028, 0x7000},
-	////////////////////////////////////////////////////
-	// Preview Config 0     640*480
-	////////////////////////////////////////////////////
-	{0x002A, 0x02A6},
-	{0x0F12, 0x0280},  //#REG_0TC_PCFG_usWidth
-	{0x0F12, 0x01e0},  //#REG_0TC_PCFG_usHeight
-	{0x0F12, 0x0005},  //#REG_0TC_PCFG_Format
-	{0x0F12, 0x2EE0},  //#REG_0TC_PCFG_usMaxOut4KHzRate
-	{0x0F12, 0x2EE0},  //#REG_0TC_PCFG_usMinOut4KHzRate
-	{0x0F12, 0x0100},  //#REG_0TC_PCFG_OutClkPerPix88
-	{0x0F12, 0x0300},  //#REG_0TC_PCFG_uBpp88
-	{0x0F12, 0x0042},  //#REG_0TC_PCFG_PVIMask
-	{0x0F12, 0x0800},  //#REG_0TC_PCFG_OIFMask
-	{0x0F12, 0x01E0},  //#REG_0TC_PCFG_usJpegPacketSize
-	{0x0F12, 0x0000},  //#REG_0TC_PCFG_usJpegTotalPackets
-	{0x0F12, 0x0000},  //#REG_0TC_PCFG_uClockInd
-	{0x0F12, 0x0002},  //#REG_0TC_PCFG_usFrTimeType
-	{0x0F12, 0x0001},  //#REG_0TC_PCFG_FrRateQualityType
-	{0x0F12, 0x029a},  //#REG_0TC_PCFG_usMaxFrTimeMsecMult10
-	{0x0F12, 0x0000},  //#REG_0TC_PCFG_usMinFrTimeMsecMult10
-	{0x002A, 0x02D0},
-	{0x0F12, 0x0000},  //#REG_0TC_PCFG_uPrevMirror
-	{0x0F12, 0x0000},  //#REG_0TC_PCFG_uCaptureMirror
-	{0x0F12, 0x0000},  //#REG_0TC_PCFG_uRotation
-
-	{0x002A, 0x0266},
-	{0x0F12, 0x0000},  //#REG_TC_GP_ActivePrevConfig
-	{0x002A, 0x026A},
-	{0x0F12, 0x0001},  //#REG_TC_GP_PrevOpenAfterChange
-	{0x002A, 0x026E},
-	{0x0F12, 0x0000},	 //REG_TC_GP_ActiveCapConfig
-	{0x002A, 0x024E},
-	{0x0F12, 0x0001},  //#REG_TC_GP_NewConfigSync
-	{0x002A, 0x0268},
-	{0x0F12, 0x0001},  //#REG_TC_GP_PrevConfigChanged
-	{0x002A, 0x0270},
-	{0x0F12, 0x0001},  //#REG_TC_GP_CapConfigChanged
-	{0x002A, 0x023E},
-	{0x0F12, 0x0001},  //#REG_TC_GP_EnablePreview
-	{0x0F12, 0x0001},  //#REG_TC_GP_EnablePreviewChanged
-	{0xffff, 0xffff},
-	{0xffff, 0xffff}
-	}
-};
-
 LOCAL uint32_t _s5k4ec_set_video_mode(uint32_t mode)
 {
-	SENSOR_REG_T_PTR sensor_reg_ptr=(SENSOR_REG_T_PTR)s5k4ec_video_mode_tab[mode];
-	uint16_t i=0x00;
-        SENSOR_PRINT("SENSOR: _s5k4ec_set_video_mode,in = 0x%02x \n", mode);
-	if(mode>1)
-		return 0;
+	struct camera_context *cxt = camera_get_cxt();
 
-	for (i = 0x00;(0xffff != sensor_reg_ptr[i].reg_addr)|| (0xffff != sensor_reg_ptr[i].reg_value); i++)
-	{
- 			Sensor_WriteReg(sensor_reg_ptr[i].reg_addr,sensor_reg_ptr[i].reg_value);
-	}
+	SENSOR_PRINT_HIGH("mode = 0x%X", mode);
+
+	SENSOR_PRINT_HIGH("cxt->sn_cxt.preview_mode=%u s_preview_mode=%u", cxt->sn_cxt.preview_mode, s_preview_mode);
+	if (s_preview_mode != cxt->sn_cxt.preview_mode)
+		s5k4ec_I2C_write(s5k4ec_preview_return);
+
+	s_preview_mode = cxt->sn_cxt.preview_mode;
+	s5k4ec_set_FPS(cxt->cmr_set.frame_rate);
 
-	SENSOR_PRINT("SENSOR: _s5k4ec_set_video_mode = 0x%02x \n", mode);
 	return 0;
 }
 
-LOCAL const SENSOR_REG_T s5k4ec_awb_tab[][13] = {
-	//AUTO
-	{
-		{0x0028, 0x7000},
-		{0x002A ,0x04E6}, {0x0F12 ,0x077F}, {0xffff, 0xffff},
-		{0xffff, 0xffff}, {0xffff, 0xffff}, {0xffff, 0xffff},
-		{0xffff, 0xffff}, {0xffff, 0xffff}, {0xffff, 0xffff},
-		{0xffff, 0xffff}, {0xffff, 0xffff}, {0xffff, 0xffff},
-	},
-	//INCANDESCENCE:
-	{
-		{0x0028, 0x7000},
-		{0x002A ,0x04E6}, {0x0F12 ,0x0777}, {0x002A ,0x04BA},
-		{0x0F12 ,0x066e}, {0x0F12 ,0x0001}, {0x002A ,0x04Be},
-		{0x0F12 ,0x0400}, {0x0F12 ,0x0001}, {0x002A ,0x04c2},
-		{0x0F12 ,0x0476}, {0x0F12 ,0x0001}, {0xffff, 0xffff}
-	},
-	//CWF equal to flourescent(auto),1
-	{
-		{0x0028, 0x7000},
-		{0x002A ,0x04E6}, {0x0F12 ,0x0777}, {0x002A ,0x04BA},
-		{0x0F12 ,0x0575}, {0x0F12 ,0x0001}, {0x002A ,0x04Be},
-		{0x0F12 ,0x0400}, {0x0F12 ,0x0001}, {0x002A ,0x04c2},
-		{0x0F12 ,0x0800}, {0x0F12 ,0x0001}, {0xffff, 0xffff}
-	},
-	//U30(auto),2
-	{
-		{0x0028, 0x7000},
-		{0x002A ,0x04E6}, {0x0F12 ,0x0777}, {0x002A ,0x04BA},
-		{0x0F12 ,0x0800}, {0x0F12 ,0x0001}, {0x002A ,0x04Be},
-		{0x0F12 ,0x0400}, {0x0F12 ,0x0001}, {0x002A ,0x04c2},
-		{0x0F12 ,0x0800}, {0x0F12 ,0x0001}, {0xffff, 0xffff}
-	},
-	//CWF equal to flourescent(auto),3
-	{
-		{0x0028, 0x7000},
-		{0x002A ,0x04E6}, {0x0F12 ,0x0777}, {0x002A ,0x04BA},
-		{0x0F12 ,0x0575}, {0x0F12 ,0x0001}, {0x002A ,0x04Be},
-		{0x0F12 ,0x0400}, {0x0F12 ,0x0001}, {0x002A ,0x04c2},
-		{0x0F12 ,0x0800}, {0x0F12 ,0x0001}, {0xffff, 0xffff}
-	},
-	//FLUORESCENT:4
-	{
-		{0x0028, 0x7000},
-		{0x002A ,0x04E6}, {0x0F12 ,0x0777}, {0x002A ,0x04BA},
-		{0x0F12 ,0x0400}, {0x0F12 ,0x0001}, {0x002A ,0x04Be},
-		{0x0F12 ,0x0400}, {0x0F12 ,0x0001}, {0x002A ,0x04c2},
-		{0x0F12 ,0x0940}, {0x0F12 ,0x0001}, {0xffff, 0xffff}
-	},
-	//SUN:5
-	{
-		{0x0028, 0x7000},
-		{0x002A ,0x04E6}, {0x0F12 ,0x0777}, {0x002A ,0x04BA},
-		{0x0F12 ,0x05e0}, {0x0F12 ,0x0001}, {0x002A ,0x04Be},
-		{0x0F12 ,0x0400}, {0x0F12 ,0x0001}, {0x002A ,0x04c2},
-		{0x0F12 ,0x0530}, {0x0F12 ,0x0001}, {0xffff, 0xffff}
-	},
-	//CLOUD:6
-	{
-		{0x0028, 0x7000},
-		{0x002A ,0x04E6}, {0x0F12 ,0x0777}, {0x002A ,0x04BA},
-		{0x0F12 ,0x0740}, {0x0F12 ,0x0001}, {0x002A ,0x04Be},
-		{0x0F12 ,0x0400}, {0x0F12 ,0x0001}, {0x002A ,0x04c2},
-		{0x0F12 ,0x0460}, {0x0F12 ,0x0001}, {0xffff, 0xffff}
-	}
-};
-
 LOCAL uint32_t _s5k4ec_set_awb(uint32_t mode)
 {
-	uint16_t i=0x00;
-#if 0   //sunao 20130608
-	SENSOR_REG_T_PTR sensor_reg_ptr =(SENSOR_REG_T_PTR) s5k4ec_awb_tab[mode];
-
-	if (mode > 6)
+	if (mode > 6) {
+		SENSOR_PRINT_ERR("Undefined Auto White Balance mode %u",mode);
 		return 0;
-
-	for (i = 0x00;(0xffff != sensor_reg_ptr[i].reg_addr)|| (0xffff != sensor_reg_ptr[i].reg_value); i++)
-	{
- 			Sensor_WriteReg(sensor_reg_ptr[i].reg_addr,sensor_reg_ptr[i].reg_value);
 	}
 
+	SENSOR_PRINT_HIGH("Apply Auto White Balance mode %u", mode);
+	s5k4ec_I2C_write(s5k4ec_awb_tab[mode]);
+	s_white_balance = mode;
 
 	Sensor_SetSensorExifInfo(SENSOR_EXIF_CTRL_LIGHTSOURCE, (uint32_t) mode);
 	Sensor_SetSensorExifInfo(SENSOR_EXIF_CTRL_WHITEBALANCE, (uint32_t) mode);
-#endif
-	SENSOR_PRINT("SENSOR: _s5k4ec_set_awb = 0x%02x\n", mode);
+
 	return 0;
 }
 
-LOCAL const SENSOR_REG_T s5k4ec_work_mode_tab[][16] = {
-	/* Normal Mode,0 */
-	{    //normal fix 25fps
-		{0x0028, 0x7000},
-		{0x002A, 0x0288},
-		{0x0F12, 0x03E8},
-		{0x0F12, 0x029A},
-		{0x002A, 0x023c},
-		{0x0F12, 0x0000},
-		{0x002A, 0x0240},
-		{0x0F12, 0x0001},
-		{0x002A, 0x0230},
-		{0x0F12, 0x0001},
-		{0x002A, 0x023E},
-		{0x0F12, 0x0001},
-		{0x002A, 0x0220},
-		{0x0F12, 0x0001},
-		{0x0F12, 0x0001},
-		{0xffff, 0xffff}
-	},
-	{    //night mode,1; min 12.5-25fps
-		{0x0028, 0x7000},
-		{0x002A, 0x0288},
-		{0x0F12, 0x0535},
-		{0x0F12, 0x0535},
-		{0x002A, 0x023c},
-		{0x0F12, 0x0000},
-		{0x002A, 0x0240},
-		{0x0F12, 0x0001},
-		{0x002A, 0x0230},
-		{0x0F12, 0x0001},
-		{0x002A, 0x023E},
-		{0x0F12, 0x0001},
-		{0x002A, 0x0220},
-		{0x0F12, 0x0001},
-		{0x0F12, 0x0001},
-		{0xffff, 0xffff}
-	},
-	//sports mode,2
-	{
-		{0xffff, 0xffff}
-	},
-	//portrait mode,3
-	{
-		{0xffff, 0xffff}
-	},
-	//landscape mode,4
-	{
-		{0xffff, 0xffff}
-	},
-	//normal mode,5
-	{
-		{0xffff, 0xffff}
-	}
-};
-
-LOCAL uint32_t _s5k4ec_set_work_mode(uint32_t mode)
+LOCAL uint32_t _s5k4ec_set_scene_mode(uint32_t mode)
 {
-	uint16_t i = 0x00;
-	SENSOR_REG_T_PTR sensor_reg_ptr =
-	(SENSOR_REG_T_PTR) s5k4ec_work_mode_tab[mode];
+	SENSOR_PRINT_HIGH("Apply Scene mode %u", mode);
 
-	if (mode > 5)
-		return 0;
+	switch (mode) {
+		case CAMERA_SCENE_MODE_AUTO:
+			s5k4ec_I2C_write(s5k4ec_scene_off);
+			break;
+		case CAMERA_SCENE_MODE_NIGHT:
+			s5k4ec_I2C_write(s5k4ec_scene_night);
+			break;
+		case CAMERA_SCENE_MODE_PORTRAIT:
+			s5k4ec_I2C_write(s5k4ec_scene_portrait);
+			break;
+		case CAMERA_SCENE_MODE_LANDSCAPE:
+			s5k4ec_I2C_write(s5k4ec_scene_landscape);
+			break;
+		case CAMERA_SCENE_MODE_SPORTS:
+			s5k4ec_I2C_write(s5k4ec_scene_sports);
+			break;
+		case CAMERA_SCENE_MODE_PARTY:
+			s5k4ec_I2C_write(s5k4ec_scene_party);
+			break;
+		case CAMERA_SCENE_MODE_BEACH:
+			s5k4ec_I2C_write(s5k4ec_scene_beach);
+			break;
+		case CAMERA_SCENE_MODE_SUNSET:
+			s5k4ec_I2C_write(s5k4ec_scene_sunset);
+			break;
+		case CAMERA_SCENE_MODE_DUSK_DAWN:
+			s5k4ec_I2C_write(s5k4ec_scene_dawn);
+			break;
+		case CAMERA_SCENE_MODE_FALL_COLOR:
+			s5k4ec_I2C_write(s5k4ec_scene_fall);
+			break;
+		case CAMERA_SCENE_MODE_TEXT:
+			s5k4ec_I2C_write(s5k4ec_scene_text);
+			break;
+		case CAMERA_SCENE_MODE_CANDLELIGHT:
+			s5k4ec_I2C_write(s5k4ec_scene_candlelight);
+			break;
+		case CAMERA_SCENE_MODE_FIREWORK:
+			s5k4ec_I2C_write(s5k4ec_scene_firework);
+			break;
+		case CAMERA_SCENE_MODE_BACKLIGHT:
+			s5k4ec_I2C_write(s5k4ec_scene_backlight);
+			break;
 
-	for (i = 0x00;(0xffff != sensor_reg_ptr[i].reg_addr)|| (0xffff != sensor_reg_ptr[i].reg_value); i++)
-	{
- 			Sensor_WriteReg(sensor_reg_ptr[i].reg_addr,sensor_reg_ptr[i].reg_value);
+		case CAMERA_SCENE_MODE_HDR:
+			/*
+			 * Try to use the previous mode as the template
+			 * Mode of HDR. Just check that it's not
+			 * CAMERA_SCENE_MODE_HDR or we'll have
+			 * infinite recursion.
+			 */
+			SENSOR_PRINT_ERR("HDR: setting previous mode %u", s_cur_scene);
+			_s5k4ec_set_scene_mode(s_cur_scene);
+
+			return SENSOR_SUCCESS; // ignore the error
+		case CAMERA_SCENE_MODE_ACTION:
+		case CAMERA_SCENE_MODE_NORMAL:
+		default:
+			SENSOR_PRINT_ERR("Undefined Scene mode %u", mode);
+		return SENSOR_SUCCESS; // ignore the error
 	}
 
 	Sensor_SetSensorExifInfo(SENSOR_EXIF_CTRL_SCENECAPTURETYPE,(uint32_t) mode);
-	SENSOR_PRINT("SENSOR: _s5k4ec_set_work_mode: mode = %d \n", mode);
-	return 0;
+	s_cur_scene = mode;
+	return SENSOR_SUCCESS;
 }
 
-LOCAL uint16_t s_current_shutter = 0;
-LOCAL uint16_t s_current_gain = 0;
 LOCAL uint32_t _s5k4ec_BeforeSnapshot(uint32_t param)
 {
+	struct camera_context *cxt = camera_get_cxt();
 	uint32_t capture_mode = param & 0xffff;
+	s_flash_mode_en = cxt->cmr_set.flash;
+
+	SENSOR_PRINT_HIGH("Begin. capture_mode=%d", capture_mode);
+
+	if(1 != capture_mode)
+		is_cap = 1;
+
+	// Use the global context to find out whether we are using
+	// camera flash or not (assuming the autoflash has been
+	// reduced to a YES or NO flash question)
+	if (FLASH_CLOSE != s_flash_mode_en)
+		s5k4ec_main_flash(1);
+
+	if (LIGHT_STATUS_IS_LOW(s5k4ec_lightcheck())) {
+		SENSOR_PRINT_HIGH("Low light environment detected");
+		if (s_cur_scene == CAMERA_SCENE_MODE_NIGHT ||
+			s_cur_scene == CAMERA_SCENE_MODE_FIREWORK) {
+			SENSOR_PRINT_HIGH("Night mode activate");
+			s5k4ec_I2C_write(s5k4ec_night_mode_On);
+			s_current_env = 2;
+		} else {
+			SENSOR_PRINT_HIGH("Low cap mode activate");
+			s5k4ec_I2C_write(s5k4ec_low_cap_On);
+			s_current_env = 1;
+		}
+	}
 
-	SENSOR_PRINT("SENSOR: _s5k4ec_BeforeSnapshot = %d \n", capture_mode);
-	if(1 != capture_mode){
-        is_cap = 1;
-    }
 	Sensor_SetMode(capture_mode);
-	usleep(10*1000);
+	SENSOR_Sleep(10);
 
-    SENSOR_PRINT("SENSOR: s_current_shutter,s_current_gain = %x,%x \n", s_current_shutter,s_current_gain);
-    return SENSOR_SUCCESS;
+	SENSOR_PRINT_HIGH("s_current_shutter,s_current_gain = %x,%x", s_current_shutter,s_current_gain);
+	return SENSOR_SUCCESS;
 }
-
+#if 0
 LOCAL uint32_t _s5k4ec_check_image_format_support(uint32_t param)
 {
 	uint32_t ret_val = SENSOR_FAIL;
 	SENSOR_PRINT("SENSOR: _s5k4ec_check_image_format_support \n");
 	switch (param) {
-	case SENSOR_IMAGE_FORMAT_YUV422:
-		ret_val = SENSOR_SUCCESS;
-		break;
-	case SENSOR_IMAGE_FORMAT_JPEG:
-		ret_val = SENSOR_SUCCESS;
-		break;
-	default:
-		break;
+		case SENSOR_IMAGE_FORMAT_YUV422:
+			ret_val = SENSOR_SUCCESS;
+			break;
+		case SENSOR_IMAGE_FORMAT_JPEG:
+			ret_val = SENSOR_SUCCESS;
+			break;
+		default:
+			break;
 	}
 	return ret_val;
 }
-
+#endif
+#if 0
 LOCAL uint32_t _s5k4ec_pick_out_jpeg_stream(uint32_t param)
 {
-#if 0
 	uint8_t *p_frame =
 	    ((DCAMERA_SNAPSHOT_RETURN_PARAM_T *) param)->return_data_addr;
 	uint32_t buf_len =
@@ -5718,10 +889,10 @@ LOCAL uint32_t _s5k4ec_pick_out_jpeg_stream(uint32_t param)
 	}
 
 	return i;
-#endif
         SENSOR_PRINT("SENSOR: _s5k4ec_pick_out_jpeg_stream \n");
 	return 0;
 }
+#endif
 
 #if 0
 LOCAL uint32_t _s5k4ec_chang_image_format(uint32_t param)
@@ -5750,33 +921,32 @@ LOCAL uint32_t _s5k4ec_chang_image_format(uint32_t param)
 
 LOCAL uint32_t _s5k4ec_after_snapshot(uint32_t param)
 {
-	SENSOR_PRINT("=========sonia SENSOR: _s5k4ec_after_snapshot =%d \n",param);
-	uint32_t with,height=0;
+	SENSOR_PRINT_HIGH("=========sonia SENSOR: _s5k4ec_after_snapshot %u",param);
+	uint16_t width, height=0;
+
+	if (FLASH_CLOSE != s_flash_mode_en)
+		s5k4ec_main_flash(0);
+
+	// Reset the low (light) capture settings as soon as possible.
+	if (2 == s_current_env) {
+		s5k4ec_I2C_write(s5k4ec_night_mode_Off);
+	} else if (1 == s_current_env) {
+		s5k4ec_I2C_write(s5k4ec_low_cap_Off);
+	}
+	s_current_env = 0;
 
 	//_s5k4ec_recovery_init();
-	Sensor_SetMode(param);
+	Sensor_SetMode((uint32_t)param);
 	//SENSOR_Sleep(10);
 	is_cap = 0;
 
-	//Sensor_WriteReg(0x002c, 0x7000);
-	//Sensor_WriteReg(0x002e, 0x1d02);
-	//with   = Sensor_ReadReg(0x0f12);
-	//height = Sensor_ReadReg(0x0f12);
-	//SENSOR_PRINT("SENSOR: _s5k4ec_after_snapshot:with=%x, height=%x.\n",with,height);
-
-	return SENSOR_SUCCESS;
-}
-
-LOCAL uint32_t _s5k4ec_flash(uint32_t param)
-{
-	SENSOR_PRINT("SENSOR: _s5k4ec_flash:param=%d .\n",param);
-
-	/* enable flash, disable in _s5k4ec_BeforeSnapshot */
-	g_flash_mode_en = param;
 
-	Sensor_SetFlash(param);
-
-	SENSOR_PRINT("SENSOR: _s5k4ec_flash:end .\n");
+	Sensor_WriteReg(0x002C, 0x7000);
+	Sensor_WriteReg(0x002E, 0x1D02);
+	width = Sensor_ReadReg(0x0f12);
+	Sensor_WriteReg(0x002E, 0x2BC4);
+	height = Sensor_ReadReg(0x0F12);
+	SENSOR_PRINT_HIGH("width=%x, height=%x",width,height);
 
 	return SENSOR_SUCCESS;
 }
@@ -5785,7 +955,7 @@ LOCAL uint32_t _s5k4ec_MatchZone(SENSOR_EXT_FUN_T_PTR param_ptr)
 {
 	SENSOR_RECT_T zone_rect;
 	uint32_t rtn=SENSOR_SUCCESS;
-    memset((void*)&zone_rect, 0, sizeof(SENSOR_RECT_T));
+	memset((void*)&zone_rect, 0, sizeof(SENSOR_RECT_T));
 	switch (param_ptr->cmd)
 	{
 	case SENSOR_EXT_FOCUS_START:
@@ -5833,202 +1003,349 @@ LOCAL uint32_t _s5k4ec_MatchZone(SENSOR_EXT_FUN_T_PTR param_ptr)
 	return rtn;
 }
 
-LOCAL uint32_t _s5k4ec_AutoFocusTrig(SENSOR_EXT_FUN_PARAM_T_PTR param_ptr)
+LOCAL uint32_t _s5k4ec_AutoFocusTrig(__attribute__((unused)) SENSOR_EXT_FUN_PARAM_T_PTR param_ptr)
 {
-	uint32_t rtn=SENSOR_SUCCESS;
-	uint16_t i=30;
-	uint16_t reg_value=0x00;
-	SENSOR_PRINT("Start");
-	Sensor_WriteReg(0xFCFC, 0xD000);
-	Sensor_WriteReg(0x0028, 0x7000);
-	Sensor_WriteReg(0x002A, 0x028E);
-	Sensor_WriteReg(0x0F12, 0x001a);
-	Sensor_WriteReg(0x002A, 0x028C);
-	Sensor_WriteReg(0x0F12, 0x0005);
-	do {
-		usleep(100*1000);
+	struct camera_context *cxt = camera_get_cxt();
+	uint32_t rtn = SENSOR_FAIL;
+	uint16_t reg_value;
+	uint16_t frame_time = s5k4ecgx_get_frame_time();
+	int8_t flash_mode = cxt->cmr_set.flash;
+	int fresh = 1, retries = 7; // for workaround
+	int i;
+
+	SENSOR_PRINT_HIGH("Start");
+
+	// Use the global context to find out whether we are using
+	// camera flash or not (assuming the autoflash has been
+	// reduced to a YES or NO flash question)
+	if (flash_mode != FLASH_CLOSE) {
+		s5k4ecgx_fast_ae(1);
+		s5k4ec_preflash_af(1);
+		SENSOR_Sleep(100);
+
+		s5k4ec_wait_until_ae_stable();
+		// Lock AWB + AE
+		_s5k4ec_set_awb(0);
+	}
+
+	s5k4ec_I2C_write(s5k4ec_single_AF_start);
+
+	/*
+	 * 2 frame delay before checking the result of the
+	 * first phase, too early or we would get an error
+	 * value.
+	 */
+	SENSOR_Sleep(frame_time*2);
+
+
+	for (i = 30; i--; ) {
+		SENSOR_Sleep(frame_time);
 		Sensor_WriteReg(0x002C, 0x7000);
 		Sensor_WriteReg(0x002E, 0x2EEE);
 		reg_value = Sensor_ReadReg(0x0F12);
-		i--;
-		if ((0x00 == i) || (0x0 == reg_value)) {
-			SENSOR_PRINT("error!");
-			rtn = SENSOR_FAIL;
+
+		if (0x2 == reg_value) {
+			SENSOR_PRINT_HIGH("[1st]AF -Success");
 			break;
+		} else if ((0x1 == reg_value) && (i > 0)) {
+			SENSOR_PRINT_HIGH("[1st]AF -Progress");
+			fresh = 0;
+			continue;
 		}
-	} while (0x2 != reg_value);
-	return rtn;
-}
 
-LOCAL uint32_t _s5k4ec_AutoFocusZone(SENSOR_EXT_FUN_PARAM_T_PTR param_ptr)
-{
-	uint32_t i=30; // 30 * 100 = 3 seconds
-	uint16_t reg_value=0x00;
-	uint32_t rtn=SENSOR_SUCCESS;
-	uint32_t j=0;
+		// Erroneous state, when reg_value is
+		// either of the following: 0,3,4,6,8
+		// In the case of both timeout and error
+		// Give the error message a higher precedence
+		if (reg_value != 0x1 || reg_value != 2) {
+			/*
+			 * Issue: Unknown delay between AF start and progress checks.
+			 * Specially after setting the AF window, there would be
+			 * some unknown delay before the AF can actually start.
+			 * Unfortunately, it also seemed that it's independent of
+			 * the frame rate. One characteristic of this problem
+			 * is that it only happens at the start of each AF focusing.
+			 *
+			 * If we get an error at the start, try to skip it up to
+			 * 7 times. When a single Progress is received, we go on
+			 * as usual.
+			 */
+			if ((fresh == 1) && retries) {
+				SENSOR_PRINT_ERR("[1st]AF -Setup");
+				retries--;
+				continue;
+			}
 
-	return rtn;
-}
+			SENSOR_PRINT_ERR("[1st]AF -Error!");
+		} else if (i <= 0) {
+			SENSOR_PRINT_ERR("[1st]AF -Timeout!");
+		}
 
-LOCAL uint32_t _s5k4ec_AutoFocusMultiZone(SENSOR_EXT_FUN_PARAM_T_PTR param_ptr)
-{
-	uint32_t rtn=SENSOR_SUCCESS;
-	SENSOR_EXT_FUN_T ext_param[5];
-	uint32_t i=100;
-	uint16_t reg_value=0x00;
-	uint32_t zone_cnt = 0;
-	uint32_t zone_num = 0x90;
+		// Reset AF mode setting
+		// _s5k4ecgx_set_focus_mode(s_focus_mode);
+
+		// In the stock rom, this reg setting should be
+		// enough to reset the AF... should be.
+		s5k4ec_I2C_write(s5k4ec_AF_off_1);
+		goto cleanup;
+	};
+
+
+	for (i = 60; i--; ) {
+		SENSOR_Sleep(frame_time);
+		Sensor_WriteReg(0x002C, 0x7000);
+		Sensor_WriteReg(0x002E, 0x2207);
+		reg_value = Sensor_ReadReg(0x0F12);
+
+		// They say that the least significant byte
+		// can be non-zero even on success so ignore it.
+		if (0x0 == (reg_value & 0xFF00)) {
+			SENSOR_PRINT_HIGH("[2nd]AF -Success");
+			break;
+		}
+
+		SENSOR_PRINT_HIGH("[2nd]AF -Progress");
+	}
+	rtn = SENSOR_SUCCESS;
+
+cleanup:
+	if (flash_mode != FLASH_CLOSE) {
+		s5k4ecgx_fast_ae(0);
+		s5k4ec_preflash_af(0);
+	}
+	SENSOR_PRINT_HIGH("Done.");
 
 	return rtn;
 }
 
-LOCAL uint32_t _s5k4ec_AutoFocusMacro(SENSOR_EXT_FUN_PARAM_T_PTR param_ptr)
+LOCAL uint32_t _s5k4ec_AutoFocusMultiZone(__attribute__((unused)) SENSOR_EXT_FUN_PARAM_T_PTR param_ptr)
 {
-	uint32_t rtn=SENSOR_SUCCESS;
-	uint16_t i=30;
-	uint16_t reg_value=0x00;
+	SENSOR_PRINT_ERR("Not yet implemented");
+	return SENSOR_SUCCESS;
+}
 
-	return rtn;
+LOCAL uint32_t _s5k4ecgx_set_focus_touch_position(SENSOR_EXT_FUN_PARAM_T_PTR param_ptr)
+{
+	uint16_t reg_value;
+	uint16_t width, height;
+	uint16_t outer_window_width, outer_window_height,
+			inner_window_width, inner_window_height;
+
+	uint16_t inner_x, inner_y, outer_x, outer_y;
+	uint16_t touch_x, touch_y;
+
+	width = s_s5k4ec_resolution_Tab_YUV[SENSOR_MODE_PREVIEW_ONE].width;
+	height = s_s5k4ec_resolution_Tab_YUV[SENSOR_MODE_PREVIEW_ONE].height;
+	touch_x = param_ptr->zone[0].x;
+	touch_y = param_ptr->zone[0].y;
+	SENSOR_PRINT_HIGH("Start x=%d, y=%d, w=%d, h=%d, width=%d height=%d",
+		param_ptr->zone[0].x,param_ptr->zone[0].y, param_ptr->zone[0].w, param_ptr->zone[0].h,
+		width, height
+	);
+
+	Sensor_WriteReg(0xFCFC, 0xD000);
+	Sensor_WriteReg(0x002C, 0x7000);
+	Sensor_WriteReg(0x002E, 0x0298);
+	reg_value = Sensor_ReadReg(0x0F12);
+	SENSOR_PRINT_HIGH("outer_width : %x(%d)", reg_value, reg_value);
+	outer_window_width = (reg_value * width / 1024);
+
+	Sensor_WriteReg(0x002E, 0x029A);
+	reg_value = Sensor_ReadReg(0x0F12);
+	SENSOR_PRINT_HIGH("outer_height : %x(%d)", reg_value, reg_value);
+	outer_window_height = (reg_value * height / 1024);
+
+
+	Sensor_WriteReg(0x002E, 0x02A0);
+	reg_value = Sensor_ReadReg(0x0F12);
+	SENSOR_PRINT_HIGH("inner_width : %x(%d)", reg_value, reg_value);
+	inner_window_width = (reg_value * width / 1024);
+
+
+	Sensor_WriteReg(0x002E, 0x02A2);
+	reg_value = Sensor_ReadReg(0x0F12);
+	SENSOR_PRINT_HIGH("inner_height : %x(%d)", reg_value, reg_value);
+	inner_window_height = (reg_value * height / 1024);
+
+	if (touch_x <= inner_window_width/2) {
+		// inner window, outer window should be positive.
+		outer_x = 0;
+		inner_x = 0;
+	} else if (touch_x <= outer_window_width/2) {
+		// outer window should be positive.
+		inner_x = touch_x - inner_window_width/2;
+		outer_x = 0;
+	} else if (touch_x >= ((width - 1) - inner_window_width/2)) {
+		// inner window, outer window should be less than LCD Display Size
+		inner_x = (width - 1) - inner_window_width;
+		outer_x = (width - 1) - outer_window_width;
+	} else if (touch_x >= ((width -1) - outer_window_width/2)) {
+		// outer window should be less than LCD Display Size
+		inner_x = touch_x - inner_window_width/2;
+		outer_x = (width -1) - outer_window_width;
+	} else {
+		// touch_x is not in a corner, so set using touch point.
+		inner_x = touch_x - inner_window_width/2;
+		outer_x = touch_x - outer_window_width/2;
+	}
+
+	if (touch_y <= inner_window_height/2) {
+		// inner window, outer window should be positive.
+		outer_y = 0;
+		inner_y = 0;
+	} else if (touch_y <= outer_window_height/2) {
+		// outer window should be positive.
+		inner_y = touch_y - inner_window_height/2;
+		outer_y = 0;
+	} else if (touch_y >= ((height - 1) - inner_window_height/2)) {
+		// inner window, outer window should be less than LCD Display Size
+		inner_y = (height - 1) - inner_window_height;
+		outer_y = (height - 1) - outer_window_height;
+	} else if (touch_y >= ((height - 1) - outer_window_height/2)) {
+		// outer window should be less than LCD Display Size
+		inner_y = touch_y - inner_window_height/2;
+		outer_y = (height - 1) - outer_window_height;
+	} else {
+		// touch_x is not in a corner, so set using touch point.
+		inner_y = touch_y - inner_window_height/2;
+		outer_y = touch_y - outer_window_height/2;
+	}
+
+	if (!outer_x) outer_x = 1;
+	if (!outer_y) outer_y = 1;
+	if (!inner_x) inner_x= 1;
+	if (!inner_y) inner_y= 1;
+
+
+	SENSOR_PRINT_HIGH("touch position(%d, %d), preview size(%d, %d)",
+			touch_x, touch_y, width, height);
+	SENSOR_PRINT_HIGH("point first(%d, %d), second(%d, %d)",
+			outer_x, outer_y, inner_x, inner_y);
+
+	Sensor_WriteReg(0xFCFC, 0xD000);
+	Sensor_WriteReg(0x0028, 0x7000);
+	Sensor_WriteReg(0x002A, 0x0294);       //AF window setting
+	Sensor_WriteReg(0x0F12, outer_x * 1024 / width);       //REG_TC_AF_FstWinStartX
+	Sensor_WriteReg(0x0F12,  outer_y * 1024 / height);       //REG_TC_AF_FstWinStartY
+	Sensor_WriteReg(0x002A, 0x029C);       //AF window setting
+	Sensor_WriteReg(0x0F12, inner_x * 1024 / width);       //REG_TC_AF_ScndWinStartX
+	Sensor_WriteReg(0x0F12, inner_y * 1024 / height);       //REG_TC_AF_ScndWinStartY
+	Sensor_WriteReg(0x002A, 0x02A4);       //AF window setting
+	Sensor_WriteReg(0x0F12, 0x0001);       //REG_TC_AF_WinSizesUpdated
+
+	SENSOR_PRINT_HIGH("REG_TC_AF_FstWinStartX 0x%04X(%d), REG_TC_AF_FstWinStartY0x%04X(%d),",
+			outer_x * 1024 / width, outer_x * 1024 / width,
+			outer_y * 1024 / width, outer_y * 1024 / width);
+	SENSOR_PRINT_HIGH("REG_TC_AF_ScndWinStartX 0x%04X(%d), REG_TC_AF_ScndWinStartY 0x%04X(%d),",
+			inner_x * 1024 / width, inner_x * 1024 / width,
+			inner_y * 1024 / width, inner_y * 1024 / width);
+
+	s_af_wnd_has_changed = 1;
+
+	return SENSOR_SUCCESS;
+}
+
+LOCAL uint32_t _s5k4ecgx_reset_focus_touch_position(void)
+{
+	SENSOR_PRINT_HIGH("Reset AF Window setting");
+
+	if (!s_af_wnd_has_changed){
+		SENSOR_PRINT_HIGH("Window hasn't been changed");
+		return SENSOR_SUCCESS;
+	}
+
+	Sensor_WriteReg(0xFCFC, 0xD000);
+	Sensor_WriteReg(0x0028, 0x7000);
+	Sensor_WriteReg(0x002A, 0x0294);//AF window setting
+	Sensor_WriteReg(0x0F12, 0x0100);//294 //REG_TC_AF_FstWinStartX
+	Sensor_WriteReg(0x0F12, 0x00E3);//296 //REG_TC_AF_FstWinStartY
+	Sensor_WriteReg(0x0F12, 0x0200);//298
+	Sensor_WriteReg(0x0F12, 0x0238);//29A
+	Sensor_WriteReg(0x0F12, 0x01C6);//29C //REG_TC_AF_ScndWinStartX
+	Sensor_WriteReg(0x0F12, 0x0166);//29E //REG_TC_AF_ScndWinStartY
+	Sensor_WriteReg(0x0F12, 0x0074);//2A0
+	Sensor_WriteReg(0x0F12, 0x0132);//2A2
+	Sensor_WriteReg(0x0F12, 0x0001);//2A4 //REG_TC_AF_WinSizesUpdated
+	s_af_wnd_has_changed = 0;
+	SENSOR_PRINT_HIGH("Done.");
+
+	return SENSOR_SUCCESS;
 }
 
 LOCAL uint32_t _s5k4ec_StartAutoFocus(uint32_t param)
 {
 	uint32_t rtn = SENSOR_SUCCESS;
 	SENSOR_EXT_FUN_PARAM_T_PTR ext_ptr = (SENSOR_EXT_FUN_PARAM_T_PTR) param;
-	SENSOR_PRINT("SENSOR: _s5k4ec_StartAutoFocus param =%d", ext_ptr->param);
+	SENSOR_PRINT_HIGH("Start. param = %d", ext_ptr->param);
+
+	s5k4ec_low_light_AF_check();
+
+	// This function usualy is activated when doing AF mode is macro
+	// But some camera apps doesn't even expose changing AF modes...
+	_s5k4ecgx_set_focus_touch_position(ext_ptr);
 
 	switch (ext_ptr->param) {
-	case SENSOR_EXT_FOCUS_TRIG:
-		rtn = _s5k4ec_AutoFocusTrig(ext_ptr);
-		break;
-	case SENSOR_EXT_FOCUS_ZONE:
-		rtn = _s5k4ec_AutoFocusZone(ext_ptr);
-		break;
 	case SENSOR_EXT_FOCUS_MULTI_ZONE:
 		rtn = _s5k4ec_AutoFocusMultiZone(ext_ptr);
 		break;
 	case SENSOR_EXT_FOCUS_MACRO:
-		rtn = _s5k4ec_AutoFocusMacro(ext_ptr);
+		rtn |= _s5k4ec_AutoFocusTrig(ext_ptr);
 		break;
+	case SENSOR_EXT_FOCUS_TRIG:
+		// Function not in vendor blob, used to revert any changes by
+		// _s5k4ecgx_set_focus_touch_position().
+		// Uncomment when you used _s5k4ecgx_set_focus_touch_position()
+		// only for AF Macro.
+		// rtn = _s5k4ecgx_reset_focus_touch_position();
+		rtn |= _s5k4ec_AutoFocusTrig(ext_ptr);
+	case SENSOR_EXT_FOCUS_ZONE:
 	default:
 		break;
 	}
+	SENSOR_PRINT_HIGH("Done.");
 	return rtn;
 }
 
 LOCAL uint32_t _s5k4ec_ExposureAuto(void)
 {
-	uint32_t rtn=SENSOR_SUCCESS;
+	SENSOR_PRINT_ERR("Not implemented");
 
-	SENSOR_PRINT("SENSOR: _s5k4ec_ExposureAuto \n");
-
-	//Sensor_WriteReg(0x501d, 0x00);
-
-	return rtn;
+	return SENSOR_SUCCESS;
 }
 
-LOCAL uint32_t _s5k4ec_ExposureZone(SENSOR_EXT_FUN_T_PTR param_ptr)
+LOCAL uint32_t _s5k4ec_ExposureZone(__attribute__((unused)) SENSOR_EXT_FUN_T_PTR param_ptr)
 {
-	uint32_t rtn=SENSOR_SUCCESS;
-
-#if 0 //exposure zone \B2\BB\B8Ķ\AF
-
-	SENSOR_EXT_FUN_T_PTR ext_ptr=(SENSOR_EXT_FUN_T_PTR)param_ptr;
-	uint16_t reg_value=0x00;
-
-	SENSOR_PRINT("SENSOR: _s5k4ec_ExposureZone: %d, %d \n",ext_ptr->zone.x,ext_ptr->zone.y);
-
-	rtn=_s5k4ec_MatchZone(ext_ptr);
-
-	if(SENSOR_SUCCESS==rtn)
-	{
-		// h zone
-		if(0x00<(ext_ptr->zone.x-(EXPOSURE_ZONE_W/0x08)))
-		{
-			ext_ptr->zone.x-=(EXPOSURE_ZONE_W/0x08);
-		}
-		else
-		{
-			ext_ptr->zone.x=0x00;
-		}
-		ext_ptr->zone.w=EXPOSURE_ZONE_W/0x04;
-		if(EXPOSURE_ZONE_W<(ext_ptr->zone.x+ext_ptr->zone.w))
-		{
-			ext_ptr->zone.x=EXPOSURE_ZONE_W-(EXPOSURE_ZONE_W/0x04);
-		}
+	SENSOR_PRINT_ERR("Not implemented");
 
-		// v zone
-		if(0x00<(ext_ptr->zone.y-(EXPOSURE_ZONE_H/0x08)))
-		{
-			ext_ptr->zone.y-=(EXPOSURE_ZONE_H/0x08);
-		}
-		else
-		{
-			ext_ptr->zone.y=0x00;
-		}
-		ext_ptr->zone.h=EXPOSURE_ZONE_H/0x04;
-		if(EXPOSURE_ZONE_H<(ext_ptr->zone.y+ext_ptr->zone.h))
-		{
-			ext_ptr->zone.y=EXPOSURE_ZONE_H-(EXPOSURE_ZONE_H/0x04);
-		}
-
-		SENSOR_PRINT("SENSOR: _s5k4ec_ExposureZone: %d, %d, %d, %d \n",
-			     ext_ptr->zone.x, ext_ptr->zone.y, ext_ptr->zone.w,
-			     ext_ptr->zone.h);
-
-		reg_value=((ext_ptr->zone.x>>0x08)&0x07);
-		Sensor_WriteReg(0x5680, reg_value);
-		reg_value=(ext_ptr->zone.x&0xff);
-		Sensor_WriteReg(0x5681, reg_value);
-
-		reg_value=((ext_ptr->zone.y>>0x08)&0x07);
-		Sensor_WriteReg(0x5682, reg_value);
-		reg_value=(ext_ptr->zone.y&0xff);
-		Sensor_WriteReg(0x5683, reg_value);
-
-		reg_value=((ext_ptr->zone.w>>0x08)&0x0f);
-		Sensor_WriteReg(0x5684, reg_value);
-		reg_value=(ext_ptr->zone.w&0xff);
-		Sensor_WriteReg(0x5685, reg_value);
-
-		reg_value=((ext_ptr->zone.h>>0x08)&0x0f);
-		Sensor_WriteReg(0x5686, reg_value);
-		reg_value=(ext_ptr->zone.h&0xff);
-		Sensor_WriteReg(0x5687, reg_value);
-
-		Sensor_WriteReg(0x501d, 0x10);
-
-	}
-#endif
-	return rtn;
+	return SENSOR_SUCCESS;
 }
 
 LOCAL uint32_t _s5k4ec_StartExposure(uint32_t param)
 {
 	uint32_t rtn=SENSOR_SUCCESS;
-    //exposure
-    SENSOR_EXT_FUN_T_PTR ext_ptr=(SENSOR_EXT_FUN_T_PTR)param;
 
-	SENSOR_PRINT("SENSOR: _s5k4ec_StartExposure param =%d \n",
-		     ext_ptr->param);
-#if 0
+	SENSOR_EXT_FUN_T_PTR ext_ptr=(SENSOR_EXT_FUN_T_PTR)param;
+
+	SENSOR_PRINT("param=%d", ext_ptr->param);
 	switch (ext_ptr->param) {
-	case SENSOR_EXT_EXPOSURE_AUTO:
-		rtn = _s5k4ec_ExposureAuto();
-		break;
-	case SENSOR_EXT_EXPOSURE_ZONE:
-		rtn = _s5k4ec_ExposureZone(ext_ptr);
-		break;
-	default:
-		break;
-    }
-#endif
-    return rtn;
+		case SENSOR_EXT_EXPOSURE_AUTO:
+			rtn = _s5k4ec_ExposureAuto();
+			break;
+		case SENSOR_EXT_EXPOSURE_ZONE:
+			rtn = _s5k4ec_ExposureZone(ext_ptr);
+		/* Fall-through */
+		default:
+			break;
+	}
+
+	return rtn;
 }
+
 LOCAL uint32_t _s5k4ec_SetEV(uint32_t param)
 {
 	uint32_t rtn = SENSOR_SUCCESS;
 	SENSOR_EXT_FUN_PARAM_T_PTR ext_ptr = (SENSOR_EXT_FUN_PARAM_T_PTR) param;
+
 	SENSOR_PRINT("SENSOR: _s5k4ec_SetEV param: 0x%x", ext_ptr->param);
 	uint32_t shutter = 0;
 	uint32_t gain = 0;
@@ -6036,32 +1353,13 @@ LOCAL uint32_t _s5k4ec_SetEV(uint32_t param)
 	uint32_t ev = ext_ptr->param;
 	switch(ev) {
 	case SENSOR_HDR_EV_LEVE_0:
-		Sensor_WriteReg(0x0028, 0x7000);
-		Sensor_WriteReg(0x002A, 0x04E6);
-		Sensor_WriteReg(0x0F12, 0x0679);
-		shutter =(uint32_t) s_current_shutter/2;
-		s_current_shutter = s_current_shutter>>2;
-		gain = (uint32_t)s_current_gain/4;
-		SENSOR_PRINT("SENSOR: SENSOR_HDR_EV_LEVE_0: 0x%x,0x%x", (uint16_t)shutter,(uint16_t)gain);
-		Sensor_WriteReg(0x0028, 0x7000);
-		Sensor_WriteReg(0x002A, 0x04AC);
-		Sensor_WriteReg(0x0F12, (uint16_t)shutter);
-		Sensor_WriteReg(0x0028, 0x7000);
-		Sensor_WriteReg(0x002A, 0x04B0);
-		Sensor_WriteReg(0x0F12, 0x0001);
-
-		Sensor_WriteReg(0x0028, 0x7000);
-		Sensor_WriteReg(0x002A, 0x04C8);
-		Sensor_WriteReg(0x0F12, (uint16_t)gain);
-		Sensor_WriteReg(0x0028, 0x7000);
-		Sensor_WriteReg(0x002A, 0x04CA);
-		Sensor_WriteReg(0x0F12, 0x0001);
+		s5k4ec_I2C_write(s5k4ec_ev_tab[0]);
 		break;
 	case SENSOR_HDR_EV_LEVE_1:
-
+		s5k4ec_I2C_write(s5k4ec_ev_tab[3]);
 		break;
 	case SENSOR_HDR_EV_LEVE_2:
-
+		s5k4ec_I2C_write(s5k4ec_ev_tab[6]);
 		break;
 	default:
 		break;
@@ -6079,46 +1377,31 @@ LOCAL uint8_t af_firmware[] = {
 LOCAL int _s5k4ec_init_firmware(uint32_t param)
 {
 	int ret = 0;
-	#if 0
 	uint32_t i = 0;
 	uint32_t init_num = NUMBER_OF_ARRAY(af_firmware);
 	SENSOR_EXT_FUN_PARAM_T_PTR ext_ptr = (SENSOR_EXT_FUN_PARAM_T_PTR)param;
 	uint8_t  *reg_ptr = af_firmware;
-	struct i2c_msg msg_w;
-	struct i2c_client *i2c_client = Sensor_GetI2CClien();
 	uint16_t reg_val_1,reg_val_2;
 
-	if (0 == i2c_client) {
-		SENSOR_PRINT_HIGH("SENSOR: _s5k4ec_init_firmware:error,i2c_client is NULL!.\n");
-	}
-	//      sc8810_i2c_set_clk(1,400000); //wjp
 	SENSOR_PRINT_HIGH("SENSOR: _s5k4ec_init_firmware: cmd=%d!.\n", ext_ptr->cmd);
-	switch (ext_ptr->param)
-	{
+	switch (ext_ptr->param)	{
 	 case SENSOR_EXT_FOCUS_TRIG:	//auto focus
 		    reg_ptr = af_firmware;
 		    break;
 	 default:
 		    break;
 	}
+
 	Sensor_WriteReg(0x3000, 0x20);
 	for (i = 0; i < 4; i++) {
-		msg_w.addr = i2c_client->addr;
-		msg_w.flags = 0;
-		msg_w.buf = reg_ptr;
-		msg_w.len = init_num;
-		ret = i2c_transfer(i2c_client->adapter, &msg_w, 1);
-		if (ret != 1) {
-			SENSOR_PRINT_ERR
-			    ("SENSOR: write sensor reg fai, ret : %d, I2C w addr: 0x%x, \n",
-			     ret, i2c_client->addr);
+		ret = Sensor_WriteData(reg_ptr, init_num);
+		if (ret != 0) {
+			SENSOR_PRINT_ERR("SENSOR: write sensor reg fai, ret : %d\n", ret);
 			continue;
-		} else {
-			ret = 0;
-			break;
 		}
+		break;
 	}
-	Sensor_WriteReg(0x3022, 0x00);
+// 	Sensor_WriteReg(0x3022, 0x00);
 	Sensor_WriteReg(0x3023, 0x00);
 	Sensor_WriteReg(0x3024, 0x00);
 	Sensor_WriteReg(0x3025, 0x00);
@@ -6132,10 +1415,10 @@ LOCAL int _s5k4ec_init_firmware(uint32_t param)
 	reg_val_2 = Sensor_ReadReg(0x3004);
 	//      sc8810_i2c_set_clk(1,100000); //wjp
 	SENSOR_PRINT_HIGH("SENSOR: _s5k4ec_init_firmware: E!.\n");
-
+#if 0
 	//SENSOR_PRINT_HIGH("SENSOR: 0x3029=0x%x,0x3000=0x%x,0x3004=0x%x.\n",Sensor_ReadReg(0x3029),reg_val_1,reg_val_2);
 	//SENSOR_PRINT_HIGH("SENSOR: 0x8000=0x%x,0x8002=0x%x,0x8f57=0x%x.\n",Sensor_ReadReg(0x8000),Sensor_ReadReg(0x8002),Sensor_ReadReg(0x8f57));
-	#endif
+#endif
 	return ret;
 }
 
@@ -6145,19 +1428,21 @@ LOCAL uint32_t _s5k4ec_ExtFunc(uint32_t ctl_param)
 	uint32_t rtn = SENSOR_SUCCESS;
 
 	SENSOR_EXT_FUN_PARAM_T_PTR ext_ptr =(SENSOR_EXT_FUN_PARAM_T_PTR) ctl_param;
-	SENSOR_PRINT("SENSOR: _s5k4ec_ExtFunc cmd:0x%x  \n", ext_ptr->cmd);
+	SENSOR_PRINT_HIGH("cmd:0x%x", ext_ptr->cmd);
 
 	switch (ext_ptr->cmd)
 	{
-	 case SENSOR_EXT_FUNC_INIT://AF \B3\F5ʼ\BB\AF
-		    //rtn = _s5k4ec_init_firmware(ctl_param);
-		    break;
-	 case SENSOR_EXT_FOCUS_START://AF
-		    //rtn = _s5k4ec_StartAutoFocus(ctl_param);
-		    break;
-	case SENSOR_EXT_EXPOSURE_START://\C6ع\E2
-		    //rtn = _s5k4ec_StartExposure(ctl_param);
-		    break;
+	 case SENSOR_EXT_FUNC_INIT:
+		rtn = _s5k4ec_init_firmware(ctl_param);
+		break;
+	 case SENSOR_EXT_FOCUS_START:
+		rtn = _s5k4ec_StartAutoFocus(ctl_param);
+		break;
+	case SENSOR_EXT_EXPOSURE_START:
+		rtn = _s5k4ec_StartExposure(ctl_param);
+		break;
+	case SENSOR_EXT_EV:
+		rtn = _s5k4ec_SetEV(ctl_param);
 	default:
 		    break;
 	}
@@ -6183,12 +1468,12 @@ LOCAL uint32_t _s5k4ec_recovery_init()
 	return 0;
 }
 
-LOCAL uint32_t _s5k4ec_StreamOn(uint32_t param)
+LOCAL uint32_t _s5k4ec_StreamOn(__attribute__((unused)) uint32_t param)
 {
-	SENSOR_PRINT("SENSOR:Start s5k4ec_steamon 1613\n");
+	SENSOR_PRINT_HIGH("SENSOR:Start s5k4ec_steamon 1613");
 
 	if (1 != is_cap) {
-		SENSOR_PRINT("zxdbg preview stream on");
+		SENSOR_PRINT_HIGH("zxdbg preview stream on");
 		Sensor_WriteReg(0x0028, 0x7000);
 		Sensor_WriteReg(0x002A, 0x023E);
 		Sensor_WriteReg(0x0F12, 0x0001);  //#REG_TC_GP_EnablePreview
@@ -6197,34 +1482,416 @@ LOCAL uint32_t _s5k4ec_StreamOn(uint32_t param)
 		Sensor_WriteReg (0x0028, 0xD000);
 		Sensor_WriteReg(0x002A, 0x1000);
 		Sensor_WriteReg(0x0F12, 0x0001);
+		SENSOR_Sleep(10);
 	} else {
-		SENSOR_PRINT("zxdbg capture stream on");
-		Sensor_WriteReg(0x0028, 0x7000);
-		Sensor_WriteReg(0x002A, 0x0242);
-		Sensor_WriteReg(0x0F12, 0x0001); // #REG_TC_GP_EnableCAPTURE // Start CAPTURE
-		Sensor_WriteReg(0x002A, 0x024E);
-		Sensor_WriteReg(0x0F12, 0x0001); // #REG_TC_GP_NewConfigSync // Update preview configuration
-		Sensor_WriteReg(0x002A, 0x0244);
-		Sensor_WriteReg(0x0F12, 0x0001); // #REG_TC_GP_EnableCAPTUREChanged
+		SENSOR_PRINT_HIGH("zxdbg capture stream on");
+		s5k4ec_I2C_write(s5k4ec_capture_start);
 	}
-	usleep(10*1000);
+
 	return 0;
 }
 
-LOCAL uint32_t _s5k4ec_StreamOff(uint32_t param)
+
+LOCAL uint32_t s5k4ec_I2C_write(SENSOR_REG_T* sensor_reg_ptr)
 {
-	SENSOR_PRINT("Stop");
-	Sensor_WriteReg(0x0028, 0x7000);
-	Sensor_WriteReg(0x002A, 0x023E);
-	Sensor_WriteReg(0x0F12, 0x0000);	//#REG_TC_GP_EnablePreview
+	uint16_t i;
+	SENSOR_REG_TAB_INFO_T infotab = {};
 
-	Sensor_WriteReg(0x0028, 0xD000);
-	Sensor_WriteReg(0x002A, 0xB0A0);
-	Sensor_WriteReg(0x0F12, 0x0000);	//Clear cont. clock befor config change
+	for(i = 0; (0xFFFF != sensor_reg_ptr[i].reg_addr) || (0xFFFF != sensor_reg_ptr[i].reg_value) ; i++)
+		   ;
+
+	infotab.sensor_reg_tab_ptr = sensor_reg_ptr;
+	infotab.reg_count = i;
+	SENSOR_PRINT_HIGH("count = %d", i);
+	Sensor_SendRegTabToSensor(&infotab);
+
+
+	 return 0;
+}
+
+LOCAL uint32_t s5k4ec_set_Metering(uint32_t metering_mode)
+{
+	if(metering_mode >= 3) {
+		SENSOR_PRINT_ERR("Undefined Metering mode %u", metering_mode);
+		return SENSOR_OP_PARAM_ERR;
+	}
+
+	switch(metering_mode) {
+		case 0:
+			s5k4ec_I2C_write(s5k4ec_metering_matrix);
+			break;
+		case 1:
+			s5k4ec_I2C_write(s5k4ec_metering_spot);
+			break;
+		case 2:
+			s5k4ec_I2C_write(s5k4ec_metering_center_weighted);
+			break;
+	}
+
+	SENSOR_PRINT_HIGH(
+		"Apply %s Metering mode ",
+		0 == metering_mode ? "Matrix" :
+		1 == metering_mode ? "Spot" :
+		"Center Weighted"
+	);
 
-	Sensor_WriteReg(0x0028, 0x7000);
-	Sensor_WriteReg(0x002A, 0x0240);
-	Sensor_WriteReg(0x0F12, 0x0001);	//#REG_TC_GP_EnablePreviewChanged
-	usleep(10*1000);
 	return 0;
 }
+
+LOCAL uint32_t s5k4ec_set_sharpness(uint32_t level)
+{
+	if(level >= 8) {
+		SENSOR_PRINT_ERR("Undefined Sharpness level %u", level);
+		return SENSOR_OP_PARAM_ERR;
+	}
+
+	SENSOR_PRINT_HIGH("Apply Sharpness level %u", level);
+	s5k4ec_I2C_write((SENSOR_REG_T*) s5k4ec_saturation_tab[level]);
+
+	return 0;
+
+}
+
+LOCAL uint32_t s5k4ec_lightcheck()
+{
+	uint16_t low_word = 0;
+	uint16_t high_word = 0;
+
+
+	Sensor_WriteReg(0xFCFC,0xD000);
+	Sensor_WriteReg(0x002C, 0x7000);
+	Sensor_WriteReg(0x002E, 0x2C18);
+	low_word = Sensor_ReadReg(0x0F12);
+	Sensor_WriteReg(0x002E, 0x2C1A);
+	high_word = Sensor_ReadReg(0x0F12);
+
+	SENSOR_PRINT_HIGH("Luminance results high=%x low=%x", low_word, high_word);
+
+	return low_word | (high_word <<16);
+
+}
+
+LOCAL uint32_t s5k4ec_flash(uint32_t param)
+{
+	uint32_t *autoflash = (uint32_t *)param;
+	uint32_t lux;
+
+	SENSOR_PRINT_HIGH("Start");
+
+	lux = s5k4ec_lightcheck();
+	if (LIGHT_STATUS_IS_LOW(lux)) {
+		SENSOR_PRINT_HIGH("Low light, using flash");
+		(*autoflash) = 1;
+	} else {
+		SENSOR_PRINT_HIGH("Normal light levels, not using flash");
+	}
+
+	SENSOR_PRINT_HIGH("Done.");
+
+	return SENSOR_SUCCESS;
+}
+
+LOCAL uint32_t s5k4ec_get_ISO_rate(void)
+{
+	uint16_t iso_a_gain= 0;
+	uint16_t iso_d_gain= 0;
+	uint32_t iso_gain, iso_rate;
+
+	SENSOR_PRINT_HIGH("Get ISO gain");
+
+	Sensor_WriteReg(0x002C, 0x7000);
+	Sensor_WriteReg(0x002E, 0x2BC4);
+	iso_a_gain = Sensor_ReadReg(0x00F12);
+	// Sensor_WriteReg(0x002E, 0x2BC6);
+	iso_d_gain = Sensor_ReadReg(0x00F12);
+
+	iso_gain = (iso_a_gain * iso_d_gain) / 384 /*200*/;
+
+	/* Convert ISO value */
+	if(iso_gain > 0x400)
+		iso_rate = 400;
+	else if(iso_gain > 0x200)
+		iso_rate = 200;
+	else if(iso_gain > 0x100)
+		iso_rate = 100;
+	else
+		iso_rate = 50;
+
+
+	if (!iso_gain)
+		SENSOR_PRINT_ERR("Failed. [ISO rate:%u gain: %u]", iso_rate, iso_gain);
+	else
+		SENSOR_PRINT_HIGH("Done. [ISO rate:%u gain: %u]", iso_rate, iso_gain);
+
+	return iso_rate;
+}
+
+LOCAL uint32_t s5k4ec_get_shutter_speed(void)
+{
+	uint16_t lsb, msb;
+	uint32_t exposure_time;
+
+	SENSOR_PRINT_HIGH("Get Shutter speed or exposure time");
+
+	Sensor_WriteReg(0xFCFC, 0xD000);
+	Sensor_WriteReg(0x002C, 0x7000);
+
+	Sensor_WriteReg(0x002E, 0x2BC0);
+	lsb = Sensor_ReadReg(0x00F12);
+
+	Sensor_WriteReg(0x002E, 0x2BC2);
+	msb = Sensor_ReadReg(0x00F12);
+
+	/*
+	 * Formula:
+	 * x = ((msb << 16) | lsb) / 400
+	 * shutter_speed = 1000 / x
+	 */
+	exposure_time = (msb << 16) | lsb;
+
+	if (!exposure_time) {
+		SENSOR_PRINT_HIGH("Failed, sensor values are 0");
+		return 0;
+	} else {
+		exposure_time = 400000 / exposure_time;
+		if (!exposure_time) {
+			SENSOR_PRINT_HIGH("exposure time still results to 0");
+			exposure_time = 1;
+		}
+	}
+
+	SENSOR_PRINT_HIGH("Done. [Shutter Speed : %u]", exposure_time);
+	return exposure_time;
+}
+
+LOCAL uint16_t s5k4ecgx_get_frame_time()
+{
+	uint16_t frame_time = 0;
+	uint16_t temp1 = 0;
+	int err;
+
+	SENSOR_PRINT_HIGH("Start");
+
+	Sensor_WriteReg(0xFCFC, 0xD000);
+	Sensor_WriteReg(0x002C, 0x7000);
+
+	Sensor_WriteReg(0x002E, 0x2128);
+	temp1 = Sensor_ReadReg (0x0F12);
+
+	frame_time = temp1/400;
+
+	SENSOR_PRINT_HIGH("Done. [Frame Time: %u]",frame_time);
+
+	return frame_time;
+}
+
+LOCAL uint32_t __s5k4ecgx_set_focus_mode(uint32_t mode)
+{
+	uint16_t delay;
+
+	if (mode > 5) {
+		SENSOR_PRINT_ERR("Undefined Focus mode %u", mode);
+		return SENSOR_OP_PARAM_ERR;
+	}
+
+	SENSOR_PRINT_HIGH("Apply Focus Mode %u", mode);
+
+	delay = s5k4ecgx_get_frame_time();
+
+	if (2 == mode) { //Macro
+		s5k4ec_I2C_write(s5k4ec_AF_macro_mode_1);
+		SENSOR_Sleep(delay);
+
+		s5k4ec_I2C_write(s5k4ec_AF_macro_mode_2);
+		SENSOR_Sleep(delay);
+
+		s5k4ec_I2C_write(s5k4ec_AF_macro_mode_3);
+// 	} else if (3 == mode) { // Infinity
+// 		s5k4ec_I2C_write(s5k4ec_AF_return_inf_pos);
+	} else { // Auto and every other else
+		s5k4ec_I2C_write(s5k4ec_AF_normal_mode_1);
+		SENSOR_Sleep(delay);
+
+		s5k4ec_I2C_write(s5k4ec_AF_normal_mode_2);
+		SENSOR_Sleep(delay);
+
+		s5k4ec_I2C_write(s5k4ec_AF_normal_mode_3);
+	}
+	return 0;
+}
+
+LOCAL uint32_t s5k4ecgx_set_focus_mode(uint32_t mode)
+{
+	if (s_focus_mode == mode) {
+		SENSOR_PRINT_HIGH("focus mode (%u) has already been applied", mode);
+		return SENSOR_SUCCESS;
+	}
+	return __s5k4ecgx_set_focus_mode(mode);
+}
+#define AE_STABLE_SEARCH_COUNT 50
+/*
+ * This function takes from what the black box tests results shows.
+ * There are two modes for all 4 possible states:
+ * mode 1: Maintain a read value of 1 until the end of phase 1
+ *         and still get a 1 on phase 2.
+ * mode 2: Fail to maintain a read value of 1 until the end of phase 1
+ *         but would get a at least a single 1 on phase 2
+ * The two other state may mean that the AE has failed to become stable.
+ */
+
+LOCAL uint32_t s5k4ec_wait_until_ae_stable()
+{
+	uint16_t reg_value;
+
+	Sensor_WriteReg(0xFCFC, 0xD000);
+
+	SENSOR_PRINT_HIGH("Waiting for AE to become stable");
+
+	for (int ph = 0 ; ph <= 1; ph++) {
+		SENSOR_PRINT_HIGH("Phase %d", ph + 1);
+		for (int i = 0 ; i < AE_STABLE_SEARCH_COUNT; i++) {
+			Sensor_WriteReg(0x002C, 0x7000);
+			Sensor_WriteReg(0x002E, 0x2C74);
+
+			reg_value = Sensor_ReadReg(0x0F12);
+			if(ph == reg_value) {
+				SENSOR_PRINT_HIGH("Phase %d success", ph + 1);
+				break;
+			}
+
+			SENSOR_PRINT_HIGH("Recheck AE status: %u, expected %d", reg_value, ph);
+			SENSOR_Sleep(10);
+		}
+	}
+	SENSOR_PRINT_HIGH("Done.");
+	return 0;
+}
+
+LOCAL uint32_t s5k4ec_preflash_af(uint32_t on)
+{
+	SENSOR_PRINT_HIGH("Turn %s Pre Flash setting", on ? "On" : "Off");
+	if (on)
+		s5k4ec_I2C_write(s5k4ec_pre_flash_On);
+	else
+		s5k4ec_I2C_write(s5k4ec_pre_flash_Off);
+
+	return 0;
+}
+
+LOCAL uint32_t s5k4ecgx_fast_ae(uint32_t on)
+{
+	SENSOR_PRINT_HIGH("Turn %s Fast AE mode", on ? "On" : "Off");
+	if (on)
+		s5k4ec_I2C_write(s5k4ec_FAST_AE_On);
+	else
+		s5k4ec_I2C_write(s5k4ec_FAST_AE_Off);
+
+	return 0;
+}
+
+LOCAL uint32_t s5k4ec_main_flash(uint32_t on)
+{
+	SENSOR_PRINT_HIGH("Turn %s Main Flash setting", on ? "On" : "Off");
+	if (on)
+		s5k4ec_I2C_write(s5k4ec_main_flash_On);
+	else
+		s5k4ec_I2C_write(s5k4ec_main_flash_Off);
+
+	return SENSOR_SUCCESS;
+}
+
+LOCAL uint32_t s5k4ec_low_light_AF_check(void)
+{
+	struct camera_context *cxt = camera_get_cxt();
+	uint8_t flash_mode = cxt->cmr_set.flash;
+	uint8_t use_ll_af = 0;
+
+	SENSOR_PRINT_HIGH("Decide whether to use low light AF or not");
+
+	/*
+	 * The conditions for low light AF is that the conditions
+	 * are considered low light and Flash is will never be used
+	 */
+	if ((flash_mode == FLASH_CLOSE) && LIGHT_STATUS_IS_LOW(s5k4ec_lightcheck())) {
+		use_ll_af = 1;
+		SENSOR_PRINT_HIGH("Using low light autofocus");
+	} else {
+		use_ll_af = 0;
+		SENSOR_PRINT_HIGH("Not using low light autofocus");
+	}
+
+	if (use_ll_af == s_using_low_light_af) {
+		SENSOR_PRINT_HIGH("Sensor already%s using Low light autofocus",
+			use_ll_af ? "" : " not"
+		);
+		return SENSOR_SUCCESS;
+	}
+
+	if (use_ll_af)
+		s5k4ec_I2C_write(s5k4ec_AF_low_light_mode_On);
+	else
+		s5k4ec_I2C_write(s5k4ec_AF_low_light_mode_Off);
+
+	SENSOR_PRINT_HIGH("Done.");
+	return SENSOR_SUCCESS;
+}
+
+LOCAL uint32_t s5k4ec_set_FPS_mode(uint32_t fps_mode)
+{
+	SENSOR_PRINT_HIGH("Apply FPS mode %d", fps_mode);
+
+	if (s_fps_cur_max == fps_mode) {
+		SENSOR_PRINT_HIGH("Already applied");
+		return SENSOR_SUCCESS;
+	}
+
+	switch(fps_mode) {
+		case 0:
+			s5k4ec_I2C_write(s5k4ec_Auto30_FPS);
+			break;
+		case 1:
+			s5k4ec_I2C_write(s5k4ec_7_FPS);
+			break;
+		case 2:
+			s5k4ec_I2C_write(s5k4ec_12_FPS);
+			break;
+		case 3:
+			s5k4ec_I2C_write(s5k4ec_15_FPS);
+			break;
+		case 4:
+			s5k4ec_I2C_write(s5k4ec_30_FPS);
+			break;
+		case 5:
+			s5k4ec_I2C_write(s5k4ec_25_FPS);
+			break;
+		default:
+			SENSOR_PRINT_ERR("Undefined FPS mode %u", fps_mode);
+			return SENSOR_FAIL;
+	}
+	s_fps_cur_max = fps_mode;
+	SENSOR_Sleep(5);
+	return SENSOR_SUCCESS;
+}
+
+LOCAL uint32_t s5k4ec_set_FPS(uint32_t fps)
+{
+	uint32_t mode;
+
+	if (0 == fps) { /* Auto FPS */
+		mode = 0;
+	} else if (7 >= fps) {
+		mode = 1;
+	} else if (12 >= fps) {
+		mode = 2;
+	} else if (15 >= fps) {
+		mode = 3;
+	} else if (25 >= fps) {
+		mode = 4;
+	} else if (30 >= fps) {
+		mode = 5;
+	} else {
+		mode = 64; /* An invalid mode */
+	}
+
+	return s5k4ec_set_FPS_mode(mode);
+}
diff --git a/libcamera/scx15/sensor/sensor_s5k4ecgx_regs_mipi.h b/libcamera/scx15/sensor/sensor_s5k4ecgx_regs_mipi.h
new file mode 100644
index 0000000..8197c03
--- /dev/null
+++ b/libcamera/scx15/sensor/sensor_s5k4ecgx_regs_mipi.h
@@ -0,0 +1,6111 @@
+/*
+ * Copyright (C) 2020 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+//#include "../sc8830/inc/SprdCameraHardwareConfig.h"
+
+
+/* Enum Type for different ISO Mode supported */
+enum {
+	CAMERA_ISO_AUTO = 0,
+	CAMERA_ISO_100,
+	CAMERA_ISO_200,
+	CAMERA_ISO_400,
+	CAMERA_ISO_800,
+	CAMERA_ISO_1600,
+	CAMERA_ISO_50,
+	CAMERA_ISO_300,
+	CAMERA_ISO_MAX
+};
+
+enum {
+	CAMERA_SCENE_MODE_AUTO = 0,
+	CAMERA_SCENE_MODE_NIGHT,
+	CAMERA_SCENE_MODE_ACTION,
+	CAMERA_SCENE_MODE_PORTRAIT,
+	CAMERA_SCENE_MODE_LANDSCAPE,
+	CAMERA_SCENE_MODE_NORMAL,
+	CAMERA_SCENE_MODE_HDR,
+	// Extensions below
+	CAMERA_SCENE_MODE_SPORTS,
+	CAMERA_SCENE_MODE_PARTY,
+	CAMERA_SCENE_MODE_BEACH,
+	CAMERA_SCENE_MODE_SUNSET,
+	CAMERA_SCENE_MODE_DUSK_DAWN,
+	CAMERA_SCENE_MODE_FALL_COLOR,
+	CAMERA_SCENE_MODE_TEXT,
+	CAMERA_SCENE_MODE_CANDLELIGHT,
+	CAMERA_SCENE_MODE_FIREWORK,
+	CAMERA_SCENE_MODE_BACKLIGHT,
+	CAMERA_SCENE_MODE_MAX
+};
+
+
+//==========================================================
+// Init
+//==========================================================
+LOCAL SENSOR_REG_T s5k4ec_common_init[] = {
+	{0xFCFC, 0xD000},
+	{0x0010, 0x0001},
+	{0x1030, 0x0000},
+	{0x0014, 0x0001},
+	{0xFFFF, 0x000A},
+
+	//===============================================================
+	// 02.ETC Setting
+	//==============================================================
+
+	{0x0028, 0xD000},	//Driving Current
+	{0x002A, 0x1082},
+	{0x0F12, 0x0155},	//cregs_d0_d4_cd10 //D4[9:8] D3[7:6] D2[5:4] D1[3:2] D0[1:0]
+	{0x002A, 0x1084},
+	{0x0F12, 0x0155},	//cregs_d5_d9_cd10 //D9[9:8] D8[7:6] D7[5:4] D6[3:2] D5[1:0]
+	{0x002A, 0x1086},
+	{0x0F12, 0x0055},	//gpio_cd10
+	{0x002A, 0x1088},
+	{0x0F12, 0x0555},	//cregs_clks_output_cd10 //SDA[11:10] SCL[9:8] PCLK[7:6] VSYNC[3:2] HSYNC[1:0]
+	{0x002A, 0x100E},
+	{0x0F12, 0x0000},	//pclk_delay_r
+
+
+	//==================================================================================
+	// 03.Analog Setting1 & ASP Control
+	//==================================================================================
+	//This register is for FACTORY ONLY.
+	//If you change it without prior notification
+	// YOU are RESPONSIBLE for the FAILURE that will happen in the future.
+
+	{0x0028, 0xD000},
+	{0x002A, 0x007A},
+	{0x0F12, 0x0000},	//config_clk_setting
+	{0x002A, 0xE406},
+	{0x0F12, 0x0092},	//adlc_enable
+	{0x002A, 0xE410},
+	{0x0F12, 0x3804},	//adlc_fadlc_filter_co
+	{0x002A, 0xE41A},
+	{0x0F12, 0x0010},	//adlc_ptune_total
+	{0x002A, 0xF132},
+	{0x0F12, 0x0200},
+	{0x002A, 0xF142},
+	{0x0F12, 0x0200},   //110404 AE haunting - from_LSI
+	{0x002A, 0xE420},
+	{0x0F12, 0x0003},	//adlc_fadlc_filter_refresh
+	{0x0F12, 0x0060},	//adlc_filter_level_diff_threshold
+	{0x002A, 0xE42E},
+	{0x0F12, 0x0004},	//adlc_qec
+	{0x002A, 0xF400},
+	{0x0F12, 0x5A3C},	//aig_shutter_width
+	{0x0F12, 0x0023},	//aig_cds_tune
+	{0x0F12, 0x8080},	//aig_cds_option
+	{0x0F12, 0x03AF},	//aig_mx
+	{0x0F12, 0x000A},	//aig_mode_en
+	{0x0F12, 0xAA54},	//aig_ms
+	{0x0F12, 0x0040},	//aig_rmp_tune_1
+	{0x0F12, 0x464E},	//aig_rmp_tune_2
+	{0x0F12, 0x0240},	//aig_bist_sig_width_e
+	{0x0F12, 0x0240},	//aig_bist_sig_width_o
+	{0x0F12, 0x0040},	//aig_dbs_bist
+	{0x0F12, 0x1000},	//aig_dbs_tune
+	{0x0F12, 0x55FF},	//aig_bias_tune
+	{0x0F12, 0xD000},	//aig_ref_tune_1
+	{0x0F12, 0x0010},	//aig_ref_tune_2
+	{0x0F12, 0x0202},	//aig_reg_tune_1
+	{0x0F12, 0x0401},	//aig_reg_tune_2
+	{0x0F12, 0x0022},	//aig_rosc_tune
+	{0x0F12, 0x0088},	//aig_dbr_tune_1
+	{0x0F12, 0x009F},	//aig_dbr_tune_2
+	{0x0F12, 0x0000},	//aig_bist_en_cintr
+	{0x0F12, 0x1800},	//aig_vdec_tune
+	{0x0F12, 0x0088},	//aig_pmg_reg_tune
+	{0x0F12, 0x0000},	//aig_pmg_tune_1
+	{0x0F12, 0x2428},	//aig_shutter_gap
+	{0x0F12, 0x0000},	//aig_atx_option
+	{0x0F12, 0x03EE},	//aig_avg_half
+	{0x0F12, 0x0000},	//aig_hvs_test_reg
+	{0x0F12, 0x0000},	//aig_dbus_bist_auto
+	{0x0F12, 0x0000},	//aig_dbr_option
+	{0x002A, 0xF552},
+	{0x0F12, 0x0708},	//aig_1h_time_1
+	{0x0F12, 0x080C},	//aig_1h_time_2
+
+
+
+	//===================================================================
+	// Trap & Patch
+	//===================================================================
+
+	// TnP setting
+	// Start of Patch data
+	{0x0028, 0x7000},
+	{0x002A, 0x3AF8},
+	{0x0F12, 0xB5F8},    // 70003AF8
+	{0x0F12, 0x4B44},    // 70003AFA
+	{0x0F12, 0x4944},    // 70003AFC
+	{0x0F12, 0x4845},    // 70003AFE
+	{0x0F12, 0x2200},    // 70003B00
+	{0x0F12, 0xC008},    // 70003B02
+	{0x0F12, 0x6001},    // 70003B04
+	{0x0F12, 0x4944},    // 70003B06
+	{0x0F12, 0x4844},    // 70003B08
+	{0x0F12, 0x2401},    // 70003B0A
+	{0x0F12, 0xF000},    // 70003B0C
+	{0x0F12, 0xFCA4},    // 70003B0E
+	{0x0F12, 0x4943},    // 70003B10
+	{0x0F12, 0x4844},    // 70003B12
+	{0x0F12, 0x2702},    // 70003B14
+	{0x0F12, 0x0022},    // 70003B16
+	{0x0F12, 0xF000},    // 70003B18
+	{0x0F12, 0xFC9E},    // 70003B1A
+	{0x0F12, 0x0260},    // 70003B1C
+	{0x0F12, 0x4C42},    // 70003B1E
+	{0x0F12, 0x8020},    // 70003B20
+	{0x0F12, 0x2600},    // 70003B22
+	{0x0F12, 0x8066},    // 70003B24
+	{0x0F12, 0x4941},    // 70003B26
+	{0x0F12, 0x4841},    // 70003B28
+	{0x0F12, 0x6041},    // 70003B2A
+	{0x0F12, 0x4941},    // 70003B2C
+	{0x0F12, 0x4842},    // 70003B2E
+	{0x0F12, 0x003A},    // 70003B30
+	{0x0F12, 0x2503},    // 70003B32
+	{0x0F12, 0xF000},    // 70003B34
+	{0x0F12, 0xFC90},    // 70003B36
+	{0x0F12, 0x483D},    // 70003B38
+	{0x0F12, 0x4940},    // 70003B3A
+	{0x0F12, 0x30C0},    // 70003B3C
+	{0x0F12, 0x63C1},    // 70003B3E
+	{0x0F12, 0x4F3B},    // 70003B40
+	{0x0F12, 0x483F},    // 70003B42
+	{0x0F12, 0x3F80},    // 70003B44
+	{0x0F12, 0x6438},    // 70003B46
+	{0x0F12, 0x483E},    // 70003B48
+	{0x0F12, 0x493F},    // 70003B4A
+	{0x0F12, 0x6388},    // 70003B4C
+	{0x0F12, 0x002A},    // 70003B4E
+	{0x0F12, 0x493E},    // 70003B50
+	{0x0F12, 0x483F},    // 70003B52
+	{0x0F12, 0x2504},    // 70003B54
+	{0x0F12, 0xF000},    // 70003B56
+	{0x0F12, 0xFC7F},    // 70003B58
+	{0x0F12, 0x002A},    // 70003B5A
+	{0x0F12, 0x493D},    // 70003B5C
+	{0x0F12, 0x483E},    // 70003B5E
+	{0x0F12, 0x2505},    // 70003B60
+	{0x0F12, 0xF000},    // 70003B62
+	{0x0F12, 0xF8A7},    // 70003B64
+	{0x0F12, 0x483C},    // 70003B66
+	{0x0F12, 0x002A},    // 70003B68
+	{0x0F12, 0x493C},    // 70003B6A
+	{0x0F12, 0x2506},    // 70003B6C
+	{0x0F12, 0x1D80},    // 70003B6E
+	{0x0F12, 0xF000},    // 70003B70
+	{0x0F12, 0xF8A0},    // 70003B72
+	{0x0F12, 0x4838},    // 70003B74
+	{0x0F12, 0x002A},    // 70003B76
+	{0x0F12, 0x4939},    // 70003B78
+	{0x0F12, 0x2507},    // 70003B7A
+	{0x0F12, 0x300C},    // 70003B7C
+	{0x0F12, 0xF000},    // 70003B7E
+	{0x0F12, 0xF899},    // 70003B80
+	{0x0F12, 0x4835},    // 70003B82
+	{0x0F12, 0x002A},    // 70003B84
+	{0x0F12, 0x4937},    // 70003B86
+	{0x0F12, 0x2508},    // 70003B88
+	{0x0F12, 0x3010},    // 70003B8A
+	{0x0F12, 0xF000},    // 70003B8C
+	{0x0F12, 0xF892},    // 70003B8E
+	{0x0F12, 0x002A},    // 70003B90
+	{0x0F12, 0x4935},    // 70003B92
+	{0x0F12, 0x4835},    // 70003B94
+	{0x0F12, 0x2509},    // 70003B96
+	{0x0F12, 0xF000},    // 70003B98
+	{0x0F12, 0xFC5E},    // 70003B9A
+	{0x0F12, 0x002A},    // 70003B9C
+	{0x0F12, 0x4934},    // 70003B9E
+	{0x0F12, 0x4834},    // 70003BA0
+	{0x0F12, 0x250A},    // 70003BA2
+	{0x0F12, 0xF000},    // 70003BA4
+	{0x0F12, 0xFC58},    // 70003BA6
+	{0x0F12, 0x002A},    // 70003BA8
+	{0x0F12, 0x4933},    // 70003BAA
+	{0x0F12, 0x4833},    // 70003BAC
+	{0x0F12, 0x250B},    // 70003BAE
+	{0x0F12, 0xF000},    // 70003BB0
+	{0x0F12, 0xFC52},    // 70003BB2
+	{0x0F12, 0x002A},    // 70003BB4
+	{0x0F12, 0x4932},    // 70003BB6
+	{0x0F12, 0x4832},    // 70003BB8
+	{0x0F12, 0x250C},    // 70003BBA
+	{0x0F12, 0xF000},    // 70003BBC
+	{0x0F12, 0xFC4C},    // 70003BBE
+	{0x0F12, 0x002A},    // 70003BC0
+	{0x0F12, 0x4931},    // 70003BC2
+	{0x0F12, 0x4831},    // 70003BC4
+	{0x0F12, 0x250D},    // 70003BC6
+	{0x0F12, 0xF000},    // 70003BC8
+	{0x0F12, 0xFC46},    // 70003BCA
+	{0x0F12, 0x002A},    // 70003BCC
+	{0x0F12, 0x4930},    // 70003BCE
+	{0x0F12, 0x4830},    // 70003BD0
+	{0x0F12, 0x250E},    // 70003BD2
+	{0x0F12, 0xF000},    // 70003BD4
+	{0x0F12, 0xFC40},    // 70003BD6
+	{0x0F12, 0x002A},    // 70003BD8
+	{0x0F12, 0x492F},    // 70003BDA
+	{0x0F12, 0x482F},    // 70003BDC
+	{0x0F12, 0x250F},    // 70003BDE
+	{0x0F12, 0xF000},    // 70003BE0
+	{0x0F12, 0xFC3A},    // 70003BE2
+	{0x0F12, 0x8626},    // 70003BE4
+	{0x0F12, 0x20FF},    // 70003BE6
+	{0x0F12, 0x1C40},    // 70003BE8
+	{0x0F12, 0x8660},    // 70003BEA
+	{0x0F12, 0x482C},    // 70003BEC
+	{0x0F12, 0x64F8},    // 70003BEE
+	{0x0F12, 0x492C},    // 70003BF0
+	{0x0F12, 0x482D},    // 70003BF2
+	{0x0F12, 0x2410},    // 70003BF4
+	{0x0F12, 0x002A},    // 70003BF6
+	{0x0F12, 0xF000},    // 70003BF8
+	{0x0F12, 0xFC2E},    // 70003BFA
+	{0x0F12, 0x492B},    // 70003BFC
+	{0x0F12, 0x482C},    // 70003BFE
+	{0x0F12, 0x0022},    // 70003C00
+	{0x0F12, 0xF000},    // 70003C02
+	{0x0F12, 0xFC29},    // 70003C04
+	{0x0F12, 0xBCF8},    // 70003C06
+	{0x0F12, 0xBC08},    // 70003C08
+	{0x0F12, 0x4718},    // 70003C0A
+	{0x0F12, 0x019C},    // 70003C0C
+	{0x0F12, 0x4EC2},    // 70003C0E
+	{0x0F12, 0x73FF},    // 70003C10
+	{0x0F12, 0x0000},    // 70003C12
+	{0x0F12, 0x1F90},    // 70003C14
+	{0x0F12, 0x7000},    // 70003C16
+	{0x0F12, 0x3CCD},    // 70003C18
+	{0x0F12, 0x7000},    // 70003C1A
+	{0x0F12, 0xE38B},    // 70003C1C
+	{0x0F12, 0x0000},    // 70003C1E
+	{0x0F12, 0x3D05},    // 70003C20
+	{0x0F12, 0x7000},    // 70003C22
+	{0x0F12, 0xC3B1},    // 70003C24
+	{0x0F12, 0x0000},    // 70003C26
+	{0x0F12, 0x4780},    // 70003C28
+	{0x0F12, 0x7000},    // 70003C2A
+	{0x0F12, 0x3D63},    // 70003C2C
+	{0x0F12, 0x7000},    // 70003C2E
+	{0x0F12, 0x0080},    // 70003C30
+	{0x0F12, 0x7000},    // 70003C32
+	{0x0F12, 0x3D9F},    // 70003C34
+	{0x0F12, 0x7000},    // 70003C36
+	{0x0F12, 0xB49D},    // 70003C38
+	{0x0F12, 0x0000},    // 70003C3A
+	{0x0F12, 0x3E4B},    // 70003C3C
+	{0x0F12, 0x7000},    // 70003C3E
+	{0x0F12, 0x3DFF},    // 70003C40
+	{0x0F12, 0x7000},    // 70003C42
+	{0x0F12, 0xFFFF},    // 70003C44
+	{0x0F12, 0x00FF},    // 70003C46
+	{0x0F12, 0x17E0},    // 70003C48
+	{0x0F12, 0x7000},    // 70003C4A
+	{0x0F12, 0x3FC7},    // 70003C4C
+	{0x0F12, 0x7000},    // 70003C4E
+	{0x0F12, 0x053D},    // 70003C50
+	{0x0F12, 0x0000},    // 70003C52
+	{0x0F12, 0x0000},    // 70003C54
+	{0x0F12, 0x0A89},    // 70003C56
+	{0x0F12, 0x6CD2},    // 70003C58
+	{0x0F12, 0x0000},    // 70003C5A
+	{0x0F12, 0x02C9},    // 70003C5C
+	{0x0F12, 0x0000},    // 70003C5E
+	{0x0F12, 0x0000},    // 70003C60
+	{0x0F12, 0x0A9A},    // 70003C62
+	{0x0F12, 0x0000},    // 70003C64
+	{0x0F12, 0x02D2},    // 70003C66
+	{0x0F12, 0x4015},    // 70003C68
+	{0x0F12, 0x7000},    // 70003C6A
+	{0x0F12, 0x9E65},    // 70003C6C
+	{0x0F12, 0x0000},    // 70003C6E
+	{0x0F12, 0x4089},    // 70003C70
+	{0x0F12, 0x7000},    // 70003C72
+	{0x0F12, 0x7C49},    // 70003C74
+	{0x0F12, 0x0000},    // 70003C76
+	{0x0F12, 0x40FD},    // 70003C78
+	{0x0F12, 0x7000},    // 70003C7A
+	{0x0F12, 0x7C63},    // 70003C7C
+	{0x0F12, 0x0000},    // 70003C7E
+	{0x0F12, 0x4119},    // 70003C80
+	{0x0F12, 0x7000},    // 70003C82
+	{0x0F12, 0x8F01},    // 70003C84
+	{0x0F12, 0x0000},    // 70003C86
+	{0x0F12, 0x41BB},    // 70003C88
+	{0x0F12, 0x7000},    // 70003C8A
+	{0x0F12, 0x7F3F},    // 70003C8C
+	{0x0F12, 0x0000},    // 70003C8E
+	{0x0F12, 0x4249},    // 70003C90
+	{0x0F12, 0x7000},    // 70003C92
+	{0x0F12, 0x98C5},    // 70003C94
+	{0x0F12, 0x0000},    // 70003C96
+	{0x0F12, 0x43B5},    // 70003C98
+	{0x0F12, 0x7000},    // 70003C9A
+	{0x0F12, 0x6099},    // 70003C9C
+	{0x0F12, 0x0000},    // 70003C9E
+	{0x0F12, 0x430F},    // 70003CA0
+	{0x0F12, 0x7000},    // 70003CA2
+	{0x0F12, 0x4365},    // 70003CA4
+	{0x0F12, 0x7000},    // 70003CA6
+	{0x0F12, 0xA70B},    // 70003CA8
+	{0x0F12, 0x0000},    // 70003CAA
+	{0x0F12, 0x4387},    // 70003CAC
+	{0x0F12, 0x7000},    // 70003CAE
+	{0x0F12, 0x400D},    // 70003CB0
+	{0x0F12, 0x0000},    // 70003CB2
+	{0x0F12, 0xB570},    // 70003CB4
+	{0x0F12, 0x000C},    // 70003CB6
+	{0x0F12, 0x0015},    // 70003CB8
+	{0x0F12, 0x0029},    // 70003CBA
+	{0x0F12, 0xF000},    // 70003CBC
+	{0x0F12, 0xFBD4},    // 70003CBE
+	{0x0F12, 0x49F8},    // 70003CC0
+	{0x0F12, 0x00A8},    // 70003CC2
+	{0x0F12, 0x500C},    // 70003CC4
+	{0x0F12, 0xBC70},    // 70003CC6
+	{0x0F12, 0xBC08},    // 70003CC8
+	{0x0F12, 0x4718},    // 70003CCA
+	{0x0F12, 0x6808},    // 70003CCC
+	{0x0F12, 0x0400},    // 70003CCE
+	{0x0F12, 0x0C00},    // 70003CD0
+	{0x0F12, 0x6849},    // 70003CD2
+	{0x0F12, 0x0409},    // 70003CD4
+	{0x0F12, 0x0C09},    // 70003CD6
+	{0x0F12, 0x4AF3},    // 70003CD8
+	{0x0F12, 0x8992},    // 70003CDA
+	{0x0F12, 0x2A00},    // 70003CDC
+	{0x0F12, 0xD00D},    // 70003CDE
+	{0x0F12, 0x2300},    // 70003CE0
+	{0x0F12, 0x1A89},    // 70003CE2
+	{0x0F12, 0xD400},    // 70003CE4
+	{0x0F12, 0x000B},    // 70003CE6
+	{0x0F12, 0x0419},    // 70003CE8
+	{0x0F12, 0x0C09},    // 70003CEA
+	{0x0F12, 0x23FF},    // 70003CEC
+	{0x0F12, 0x33C1},    // 70003CEE
+	{0x0F12, 0x1810},    // 70003CF0
+	{0x0F12, 0x4298},    // 70003CF2
+	{0x0F12, 0xD800},    // 70003CF4
+	{0x0F12, 0x0003},    // 70003CF6
+	{0x0F12, 0x0418},    // 70003CF8
+	{0x0F12, 0x0C00},    // 70003CFA
+	{0x0F12, 0x4AEB},    // 70003CFC
+	{0x0F12, 0x8150},    // 70003CFE
+	{0x0F12, 0x8191},    // 70003D00
+	{0x0F12, 0x4770},    // 70003D02
+	{0x0F12, 0xB5F3},    // 70003D04
+	{0x0F12, 0x0004},    // 70003D06
+	{0x0F12, 0xB081},    // 70003D08
+	{0x0F12, 0x9802},    // 70003D0A
+	{0x0F12, 0x6800},    // 70003D0C
+	{0x0F12, 0x0600},    // 70003D0E
+	{0x0F12, 0x0E00},    // 70003D10
+	{0x0F12, 0x2201},    // 70003D12
+	{0x0F12, 0x0015},    // 70003D14
+	{0x0F12, 0x0021},    // 70003D16
+	{0x0F12, 0x3910},    // 70003D18
+	{0x0F12, 0x408A},    // 70003D1A
+	{0x0F12, 0x40A5},    // 70003D1C
+	{0x0F12, 0x4FE4},    // 70003D1E
+	{0x0F12, 0x0016},    // 70003D20
+	{0x0F12, 0x2C10},    // 70003D22
+	{0x0F12, 0xDA03},    // 70003D24
+	{0x0F12, 0x8839},    // 70003D26
+	{0x0F12, 0x43A9},    // 70003D28
+	{0x0F12, 0x8039},    // 70003D2A
+	{0x0F12, 0xE002},    // 70003D2C
+	{0x0F12, 0x8879},    // 70003D2E
+	{0x0F12, 0x43B1},    // 70003D30
+	{0x0F12, 0x8079},    // 70003D32
+	{0x0F12, 0xF000},    // 70003D34
+	{0x0F12, 0xFBA0},    // 70003D36
+	{0x0F12, 0x2C10},    // 70003D38
+	{0x0F12, 0xDA03},    // 70003D3A
+	{0x0F12, 0x8839},    // 70003D3C
+	{0x0F12, 0x4329},    // 70003D3E
+	{0x0F12, 0x8039},    // 70003D40
+	{0x0F12, 0xE002},    // 70003D42
+	{0x0F12, 0x8879},    // 70003D44
+	{0x0F12, 0x4331},    // 70003D46
+	{0x0F12, 0x8079},    // 70003D48
+	{0x0F12, 0x49DA},    // 70003D4A
+	{0x0F12, 0x8809},    // 70003D4C
+	{0x0F12, 0x2900},    // 70003D4E
+	{0x0F12, 0xD102},    // 70003D50
+	{0x0F12, 0xF000},    // 70003D52
+	{0x0F12, 0xFB99},    // 70003D54
+	{0x0F12, 0x2000},    // 70003D56
+	{0x0F12, 0x9902},    // 70003D58
+	{0x0F12, 0x6008},    // 70003D5A
+	{0x0F12, 0xBCFE},    // 70003D5C
+	{0x0F12, 0xBC08},    // 70003D5E
+	{0x0F12, 0x4718},    // 70003D60
+	{0x0F12, 0xB538},    // 70003D62
+	{0x0F12, 0x9C04},    // 70003D64
+	{0x0F12, 0x0015},    // 70003D66
+	{0x0F12, 0x002A},    // 70003D68
+	{0x0F12, 0x9400},    // 70003D6A
+	{0x0F12, 0xF000},    // 70003D6C
+	{0x0F12, 0xFB94},    // 70003D6E
+	{0x0F12, 0x4AD1},    // 70003D70
+	{0x0F12, 0x8811},    // 70003D72
+	{0x0F12, 0x2900},    // 70003D74
+	{0x0F12, 0xD00F},    // 70003D76
+	{0x0F12, 0x8820},    // 70003D78
+	{0x0F12, 0x4281},    // 70003D7A
+	{0x0F12, 0xD20C},    // 70003D7C
+	{0x0F12, 0x8861},    // 70003D7E
+	{0x0F12, 0x8853},    // 70003D80
+	{0x0F12, 0x4299},    // 70003D82
+	{0x0F12, 0xD200},    // 70003D84
+	{0x0F12, 0x1E40},    // 70003D86
+	{0x0F12, 0x0400},    // 70003D88
+	{0x0F12, 0x0C00},    // 70003D8A
+	{0x0F12, 0x8020},    // 70003D8C
+	{0x0F12, 0x8851},    // 70003D8E
+	{0x0F12, 0x8061},    // 70003D90
+	{0x0F12, 0x4368},    // 70003D92
+	{0x0F12, 0x1840},    // 70003D94
+	{0x0F12, 0x6060},    // 70003D96
+	{0x0F12, 0xBC38},    // 70003D98
+	{0x0F12, 0xBC08},    // 70003D9A
+	{0x0F12, 0x4718},    // 70003D9C
+	{0x0F12, 0xB5F8},    // 70003D9E
+	{0x0F12, 0x0004},    // 70003DA0
+	{0x0F12, 0x6808},    // 70003DA2
+	{0x0F12, 0x0400},    // 70003DA4
+	{0x0F12, 0x0C00},    // 70003DA6
+	{0x0F12, 0x2201},    // 70003DA8
+	{0x0F12, 0x0015},    // 70003DAA
+	{0x0F12, 0x0021},    // 70003DAC
+	{0x0F12, 0x3910},    // 70003DAE
+	{0x0F12, 0x408A},    // 70003DB0
+	{0x0F12, 0x40A5},    // 70003DB2
+	{0x0F12, 0x4FBE},    // 70003DB4
+	{0x0F12, 0x0016},    // 70003DB6
+	{0x0F12, 0x2C10},    // 70003DB8
+	{0x0F12, 0xDA03},    // 70003DBA
+	{0x0F12, 0x8839},    // 70003DBC
+	{0x0F12, 0x43A9},    // 70003DBE
+	{0x0F12, 0x8039},    // 70003DC0
+	{0x0F12, 0xE002},    // 70003DC2
+	{0x0F12, 0x8879},    // 70003DC4
+	{0x0F12, 0x43B1},    // 70003DC6
+	{0x0F12, 0x8079},    // 70003DC8
+	{0x0F12, 0xF000},    // 70003DCA
+	{0x0F12, 0xFB6D},    // 70003DCC
+	{0x0F12, 0x2C10},    // 70003DCE
+	{0x0F12, 0xDA03},    // 70003DD0
+	{0x0F12, 0x8838},    // 70003DD2
+	{0x0F12, 0x4328},    // 70003DD4
+	{0x0F12, 0x8038},    // 70003DD6
+	{0x0F12, 0xE002},    // 70003DD8
+	{0x0F12, 0x8878},    // 70003DDA
+	{0x0F12, 0x4330},    // 70003DDC
+	{0x0F12, 0x8078},    // 70003DDE
+	{0x0F12, 0x48B6},    // 70003DE0
+	{0x0F12, 0x8800},    // 70003DE2
+	{0x0F12, 0x0400},    // 70003DE4
+	{0x0F12, 0xD507},    // 70003DE6
+	{0x0F12, 0x4BB5},    // 70003DE8
+	{0x0F12, 0x7819},    // 70003DEA
+	{0x0F12, 0x4AB5},    // 70003DEC
+	{0x0F12, 0x7810},    // 70003DEE
+	{0x0F12, 0x7018},    // 70003DF0
+	{0x0F12, 0x7011},    // 70003DF2
+	{0x0F12, 0x49B4},    // 70003DF4
+	{0x0F12, 0x8188},    // 70003DF6
+	{0x0F12, 0xBCF8},    // 70003DF8
+	{0x0F12, 0xBC08},    // 70003DFA
+	{0x0F12, 0x4718},    // 70003DFC
+	{0x0F12, 0xB538},    // 70003DFE
+	{0x0F12, 0x48B2},    // 70003E00
+	{0x0F12, 0x4669},    // 70003E02
+	{0x0F12, 0xF000},    // 70003E04
+	{0x0F12, 0xFB58},    // 70003E06
+	{0x0F12, 0x48B1},    // 70003E08
+	{0x0F12, 0x49B0},    // 70003E0A
+	{0x0F12, 0x69C2},    // 70003E0C
+	{0x0F12, 0x2400},    // 70003E0E
+	{0x0F12, 0x31A8},    // 70003E10
+	{0x0F12, 0x2A00},    // 70003E12
+	{0x0F12, 0xD008},    // 70003E14
+	{0x0F12, 0x61C4},    // 70003E16
+	{0x0F12, 0x684A},    // 70003E18
+	{0x0F12, 0x6242},    // 70003E1A
+	{0x0F12, 0x6282},    // 70003E1C
+	{0x0F12, 0x466B},    // 70003E1E
+	{0x0F12, 0x881A},    // 70003E20
+	{0x0F12, 0x6302},    // 70003E22
+	{0x0F12, 0x885A},    // 70003E24
+	{0x0F12, 0x6342},    // 70003E26
+	{0x0F12, 0x6A02},    // 70003E28
+	{0x0F12, 0x2A00},    // 70003E2A
+	{0x0F12, 0xD00A},    // 70003E2C
+	{0x0F12, 0x6204},    // 70003E2E
+	{0x0F12, 0x6849},    // 70003E30
+	{0x0F12, 0x6281},    // 70003E32
+	{0x0F12, 0x466B},    // 70003E34
+	{0x0F12, 0x8819},    // 70003E36
+	{0x0F12, 0x6301},    // 70003E38
+	{0x0F12, 0x8859},    // 70003E3A
+	{0x0F12, 0x6341},    // 70003E3C
+	{0x0F12, 0x49A5},    // 70003E3E
+	{0x0F12, 0x88C9},    // 70003E40
+	{0x0F12, 0x63C1},    // 70003E42
+	{0x0F12, 0xF000},    // 70003E44
+	{0x0F12, 0xFB40},    // 70003E46
+	{0x0F12, 0xE7A6},    // 70003E48
+	{0x0F12, 0xB5F0},    // 70003E4A
+	{0x0F12, 0xB08B},    // 70003E4C
+	{0x0F12, 0x20FF},    // 70003E4E
+	{0x0F12, 0x1C40},    // 70003E50
+	{0x0F12, 0x49A1},    // 70003E52
+	{0x0F12, 0x89CC},    // 70003E54
+	{0x0F12, 0x4E9E},    // 70003E56
+	{0x0F12, 0x6AB1},    // 70003E58
+	{0x0F12, 0x4284},    // 70003E5A
+	{0x0F12, 0xD101},    // 70003E5C
+	{0x0F12, 0x489F},    // 70003E5E
+	{0x0F12, 0x6081},    // 70003E60
+	{0x0F12, 0x6A70},    // 70003E62
+	{0x0F12, 0x0200},    // 70003E64
+	{0x0F12, 0xF000},    // 70003E66
+	{0x0F12, 0xFB37},    // 70003E68
+	{0x0F12, 0x0400},    // 70003E6A
+	{0x0F12, 0x0C00},    // 70003E6C
+	{0x0F12, 0x4A96},    // 70003E6E
+	{0x0F12, 0x8A11},    // 70003E70
+	{0x0F12, 0x9109},    // 70003E72
+	{0x0F12, 0x2101},    // 70003E74
+	{0x0F12, 0x0349},    // 70003E76
+	{0x0F12, 0x4288},    // 70003E78
+	{0x0F12, 0xD200},    // 70003E7A
+	{0x0F12, 0x0001},    // 70003E7C
+	{0x0F12, 0x4A92},    // 70003E7E
+	{0x0F12, 0x8211},    // 70003E80
+	{0x0F12, 0x4D97},    // 70003E82
+	{0x0F12, 0x8829},    // 70003E84
+	{0x0F12, 0x9108},    // 70003E86
+	{0x0F12, 0x4A8B},    // 70003E88
+	{0x0F12, 0x2303},    // 70003E8A
+	{0x0F12, 0x3222},    // 70003E8C
+	{0x0F12, 0x1F91},    // 70003E8E
+	{0x0F12, 0xF000},    // 70003E90
+	{0x0F12, 0xFB28},    // 70003E92
+	{0x0F12, 0x8028},    // 70003E94
+	{0x0F12, 0x488E},    // 70003E96
+	{0x0F12, 0x4987},    // 70003E98
+	{0x0F12, 0x6BC2},    // 70003E9A
+	{0x0F12, 0x6AC0},    // 70003E9C
+	{0x0F12, 0x4282},    // 70003E9E
+	{0x0F12, 0xD201},    // 70003EA0
+	{0x0F12, 0x8CC8},    // 70003EA2
+	{0x0F12, 0x8028},    // 70003EA4
+	{0x0F12, 0x88E8},    // 70003EA6
+	{0x0F12, 0x9007},    // 70003EA8
+	{0x0F12, 0x2240},    // 70003EAA
+	{0x0F12, 0x4310},    // 70003EAC
+	{0x0F12, 0x80E8},    // 70003EAE
+	{0x0F12, 0x2000},    // 70003EB0
+	{0x0F12, 0x0041},    // 70003EB2
+	{0x0F12, 0x194B},    // 70003EB4
+	{0x0F12, 0x001E},    // 70003EB6
+	{0x0F12, 0x3680},    // 70003EB8
+	{0x0F12, 0x8BB2},    // 70003EBA
+	{0x0F12, 0xAF04},    // 70003EBC
+	{0x0F12, 0x527A},    // 70003EBE
+	{0x0F12, 0x4A7D},    // 70003EC0
+	{0x0F12, 0x188A},    // 70003EC2
+	{0x0F12, 0x8897},    // 70003EC4
+	{0x0F12, 0x83B7},    // 70003EC6
+	{0x0F12, 0x33A0},    // 70003EC8
+	{0x0F12, 0x891F},    // 70003ECA
+	{0x0F12, 0xAE01},    // 70003ECC
+	{0x0F12, 0x5277},    // 70003ECE
+	{0x0F12, 0x8A11},    // 70003ED0
+	{0x0F12, 0x8119},    // 70003ED2
+	{0x0F12, 0x1C40},    // 70003ED4
+	{0x0F12, 0x0400},    // 70003ED6
+	{0x0F12, 0x0C00},    // 70003ED8
+	{0x0F12, 0x2806},    // 70003EDA
+	{0x0F12, 0xD3E9},    // 70003EDC
+	{0x0F12, 0xF000},    // 70003EDE
+	{0x0F12, 0xFB09},    // 70003EE0
+	{0x0F12, 0xF000},    // 70003EE2
+	{0x0F12, 0xFB0F},    // 70003EE4
+	{0x0F12, 0x4F79},    // 70003EE6
+	{0x0F12, 0x37A8},    // 70003EE8
+	{0x0F12, 0x2800},    // 70003EEA
+	{0x0F12, 0xD10A},    // 70003EEC
+	{0x0F12, 0x1FE0},    // 70003EEE
+	{0x0F12, 0x38FD},    // 70003EF0
+	{0x0F12, 0xD001},    // 70003EF2
+	{0x0F12, 0x1CC0},    // 70003EF4
+	{0x0F12, 0xD105},    // 70003EF6
+	{0x0F12, 0x4874},    // 70003EF8
+	{0x0F12, 0x8829},    // 70003EFA
+	{0x0F12, 0x3818},    // 70003EFC
+	{0x0F12, 0x6840},    // 70003EFE
+	{0x0F12, 0x4348},    // 70003F00
+	{0x0F12, 0x6078},    // 70003F02
+	{0x0F12, 0x4972},    // 70003F04
+	{0x0F12, 0x6878},    // 70003F06
+	{0x0F12, 0x6B89},    // 70003F08
+	{0x0F12, 0x4288},    // 70003F0A
+	{0x0F12, 0xD300},    // 70003F0C
+	{0x0F12, 0x0008},    // 70003F0E
+	{0x0F12, 0x6078},    // 70003F10
+	{0x0F12, 0x2000},    // 70003F12
+	{0x0F12, 0x0041},    // 70003F14
+	{0x0F12, 0xAA04},    // 70003F16
+	{0x0F12, 0x5A53},    // 70003F18
+	{0x0F12, 0x194A},    // 70003F1A
+	{0x0F12, 0x269C},    // 70003F1C
+	{0x0F12, 0x52B3},    // 70003F1E
+	{0x0F12, 0xAB01},    // 70003F20
+	{0x0F12, 0x5A59},    // 70003F22
+	{0x0F12, 0x32A0},    // 70003F24
+	{0x0F12, 0x8111},    // 70003F26
+	{0x0F12, 0x1C40},    // 70003F28
+	{0x0F12, 0x0400},    // 70003F2A
+	{0x0F12, 0x0C00},    // 70003F2C
+	{0x0F12, 0x2806},    // 70003F2E
+	{0x0F12, 0xD3F0},    // 70003F30
+	{0x0F12, 0x4965},    // 70003F32
+	{0x0F12, 0x9809},    // 70003F34
+	{0x0F12, 0x8208},    // 70003F36
+	{0x0F12, 0x9808},    // 70003F38
+	{0x0F12, 0x8028},    // 70003F3A
+	{0x0F12, 0x9807},    // 70003F3C
+	{0x0F12, 0x80E8},    // 70003F3E
+	{0x0F12, 0x1FE0},    // 70003F40
+	{0x0F12, 0x38FD},    // 70003F42
+	{0x0F12, 0xD13B},    // 70003F44
+	{0x0F12, 0x4D64},    // 70003F46
+	{0x0F12, 0x89E8},    // 70003F48
+	{0x0F12, 0x1FC1},    // 70003F4A
+	{0x0F12, 0x39FF},    // 70003F4C
+	{0x0F12, 0xD136},    // 70003F4E
+	{0x0F12, 0x4C5F},    // 70003F50
+	{0x0F12, 0x8AE0},    // 70003F52
+	{0x0F12, 0xF000},    // 70003F54
+	{0x0F12, 0xFADE},    // 70003F56
+	{0x0F12, 0x0006},    // 70003F58
+	{0x0F12, 0x8B20},    // 70003F5A
+	{0x0F12, 0xF000},    // 70003F5C
+	{0x0F12, 0xFAE2},    // 70003F5E
+	{0x0F12, 0x9000},    // 70003F60
+	{0x0F12, 0x6AA1},    // 70003F62
+	{0x0F12, 0x6878},    // 70003F64
+	{0x0F12, 0x1809},    // 70003F66
+	{0x0F12, 0x0200},    // 70003F68
+	{0x0F12, 0xF000},    // 70003F6A
+	{0x0F12, 0xFAB5},    // 70003F6C
+	{0x0F12, 0x0400},    // 70003F6E
+	{0x0F12, 0x0C00},    // 70003F70
+	{0x0F12, 0x0022},    // 70003F72
+	{0x0F12, 0x3246},    // 70003F74
+	{0x0F12, 0x0011},    // 70003F76
+	{0x0F12, 0x310A},    // 70003F78
+	{0x0F12, 0x2305},    // 70003F7A
+	{0x0F12, 0xF000},    // 70003F7C
+	{0x0F12, 0xFAB2},    // 70003F7E
+	{0x0F12, 0x66E8},    // 70003F80
+	{0x0F12, 0x6B23},    // 70003F82
+	{0x0F12, 0x0002},    // 70003F84
+	{0x0F12, 0x0031},    // 70003F86
+	{0x0F12, 0x0018},    // 70003F88
+	{0x0F12, 0xF000},    // 70003F8A
+	{0x0F12, 0xFAD3},    // 70003F8C
+	{0x0F12, 0x466B},    // 70003F8E
+	{0x0F12, 0x8518},    // 70003F90
+	{0x0F12, 0x6EEA},    // 70003F92
+	{0x0F12, 0x6B60},    // 70003F94
+	{0x0F12, 0x9900},    // 70003F96
+	{0x0F12, 0xF000},    // 70003F98
+	{0x0F12, 0xFACC},    // 70003F9A
+	{0x0F12, 0x466B},    // 70003F9C
+	{0x0F12, 0x8558},    // 70003F9E
+	{0x0F12, 0x0029},    // 70003FA0
+	{0x0F12, 0x980A},    // 70003FA2
+	{0x0F12, 0x3170},    // 70003FA4
+	{0x0F12, 0xF000},    // 70003FA6
+	{0x0F12, 0xFACD},    // 70003FA8
+	{0x0F12, 0x0028},    // 70003FAA
+	{0x0F12, 0x3060},    // 70003FAC
+	{0x0F12, 0x8A02},    // 70003FAE
+	{0x0F12, 0x4946},    // 70003FB0
+	{0x0F12, 0x3128},    // 70003FB2
+	{0x0F12, 0x808A},    // 70003FB4
+	{0x0F12, 0x8A42},    // 70003FB6
+	{0x0F12, 0x80CA},    // 70003FB8
+	{0x0F12, 0x8A80},    // 70003FBA
+	{0x0F12, 0x8108},    // 70003FBC
+	{0x0F12, 0xB00B},    // 70003FBE
+	{0x0F12, 0xBCF0},    // 70003FC0
+	{0x0F12, 0xBC08},    // 70003FC2
+	{0x0F12, 0x4718},    // 70003FC4
+	{0x0F12, 0xB570},    // 70003FC6
+	{0x0F12, 0x2400},    // 70003FC8
+	{0x0F12, 0x4D46},    // 70003FCA
+	{0x0F12, 0x4846},    // 70003FCC
+	{0x0F12, 0x8881},    // 70003FCE
+	{0x0F12, 0x4846},    // 70003FD0
+	{0x0F12, 0x8041},    // 70003FD2
+	{0x0F12, 0x2101},    // 70003FD4
+	{0x0F12, 0x8001},    // 70003FD6
+	{0x0F12, 0xF000},    // 70003FD8
+	{0x0F12, 0xFABC},    // 70003FDA
+	{0x0F12, 0x4842},    // 70003FDC
+	{0x0F12, 0x3820},    // 70003FDE
+	{0x0F12, 0x8BC0},    // 70003FE0
+	{0x0F12, 0xF000},    // 70003FE2
+	{0x0F12, 0xFABF},    // 70003FE4
+	{0x0F12, 0x4B42},    // 70003FE6
+	{0x0F12, 0x220D},    // 70003FE8
+	{0x0F12, 0x0712},    // 70003FEA
+	{0x0F12, 0x18A8},    // 70003FEC
+	{0x0F12, 0x8806},    // 70003FEE
+	{0x0F12, 0x00E1},    // 70003FF0
+	{0x0F12, 0x18C9},    // 70003FF2
+	{0x0F12, 0x81CE},    // 70003FF4
+	{0x0F12, 0x8846},    // 70003FF6
+	{0x0F12, 0x818E},    // 70003FF8
+	{0x0F12, 0x8886},    // 70003FFA
+	{0x0F12, 0x824E},    // 70003FFC
+	{0x0F12, 0x88C0},    // 70003FFE
+	{0x0F12, 0x8208},    // 70004000
+	{0x0F12, 0x3508},    // 70004002
+	{0x0F12, 0x042D},    // 70004004
+	{0x0F12, 0x0C2D},    // 70004006
+	{0x0F12, 0x1C64},    // 70004008
+	{0x0F12, 0x0424},    // 7000400A
+	{0x0F12, 0x0C24},    // 7000400C
+	{0x0F12, 0x2C07},    // 7000400E
+	{0x0F12, 0xD3EC},    // 70004010
+	{0x0F12, 0xE658},    // 70004012
+	{0x0F12, 0xB510},    // 70004014
+	{0x0F12, 0x4834},    // 70004016
+	{0x0F12, 0x4C34},    // 70004018
+	{0x0F12, 0x88C0},    // 7000401A
+	{0x0F12, 0x8060},    // 7000401C
+	{0x0F12, 0x2001},    // 7000401E
+	{0x0F12, 0x8020},    // 70004020
+	{0x0F12, 0x4831},    // 70004022
+	{0x0F12, 0x3820},    // 70004024
+	{0x0F12, 0x8BC0},    // 70004026
+	{0x0F12, 0xF000},    // 70004028
+	{0x0F12, 0xFA9C},    // 7000402A
+	{0x0F12, 0x88E0},    // 7000402C
+	{0x0F12, 0x4A31},    // 7000402E
+	{0x0F12, 0x2800},    // 70004030
+	{0x0F12, 0xD003},    // 70004032
+	{0x0F12, 0x4930},    // 70004034
+	{0x0F12, 0x8849},    // 70004036
+	{0x0F12, 0x2900},    // 70004038
+	{0x0F12, 0xD009},    // 7000403A
+	{0x0F12, 0x2001},    // 7000403C
+	{0x0F12, 0x03C0},    // 7000403E
+	{0x0F12, 0x8050},    // 70004040
+	{0x0F12, 0x80D0},    // 70004042
+	{0x0F12, 0x2000},    // 70004044
+	{0x0F12, 0x8090},    // 70004046
+	{0x0F12, 0x8110},    // 70004048
+	{0x0F12, 0xBC10},    // 7000404A
+	{0x0F12, 0xBC08},    // 7000404C
+	{0x0F12, 0x4718},    // 7000404E
+	{0x0F12, 0x8050},    // 70004050
+	{0x0F12, 0x8920},    // 70004052
+	{0x0F12, 0x80D0},    // 70004054
+	{0x0F12, 0x8960},    // 70004056
+	{0x0F12, 0x0400},    // 70004058
+	{0x0F12, 0x1400},    // 7000405A
+	{0x0F12, 0x8090},    // 7000405C
+	{0x0F12, 0x89A1},    // 7000405E
+	{0x0F12, 0x0409},    // 70004060
+	{0x0F12, 0x1409},    // 70004062
+	{0x0F12, 0x8111},    // 70004064
+	{0x0F12, 0x89E3},    // 70004066
+	{0x0F12, 0x8A24},    // 70004068
+	{0x0F12, 0x2B00},    // 7000406A
+	{0x0F12, 0xD104},    // 7000406C
+	{0x0F12, 0x17C3},    // 7000406E
+	{0x0F12, 0x0F5B},    // 70004070
+	{0x0F12, 0x1818},    // 70004072
+	{0x0F12, 0x10C0},    // 70004074
+	{0x0F12, 0x8090},    // 70004076
+	{0x0F12, 0x2C00},    // 70004078
+	{0x0F12, 0xD1E6},    // 7000407A
+	{0x0F12, 0x17C8},    // 7000407C
+	{0x0F12, 0x0F40},    // 7000407E
+	{0x0F12, 0x1840},    // 70004080
+	{0x0F12, 0x10C0},    // 70004082
+	{0x0F12, 0x8110},    // 70004084
+	{0x0F12, 0xE7E0},    // 70004086
+	{0x0F12, 0xB510},    // 70004088
+	{0x0F12, 0x000C},    // 7000408A
+	{0x0F12, 0x4919},    // 7000408C
+	{0x0F12, 0x2204},    // 7000408E
+	{0x0F12, 0x6820},    // 70004090
+	{0x0F12, 0x5E8A},    // 70004092
+	{0x0F12, 0x0140},    // 70004094
+	{0x0F12, 0x1A80},    // 70004096
+	{0x0F12, 0x0280},    // 70004098
+	{0x0F12, 0x8849},    // 7000409A
+	{0x0F12, 0xF000},    // 7000409C
+	{0x0F12, 0xFA6A},    // 7000409E
+	{0x0F12, 0x6020},    // 700040A0
+	{0x0F12, 0xE7D2},    // 700040A2
+	{0x0F12, 0x38D4},    // 700040A4
+	{0x0F12, 0x7000},    // 700040A6
+	{0x0F12, 0x17D0},    // 700040A8
+	{0x0F12, 0x7000},    // 700040AA
+	{0x0F12, 0x5000},    // 700040AC
+	{0x0F12, 0xD000},    // 700040AE
+	{0x0F12, 0x1100},    // 700040B0
+	{0x0F12, 0xD000},    // 700040B2
+	{0x0F12, 0x171A},    // 700040B4
+	{0x0F12, 0x7000},    // 700040B6
+	{0x0F12, 0x4780},    // 700040B8
+	{0x0F12, 0x7000},    // 700040BA
+	{0x0F12, 0x2FCA},    // 700040BC
+	{0x0F12, 0x7000},    // 700040BE
+	{0x0F12, 0x2FC5},    // 700040C0
+	{0x0F12, 0x7000},    // 700040C2
+	{0x0F12, 0x2FC6},    // 700040C4
+	{0x0F12, 0x7000},    // 700040C6
+	{0x0F12, 0x2ED8},    // 700040C8
+	{0x0F12, 0x7000},    // 700040CA
+	{0x0F12, 0x2BD0},    // 700040CC
+	{0x0F12, 0x7000},    // 700040CE
+	{0x0F12, 0x17E0},    // 700040D0
+	{0x0F12, 0x7000},    // 700040D2
+	{0x0F12, 0x2DE8},    // 700040D4
+	{0x0F12, 0x7000},    // 700040D6
+	{0x0F12, 0x37E0},    // 700040D8
+	{0x0F12, 0x7000},    // 700040DA
+	{0x0F12, 0x210C},    // 700040DC
+	{0x0F12, 0x7000},    // 700040DE
+	{0x0F12, 0x1484},    // 700040E0
+	{0x0F12, 0x7000},    // 700040E2
+	{0x0F12, 0xA006},    // 700040E4
+	{0x0F12, 0x0000},    // 700040E6
+	{0x0F12, 0x0724},    // 700040E8
+	{0x0F12, 0x7000},    // 700040EA
+	{0x0F12, 0xA000},    // 700040EC
+	{0x0F12, 0xD000},    // 700040EE
+	{0x0F12, 0x2270},    // 700040F0
+	{0x0F12, 0x7000},    // 700040F2
+	{0x0F12, 0x2558},    // 700040F4
+	{0x0F12, 0x7000},    // 700040F6
+	{0x0F12, 0x146C},    // 700040F8
+	{0x0F12, 0x7000},    // 700040FA
+	{0x0F12, 0xB510},    // 700040FC
+	{0x0F12, 0x000C},    // 700040FE
+	{0x0F12, 0x49C7},    // 70004100
+	{0x0F12, 0x2208},    // 70004102
+	{0x0F12, 0x6820},    // 70004104
+	{0x0F12, 0x5E8A},    // 70004106
+	{0x0F12, 0x0140},    // 70004108
+	{0x0F12, 0x1A80},    // 7000410A
+	{0x0F12, 0x0280},    // 7000410C
+	{0x0F12, 0x88C9},    // 7000410E
+	{0x0F12, 0xF000},    // 70004110
+	{0x0F12, 0xFA30},    // 70004112
+	{0x0F12, 0x6020},    // 70004114
+	{0x0F12, 0xE798},    // 70004116
+	{0x0F12, 0xB5FE},    // 70004118
+	{0x0F12, 0x000C},    // 7000411A
+	{0x0F12, 0x6825},    // 7000411C
+	{0x0F12, 0x6866},    // 7000411E
+	{0x0F12, 0x68A0},    // 70004120
+	{0x0F12, 0x9001},    // 70004122
+	{0x0F12, 0x68E7},    // 70004124
+	{0x0F12, 0x1BA8},    // 70004126
+	{0x0F12, 0x42B5},    // 70004128
+	{0x0F12, 0xDA00},    // 7000412A
+	{0x0F12, 0x1B70},    // 7000412C
+	{0x0F12, 0x9000},    // 7000412E
+	{0x0F12, 0x49BB},    // 70004130
+	{0x0F12, 0x48BC},    // 70004132
+	{0x0F12, 0x884A},    // 70004134
+	{0x0F12, 0x8843},    // 70004136
+	{0x0F12, 0x435A},    // 70004138
+	{0x0F12, 0x2304},    // 7000413A
+	{0x0F12, 0x5ECB},    // 7000413C
+	{0x0F12, 0x0A92},    // 7000413E
+	{0x0F12, 0x18D2},    // 70004140
+	{0x0F12, 0x02D2},    // 70004142
+	{0x0F12, 0x0C12},    // 70004144
+	{0x0F12, 0x88CB},    // 70004146
+	{0x0F12, 0x8880},    // 70004148
+	{0x0F12, 0x4343},    // 7000414A
+	{0x0F12, 0x0A98},    // 7000414C
+	{0x0F12, 0x2308},    // 7000414E
+	{0x0F12, 0x5ECB},    // 70004150
+	{0x0F12, 0x18C0},    // 70004152
+	{0x0F12, 0x02C0},    // 70004154
+	{0x0F12, 0x0C00},    // 70004156
+	{0x0F12, 0x0411},    // 70004158
+	{0x0F12, 0x0400},    // 7000415A
+	{0x0F12, 0x1409},    // 7000415C
+	{0x0F12, 0x1400},    // 7000415E
+	{0x0F12, 0x1A08},    // 70004160
+	{0x0F12, 0x49B0},    // 70004162
+	{0x0F12, 0x39E0},    // 70004164
+	{0x0F12, 0x6148},    // 70004166
+	{0x0F12, 0x9801},    // 70004168
+	{0x0F12, 0x3040},    // 7000416A
+	{0x0F12, 0x7880},    // 7000416C
+	{0x0F12, 0x2800},    // 7000416E
+	{0x0F12, 0xD103},    // 70004170
+	{0x0F12, 0x9801},    // 70004172
+	{0x0F12, 0x0029},    // 70004174
+	{0x0F12, 0xF000},    // 70004176
+	{0x0F12, 0xFA03},    // 70004178
+	{0x0F12, 0x8839},    // 7000417A
+	{0x0F12, 0x9800},    // 7000417C
+	{0x0F12, 0x4281},    // 7000417E
+	{0x0F12, 0xD814},    // 70004180
+	{0x0F12, 0x8879},    // 70004182
+	{0x0F12, 0x9800},    // 70004184
+	{0x0F12, 0x4281},    // 70004186
+	{0x0F12, 0xD20C},    // 70004188
+	{0x0F12, 0x9801},    // 7000418A
+	{0x0F12, 0x0029},    // 7000418C
+	{0x0F12, 0xF000},    // 7000418E
+	{0x0F12, 0xF9FF},    // 70004190
+	{0x0F12, 0x9801},    // 70004192
+	{0x0F12, 0x0029},    // 70004194
+	{0x0F12, 0xF000},    // 70004196
+	{0x0F12, 0xF9FB},    // 70004198
+	{0x0F12, 0x9801},    // 7000419A
+	{0x0F12, 0x0029},    // 7000419C
+	{0x0F12, 0xF000},    // 7000419E
+	{0x0F12, 0xF9F7},    // 700041A0
+	{0x0F12, 0xE003},    // 700041A2
+	{0x0F12, 0x9801},    // 700041A4
+	{0x0F12, 0x0029},    // 700041A6
+	{0x0F12, 0xF000},    // 700041A8
+	{0x0F12, 0xF9F2},    // 700041AA
+	{0x0F12, 0x9801},    // 700041AC
+	{0x0F12, 0x0032},    // 700041AE
+	{0x0F12, 0x0039},    // 700041B0
+	{0x0F12, 0xF000},    // 700041B2
+	{0x0F12, 0xF9F5},    // 700041B4
+	{0x0F12, 0x6020},    // 700041B6
+	{0x0F12, 0xE5D0},    // 700041B8
+	{0x0F12, 0xB57C},    // 700041BA
+	{0x0F12, 0x489A},    // 700041BC
+	{0x0F12, 0xA901},    // 700041BE
+	{0x0F12, 0x0004},    // 700041C0
+	{0x0F12, 0xF000},    // 700041C2
+	{0x0F12, 0xF979},    // 700041C4
+	{0x0F12, 0x466B},    // 700041C6
+	{0x0F12, 0x88D9},    // 700041C8
+	{0x0F12, 0x8898},    // 700041CA
+	{0x0F12, 0x4B95},    // 700041CC
+	{0x0F12, 0x3346},    // 700041CE
+	{0x0F12, 0x1E9A},    // 700041D0
+	{0x0F12, 0xF000},    // 700041D2
+	{0x0F12, 0xF9ED},    // 700041D4
+	{0x0F12, 0x4894},    // 700041D6
+	{0x0F12, 0x4992},    // 700041D8
+	{0x0F12, 0x3812},    // 700041DA
+	{0x0F12, 0x3140},    // 700041DC
+	{0x0F12, 0x8A42},    // 700041DE
+	{0x0F12, 0x888B},    // 700041E0
+	{0x0F12, 0x18D2},    // 700041E2
+	{0x0F12, 0x8242},    // 700041E4
+	{0x0F12, 0x8AC2},    // 700041E6
+	{0x0F12, 0x88C9},    // 700041E8
+	{0x0F12, 0x1851},    // 700041EA
+	{0x0F12, 0x82C1},    // 700041EC
+	{0x0F12, 0x0020},    // 700041EE
+	{0x0F12, 0x4669},    // 700041F0
+	{0x0F12, 0xF000},    // 700041F2
+	{0x0F12, 0xF961},    // 700041F4
+	{0x0F12, 0x488D},    // 700041F6
+	{0x0F12, 0x214D},    // 700041F8
+	{0x0F12, 0x8301},    // 700041FA
+	{0x0F12, 0x2196},    // 700041FC
+	{0x0F12, 0x8381},    // 700041FE
+	{0x0F12, 0x211D},    // 70004200
+	{0x0F12, 0x3020},    // 70004202
+	{0x0F12, 0x8001},    // 70004204
+	{0x0F12, 0xF000},    // 70004206
+	{0x0F12, 0xF9DB},    // 70004208
+	{0x0F12, 0xF000},    // 7000420A
+	{0x0F12, 0xF9E1},    // 7000420C
+	{0x0F12, 0x4888},    // 7000420E
+	{0x0F12, 0x4C88},    // 70004210
+	{0x0F12, 0x6E00},    // 70004212
+	{0x0F12, 0x60E0},    // 70004214
+	{0x0F12, 0x466B},    // 70004216
+	{0x0F12, 0x8818},    // 70004218
+	{0x0F12, 0x8859},    // 7000421A
+	{0x0F12, 0x0025},    // 7000421C
+	{0x0F12, 0x1A40},    // 7000421E
+	{0x0F12, 0x3540},    // 70004220
+	{0x0F12, 0x61A8},    // 70004222
+	{0x0F12, 0x487F},    // 70004224
+	{0x0F12, 0x9900},    // 70004226
+	{0x0F12, 0x3060},    // 70004228
+	{0x0F12, 0xF000},    // 7000422A
+	{0x0F12, 0xF9D9},    // 7000422C
+	{0x0F12, 0x466B},    // 7000422E
+	{0x0F12, 0x8819},    // 70004230
+	{0x0F12, 0x1DE0},    // 70004232
+	{0x0F12, 0x30F9},    // 70004234
+	{0x0F12, 0x8741},    // 70004236
+	{0x0F12, 0x8859},    // 70004238
+	{0x0F12, 0x8781},    // 7000423A
+	{0x0F12, 0x2000},    // 7000423C
+	{0x0F12, 0x71A0},    // 7000423E
+	{0x0F12, 0x74A8},    // 70004240
+	{0x0F12, 0xBC7C},    // 70004242
+	{0x0F12, 0xBC08},    // 70004244
+	{0x0F12, 0x4718},    // 70004246
+	{0x0F12, 0xB5F8},    // 70004248
+	{0x0F12, 0x0005},    // 7000424A
+	{0x0F12, 0x6808},    // 7000424C
+	{0x0F12, 0x0400},    // 7000424E
+	{0x0F12, 0x0C00},    // 70004250
+	{0x0F12, 0x684A},    // 70004252
+	{0x0F12, 0x0412},    // 70004254
+	{0x0F12, 0x0C12},    // 70004256
+	{0x0F12, 0x688E},    // 70004258
+	{0x0F12, 0x68CC},    // 7000425A
+	{0x0F12, 0x4970},    // 7000425C
+	{0x0F12, 0x884B},    // 7000425E
+	{0x0F12, 0x4343},    // 70004260
+	{0x0F12, 0x0A98},    // 70004262
+	{0x0F12, 0x2304},    // 70004264
+	{0x0F12, 0x5ECB},    // 70004266
+	{0x0F12, 0x18C0},    // 70004268
+	{0x0F12, 0x02C0},    // 7000426A
+	{0x0F12, 0x0C00},    // 7000426C
+	{0x0F12, 0x88CB},    // 7000426E
+	{0x0F12, 0x4353},    // 70004270
+	{0x0F12, 0x0A9A},    // 70004272
+	{0x0F12, 0x2308},    // 70004274
+	{0x0F12, 0x5ECB},    // 70004276
+	{0x0F12, 0x18D1},    // 70004278
+	{0x0F12, 0x02C9},    // 7000427A
+	{0x0F12, 0x0C09},    // 7000427C
+	{0x0F12, 0x2701},    // 7000427E
+	{0x0F12, 0x003A},    // 70004280
+	{0x0F12, 0x40AA},    // 70004282
+	{0x0F12, 0x9200},    // 70004284
+	{0x0F12, 0x002A},    // 70004286
+	{0x0F12, 0x3A10},    // 70004288
+	{0x0F12, 0x4097},    // 7000428A
+	{0x0F12, 0x2D10},    // 7000428C
+	{0x0F12, 0xDA06},    // 7000428E
+	{0x0F12, 0x4A69},    // 70004290
+	{0x0F12, 0x9B00},    // 70004292
+	{0x0F12, 0x8812},    // 70004294
+	{0x0F12, 0x439A},    // 70004296
+	{0x0F12, 0x4B67},    // 70004298
+	{0x0F12, 0x801A},    // 7000429A
+	{0x0F12, 0xE003},    // 7000429C
+	{0x0F12, 0x4B66},    // 7000429E
+	{0x0F12, 0x885A},    // 700042A0
+	{0x0F12, 0x43BA},    // 700042A2
+	{0x0F12, 0x805A},    // 700042A4
+	{0x0F12, 0x0023},    // 700042A6
+	{0x0F12, 0x0032},    // 700042A8
+	{0x0F12, 0xF000},    // 700042AA
+	{0x0F12, 0xF981},    // 700042AC
+	{0x0F12, 0x2D10},    // 700042AE
+	{0x0F12, 0xDA05},    // 700042B0
+	{0x0F12, 0x4961},    // 700042B2
+	{0x0F12, 0x9A00},    // 700042B4
+	{0x0F12, 0x8808},    // 700042B6
+	{0x0F12, 0x4310},    // 700042B8
+	{0x0F12, 0x8008},    // 700042BA
+	{0x0F12, 0xE003},    // 700042BC
+	{0x0F12, 0x485E},    // 700042BE
+	{0x0F12, 0x8841},    // 700042C0
+	{0x0F12, 0x4339},    // 700042C2
+	{0x0F12, 0x8041},    // 700042C4
+	{0x0F12, 0x4D5B},    // 700042C6
+	{0x0F12, 0x2000},    // 700042C8
+	{0x0F12, 0x3580},    // 700042CA
+	{0x0F12, 0x88AA},    // 700042CC
+	{0x0F12, 0x5E30},    // 700042CE
+	{0x0F12, 0x2100},    // 700042D0
+	{0x0F12, 0xF000},    // 700042D2
+	{0x0F12, 0xF98D},    // 700042D4
+	{0x0F12, 0x8030},    // 700042D6
+	{0x0F12, 0x2000},    // 700042D8
+	{0x0F12, 0x88AA},    // 700042DA
+	{0x0F12, 0x5E20},    // 700042DC
+	{0x0F12, 0x2100},    // 700042DE
+	{0x0F12, 0xF000},    // 700042E0
+	{0x0F12, 0xF986},    // 700042E2
+	{0x0F12, 0x8020},    // 700042E4
+	{0x0F12, 0xE587},    // 700042E6
+	{0x0F12, 0xB510},    // 700042E8
+	{0x0F12, 0xF000},    // 700042EA
+	{0x0F12, 0xF989},    // 700042EC
+	{0x0F12, 0x4A53},    // 700042EE
+	{0x0F12, 0x8D50},    // 700042F0
+	{0x0F12, 0x2800},    // 700042F2
+	{0x0F12, 0xD007},    // 700042F4
+	{0x0F12, 0x494E},    // 700042F6
+	{0x0F12, 0x31C0},    // 700042F8
+	{0x0F12, 0x684B},    // 700042FA
+	{0x0F12, 0x4950},    // 700042FC
+	{0x0F12, 0x4283},    // 700042FE
+	{0x0F12, 0xD202},    // 70004300
+	{0x0F12, 0x8D90},    // 70004302
+	{0x0F12, 0x81C8},    // 70004304
+	{0x0F12, 0xE6A0},    // 70004306
+	{0x0F12, 0x8DD0},    // 70004308
+	{0x0F12, 0x81C8},    // 7000430A
+	{0x0F12, 0xE69D},    // 7000430C
+	{0x0F12, 0xB5F8},    // 7000430E
+	{0x0F12, 0xF000},    // 70004310
+	{0x0F12, 0xF97E},    // 70004312
+	{0x0F12, 0x4D49},    // 70004314
+	{0x0F12, 0x8E28},    // 70004316
+	{0x0F12, 0x2800},    // 70004318
+	{0x0F12, 0xD01F},    // 7000431A
+	{0x0F12, 0x4E49},    // 7000431C
+	{0x0F12, 0x4844},    // 7000431E
+	{0x0F12, 0x68B4},    // 70004320
+	{0x0F12, 0x6800},    // 70004322
+	{0x0F12, 0x4284},    // 70004324
+	{0x0F12, 0xD903},    // 70004326
+	{0x0F12, 0x1A21},    // 70004328
+	{0x0F12, 0x0849},    // 7000432A
+	{0x0F12, 0x1847},    // 7000432C
+	{0x0F12, 0xE006},    // 7000432E
+	{0x0F12, 0x4284},    // 70004330
+	{0x0F12, 0xD203},    // 70004332
+	{0x0F12, 0x1B01},    // 70004334
+	{0x0F12, 0x0849},    // 70004336
+	{0x0F12, 0x1A47},    // 70004338
+	{0x0F12, 0xE000},    // 7000433A
+	{0x0F12, 0x0027},    // 7000433C
+	{0x0F12, 0x0020},    // 7000433E
+	{0x0F12, 0x493B},    // 70004340
+	{0x0F12, 0x3120},    // 70004342
+	{0x0F12, 0x7A0C},    // 70004344
+	{0x0F12, 0x2C00},    // 70004346
+	{0x0F12, 0xD004},    // 70004348
+	{0x0F12, 0x0200},    // 7000434A
+	{0x0F12, 0x0039},    // 7000434C
+	{0x0F12, 0xF000},    // 7000434E
+	{0x0F12, 0xF8C3},    // 70004350
+	{0x0F12, 0x8668},    // 70004352
+	{0x0F12, 0x2C00},    // 70004354
+	{0x0F12, 0xD000},    // 70004356
+	{0x0F12, 0x60B7},    // 70004358
+	{0x0F12, 0xE54D},    // 7000435A
+	{0x0F12, 0x20FF},    // 7000435C
+	{0x0F12, 0x1C40},    // 7000435E
+	{0x0F12, 0x8668},    // 70004360
+	{0x0F12, 0xE549},    // 70004362
+	{0x0F12, 0xB510},    // 70004364
+	{0x0F12, 0x000C},    // 70004366
+	{0x0F12, 0x6820},    // 70004368
+	{0x0F12, 0x0400},    // 7000436A
+	{0x0F12, 0x0C00},    // 7000436C
+	{0x0F12, 0x4933},    // 7000436E
+	{0x0F12, 0x8E0A},    // 70004370
+	{0x0F12, 0x2A00},    // 70004372
+	{0x0F12, 0xD003},    // 70004374
+	{0x0F12, 0x8E49},    // 70004376
+	{0x0F12, 0x0200},    // 70004378
+	{0x0F12, 0xF000},    // 7000437A
+	{0x0F12, 0xF8AD},    // 7000437C
+	{0x0F12, 0x6020},    // 7000437E
+	{0x0F12, 0x0400},    // 70004380
+	{0x0F12, 0x0C00},    // 70004382
+	{0x0F12, 0xE661},    // 70004384
+	{0x0F12, 0xB570},    // 70004386
+	{0x0F12, 0x680C},    // 70004388
+	{0x0F12, 0x4D2F},    // 7000438A
+	{0x0F12, 0x0020},    // 7000438C
+	{0x0F12, 0x6F29},    // 7000438E
+	{0x0F12, 0xF000},    // 70004390
+	{0x0F12, 0xF946},    // 70004392
+	{0x0F12, 0x6F69},    // 70004394
+	{0x0F12, 0x1D20},    // 70004396
+	{0x0F12, 0xF000},    // 70004398
+	{0x0F12, 0xF942},    // 7000439A
+	{0x0F12, 0x4827},    // 7000439C
+	{0x0F12, 0x8E00},    // 7000439E
+	{0x0F12, 0x2800},    // 700043A0
+	{0x0F12, 0xD006},    // 700043A2
+	{0x0F12, 0x4922},    // 700043A4
+	{0x0F12, 0x2214},    // 700043A6
+	{0x0F12, 0x3168},    // 700043A8
+	{0x0F12, 0x0008},    // 700043AA
+	{0x0F12, 0x383C},    // 700043AC
+	{0x0F12, 0xF000},    // 700043AE
+	{0x0F12, 0xF93F},    // 700043B0
+	{0x0F12, 0xE488},    // 700043B2
+	{0x0F12, 0xB5F8},    // 700043B4
+	{0x0F12, 0x0004},    // 700043B6
+	{0x0F12, 0x4D24},    // 700043B8
+	{0x0F12, 0x8B68},    // 700043BA
+	{0x0F12, 0x2800},    // 700043BC
+	{0x0F12, 0xD012},    // 700043BE
+	{0x0F12, 0x4823},    // 700043C0
+	{0x0F12, 0x8A00},    // 700043C2
+	{0x0F12, 0x06C0},    // 700043C4
+	{0x0F12, 0xD50E},    // 700043C6
+	{0x0F12, 0x4822},    // 700043C8
+	{0x0F12, 0x7800},    // 700043CA
+	{0x0F12, 0x2800},    // 700043CC
+	{0x0F12, 0xD00A},    // 700043CE
+	{0x0F12, 0x481D},    // 700043D0
+	{0x0F12, 0x6FC1},    // 700043D2
+	{0x0F12, 0x2000},    // 700043D4
+	{0x0F12, 0xF000},    // 700043D6
+	{0x0F12, 0xF923},    // 700043D8
+	{0x0F12, 0x8B28},    // 700043DA
+	{0x0F12, 0x2201},    // 700043DC
+	{0x0F12, 0x2180},    // 700043DE
+	{0x0F12, 0xF000},    // 700043E0
+	{0x0F12, 0xF92C},    // 700043E2
+	{0x0F12, 0x8328},    // 700043E4
+	{0x0F12, 0x2101},    // 700043E6
+	{0x0F12, 0x000D},    // 700043E8
+	{0x0F12, 0x0020},    // 700043EA
+	{0x0F12, 0x3810},    // 700043EC
+	{0x0F12, 0x4081},    // 700043EE
+	{0x0F12, 0x40A5},    // 700043F0
+	{0x0F12, 0x4F11},    // 700043F2
+	{0x0F12, 0x000E},    // 700043F4
+	{0x0F12, 0x2C10},    // 700043F6
+	{0x0F12, 0xDA03},    // 700043F8
+	{0x0F12, 0x8838},    // 700043FA
+	{0x0F12, 0x43A8},    // 700043FC
+	{0x0F12, 0x8038},    // 700043FE
+	{0x0F12, 0xE002},    // 70004400
+	{0x0F12, 0x8878},    // 70004402
+	{0x0F12, 0x43B0},    // 70004404
+	{0x0F12, 0x8078},    // 70004406
+	{0x0F12, 0xF000},    // 70004408
+	{0x0F12, 0xF920},    // 7000440A
+	{0x0F12, 0x2C10},    // 7000440C
+	{0x0F12, 0xDA03},    // 7000440E
+	{0x0F12, 0x8838},    // 70004410
+	{0x0F12, 0x4328},    // 70004412
+	{0x0F12, 0x8038},    // 70004414
+	{0x0F12, 0xE4EF},    // 70004416
+	{0x0F12, 0x8878},    // 70004418
+	{0x0F12, 0x4330},    // 7000441A
+	{0x0F12, 0x8078},    // 7000441C
+	{0x0F12, 0xE4EB},    // 7000441E
+	{0x0F12, 0x2558},    // 70004420
+	{0x0F12, 0x7000},    // 70004422
+	{0x0F12, 0x2AB8},    // 70004424
+	{0x0F12, 0x7000},    // 70004426
+	{0x0F12, 0x145E},    // 70004428
+	{0x0F12, 0x7000},    // 7000442A
+	{0x0F12, 0x2698},    // 7000442C
+	{0x0F12, 0x7000},    // 7000442E
+	{0x0F12, 0x2BB8},    // 70004430
+	{0x0F12, 0x7000},    // 70004432
+	{0x0F12, 0x2998},    // 70004434
+	{0x0F12, 0x7000},    // 70004436
+	{0x0F12, 0x1100},    // 70004438
+	{0x0F12, 0xD000},    // 7000443A
+	{0x0F12, 0x4780},    // 7000443C
+	{0x0F12, 0x7000},    // 7000443E
+	{0x0F12, 0xE200},    // 70004440
+	{0x0F12, 0xD000},    // 70004442
+	{0x0F12, 0x210C},    // 70004444
+	{0x0F12, 0x7000},    // 70004446
+	{0x0F12, 0x0000},    // 70004448
+	{0x0F12, 0x7000},    // 7000444A
+	{0x0F12, 0x308C},    // 7000444C
+	{0x0F12, 0x7000},    // 7000444E
+	{0x0F12, 0xB040},    // 70004450
+	{0x0F12, 0xD000},    // 70004452
+	{0x0F12, 0x3858},    // 70004454
+	{0x0F12, 0x7000},    // 70004456
+	{0x0F12, 0x4778},    // 70004458
+	{0x0F12, 0x46C0},    // 7000445A
+	{0x0F12, 0xC000},    // 7000445C
+	{0x0F12, 0xE59F},    // 7000445E
+	{0x0F12, 0xFF1C},    // 70004460
+	{0x0F12, 0xE12F},    // 70004462
+	{0x0F12, 0x1789},    // 70004464
+	{0x0F12, 0x0001},    // 70004466
+	{0x0F12, 0x4778},    // 70004468
+	{0x0F12, 0x46C0},    // 7000446A
+	{0x0F12, 0xC000},    // 7000446C
+	{0x0F12, 0xE59F},    // 7000446E
+	{0x0F12, 0xFF1C},    // 70004470
+	{0x0F12, 0xE12F},    // 70004472
+	{0x0F12, 0x16F1},    // 70004474
+	{0x0F12, 0x0001},    // 70004476
+	{0x0F12, 0x4778},    // 70004478
+	{0x0F12, 0x46C0},    // 7000447A
+	{0x0F12, 0xC000},    // 7000447C
+	{0x0F12, 0xE59F},    // 7000447E
+	{0x0F12, 0xFF1C},    // 70004480
+	{0x0F12, 0xE12F},    // 70004482
+	{0x0F12, 0xC3B1},    // 70004484
+	{0x0F12, 0x0000},    // 70004486
+	{0x0F12, 0x4778},    // 70004488
+	{0x0F12, 0x46C0},    // 7000448A
+	{0x0F12, 0xC000},    // 7000448C
+	{0x0F12, 0xE59F},    // 7000448E
+	{0x0F12, 0xFF1C},    // 70004490
+	{0x0F12, 0xE12F},    // 70004492
+	{0x0F12, 0xC36D},    // 70004494
+	{0x0F12, 0x0000},    // 70004496
+	{0x0F12, 0x4778},    // 70004498
+	{0x0F12, 0x46C0},    // 7000449A
+	{0x0F12, 0xC000},    // 7000449C
+	{0x0F12, 0xE59F},    // 7000449E
+	{0x0F12, 0xFF1C},    // 700044A0
+	{0x0F12, 0xE12F},    // 700044A2
+	{0x0F12, 0xF6D7},    // 700044A4
+	{0x0F12, 0x0000},    // 700044A6
+	{0x0F12, 0x4778},    // 700044A8
+	{0x0F12, 0x46C0},    // 700044AA
+	{0x0F12, 0xC000},    // 700044AC
+	{0x0F12, 0xE59F},    // 700044AE
+	{0x0F12, 0xFF1C},    // 700044B0
+	{0x0F12, 0xE12F},    // 700044B2
+	{0x0F12, 0xB49D},    // 700044B4
+	{0x0F12, 0x0000},    // 700044B6
+	{0x0F12, 0x4778},    // 700044B8
+	{0x0F12, 0x46C0},    // 700044BA
+	{0x0F12, 0xC000},    // 700044BC
+	{0x0F12, 0xE59F},    // 700044BE
+	{0x0F12, 0xFF1C},    // 700044C0
+	{0x0F12, 0xE12F},    // 700044C2
+	{0x0F12, 0x7EDF},    // 700044C4
+	{0x0F12, 0x0000},    // 700044C6
+	{0x0F12, 0x4778},    // 700044C8
+	{0x0F12, 0x46C0},    // 700044CA
+	{0x0F12, 0xC000},    // 700044CC
+	{0x0F12, 0xE59F},    // 700044CE
+	{0x0F12, 0xFF1C},    // 700044D0
+	{0x0F12, 0xE12F},    // 700044D2
+	{0x0F12, 0x448D},    // 700044D4
+	{0x0F12, 0x0000},    // 700044D6
+	{0x0F12, 0x4778},    // 700044D8
+	{0x0F12, 0x46C0},    // 700044DA
+	{0x0F12, 0xF004},    // 700044DC
+	{0x0F12, 0xE51F},    // 700044DE
+	{0x0F12, 0x29EC},    // 700044E0
+	{0x0F12, 0x0001},    // 700044E2
+	{0x0F12, 0x4778},    // 700044E4
+	{0x0F12, 0x46C0},    // 700044E6
+	{0x0F12, 0xC000},    // 700044E8
+	{0x0F12, 0xE59F},    // 700044EA
+	{0x0F12, 0xFF1C},    // 700044EC
+	{0x0F12, 0xE12F},    // 700044EE
+	{0x0F12, 0x2EF1},    // 700044F0
+	{0x0F12, 0x0000},    // 700044F2
+	{0x0F12, 0x4778},    // 700044F4
+	{0x0F12, 0x46C0},    // 700044F6
+	{0x0F12, 0xC000},    // 700044F8
+	{0x0F12, 0xE59F},    // 700044FA
+	{0x0F12, 0xFF1C},    // 700044FC
+	{0x0F12, 0xE12F},    // 700044FE
+	{0x0F12, 0xEE03},    // 70004500
+	{0x0F12, 0x0000},    // 70004502
+	{0x0F12, 0x4778},    // 70004504
+	{0x0F12, 0x46C0},    // 70004506
+	{0x0F12, 0xC000},    // 70004508
+	{0x0F12, 0xE59F},    // 7000450A
+	{0x0F12, 0xFF1C},    // 7000450C
+	{0x0F12, 0xE12F},    // 7000450E
+	{0x0F12, 0xA58B},    // 70004510
+	{0x0F12, 0x0000},    // 70004512
+	{0x0F12, 0x4778},    // 70004514
+	{0x0F12, 0x46C0},    // 70004516
+	{0x0F12, 0xC000},    // 70004518
+	{0x0F12, 0xE59F},    // 7000451A
+	{0x0F12, 0xFF1C},    // 7000451C
+	{0x0F12, 0xE12F},    // 7000451E
+	{0x0F12, 0x7C49},    // 70004520
+	{0x0F12, 0x0000},    // 70004522
+	{0x0F12, 0x4778},    // 70004524
+	{0x0F12, 0x46C0},    // 70004526
+	{0x0F12, 0xC000},    // 70004528
+	{0x0F12, 0xE59F},    // 7000452A
+	{0x0F12, 0xFF1C},    // 7000452C
+	{0x0F12, 0xE12F},    // 7000452E
+	{0x0F12, 0x7C63},    // 70004530
+	{0x0F12, 0x0000},    // 70004532
+	{0x0F12, 0x4778},    // 70004534
+	{0x0F12, 0x46C0},    // 70004536
+	{0x0F12, 0xC000},    // 70004538
+	{0x0F12, 0xE59F},    // 7000453A
+	{0x0F12, 0xFF1C},    // 7000453C
+	{0x0F12, 0xE12F},    // 7000453E
+	{0x0F12, 0x2DB7},    // 70004540
+	{0x0F12, 0x0000},    // 70004542
+	{0x0F12, 0x4778},    // 70004544
+	{0x0F12, 0x46C0},    // 70004546
+	{0x0F12, 0xC000},    // 70004548
+	{0x0F12, 0xE59F},    // 7000454A
+	{0x0F12, 0xFF1C},    // 7000454C
+	{0x0F12, 0xE12F},    // 7000454E
+	{0x0F12, 0xEB3D},    // 70004550
+	{0x0F12, 0x0000},    // 70004552
+	{0x0F12, 0x4778},    // 70004554
+	{0x0F12, 0x46C0},    // 70004556
+	{0x0F12, 0xC000},    // 70004558
+	{0x0F12, 0xE59F},    // 7000455A
+	{0x0F12, 0xFF1C},    // 7000455C
+	{0x0F12, 0xE12F},    // 7000455E
+	{0x0F12, 0xF061},    // 70004560
+	{0x0F12, 0x0000},    // 70004562
+	{0x0F12, 0x4778},    // 70004564
+	{0x0F12, 0x46C0},    // 70004566
+	{0x0F12, 0xC000},    // 70004568
+	{0x0F12, 0xE59F},    // 7000456A
+	{0x0F12, 0xFF1C},    // 7000456C
+	{0x0F12, 0xE12F},    // 7000456E
+	{0x0F12, 0xF0EF},    // 70004570
+	{0x0F12, 0x0000},    // 70004572
+	{0x0F12, 0x4778},    // 70004574
+	{0x0F12, 0x46C0},    // 70004576
+	{0x0F12, 0xF004},    // 70004578
+	{0x0F12, 0xE51F},    // 7000457A
+	{0x0F12, 0x2824},    // 7000457C
+	{0x0F12, 0x0001},    // 7000457E
+	{0x0F12, 0x4778},    // 70004580
+	{0x0F12, 0x46C0},    // 70004582
+	{0x0F12, 0xC000},    // 70004584
+	{0x0F12, 0xE59F},    // 70004586
+	{0x0F12, 0xFF1C},    // 70004588
+	{0x0F12, 0xE12F},    // 7000458A
+	{0x0F12, 0x8EDD},    // 7000458C
+	{0x0F12, 0x0000},    // 7000458E
+	{0x0F12, 0x4778},    // 70004590
+	{0x0F12, 0x46C0},    // 70004592
+	{0x0F12, 0xC000},    // 70004594
+	{0x0F12, 0xE59F},    // 70004596
+	{0x0F12, 0xFF1C},    // 70004598
+	{0x0F12, 0xE12F},    // 7000459A
+	{0x0F12, 0x8DCB},    // 7000459C
+	{0x0F12, 0x0000},    // 7000459E
+	{0x0F12, 0x4778},    // 700045A0
+	{0x0F12, 0x46C0},    // 700045A2
+	{0x0F12, 0xC000},    // 700045A4
+	{0x0F12, 0xE59F},    // 700045A6
+	{0x0F12, 0xFF1C},    // 700045A8
+	{0x0F12, 0xE12F},    // 700045AA
+	{0x0F12, 0x8E17},    // 700045AC
+	{0x0F12, 0x0000},    // 700045AE
+	{0x0F12, 0x4778},    // 700045B0
+	{0x0F12, 0x46C0},    // 700045B2
+	{0x0F12, 0xC000},    // 700045B4
+	{0x0F12, 0xE59F},    // 700045B6
+	{0x0F12, 0xFF1C},    // 700045B8
+	{0x0F12, 0xE12F},    // 700045BA
+	{0x0F12, 0x98C5},    // 700045BC
+	{0x0F12, 0x0000},    // 700045BE
+	{0x0F12, 0x4778},    // 700045C0
+	{0x0F12, 0x46C0},    // 700045C2
+	{0x0F12, 0xC000},    // 700045C4
+	{0x0F12, 0xE59F},    // 700045C6
+	{0x0F12, 0xFF1C},    // 700045C8
+	{0x0F12, 0xE12F},    // 700045CA
+	{0x0F12, 0x7C7D},    // 700045CC
+	{0x0F12, 0x0000},    // 700045CE
+	{0x0F12, 0x4778},    // 700045D0
+	{0x0F12, 0x46C0},    // 700045D2
+	{0x0F12, 0xC000},    // 700045D4
+	{0x0F12, 0xE59F},    // 700045D6
+	{0x0F12, 0xFF1C},    // 700045D8
+	{0x0F12, 0xE12F},    // 700045DA
+	{0x0F12, 0x7E31},    // 700045DC
+	{0x0F12, 0x0000},    // 700045DE
+	{0x0F12, 0x4778},    // 700045E0
+	{0x0F12, 0x46C0},    // 700045E2
+	{0x0F12, 0xC000},    // 700045E4
+	{0x0F12, 0xE59F},    // 700045E6
+	{0x0F12, 0xFF1C},    // 700045E8
+	{0x0F12, 0xE12F},    // 700045EA
+	{0x0F12, 0x7EAB},    // 700045EC
+	{0x0F12, 0x0000},    // 700045EE
+	{0x0F12, 0x4778},    // 700045F0
+	{0x0F12, 0x46C0},    // 700045F2
+	{0x0F12, 0xC000},    // 700045F4
+	{0x0F12, 0xE59F},    // 700045F6
+	{0x0F12, 0xFF1C},    // 700045F8
+	{0x0F12, 0xE12F},    // 700045FA
+	{0x0F12, 0x7501},    // 700045FC
+	{0x0F12, 0x0000},    // 700045FE
+	{0x0F12, 0x4778},    // 70004600
+	{0x0F12, 0x46C0},    // 70004602
+	{0x0F12, 0xC000},    // 70004604
+	{0x0F12, 0xE59F},    // 70004606
+	{0x0F12, 0xFF1C},    // 70004608
+	{0x0F12, 0xE12F},    // 7000460A
+	{0x0F12, 0xF63F},    // 7000460C
+	{0x0F12, 0x0000},    // 7000460E
+	{0x0F12, 0x4778},    // 70004610
+	{0x0F12, 0x46C0},    // 70004612
+	{0x0F12, 0xC000},    // 70004614
+	{0x0F12, 0xE59F},    // 70004616
+	{0x0F12, 0xFF1C},    // 70004618
+	{0x0F12, 0xE12F},    // 7000461A
+	{0x0F12, 0x3D0B},    // 7000461C
+	{0x0F12, 0x0000},    // 7000461E
+	{0x0F12, 0x4778},    // 70004620
+	{0x0F12, 0x46C0},    // 70004622
+	{0x0F12, 0xC000},    // 70004624
+	{0x0F12, 0xE59F},    // 70004626
+	{0x0F12, 0xFF1C},    // 70004628
+	{0x0F12, 0xE12F},    // 7000462A
+	{0x0F12, 0x29BF},    // 7000462C
+	{0x0F12, 0x0001},    // 7000462E
+	{0x0F12, 0x4778},    // 70004630
+	{0x0F12, 0x46C0},    // 70004632
+	{0x0F12, 0xF004},    // 70004634
+	{0x0F12, 0xE51F},    // 70004636
+	{0x0F12, 0x26D8},    // 70004638
+	{0x0F12, 0x0001},    // 7000463A
+	{0x0F12, 0x4778},    // 7000463C
+	{0x0F12, 0x46C0},    // 7000463E
+	{0x0F12, 0xC000},    // 70004640
+	{0x0F12, 0xE59F},    // 70004642
+	{0x0F12, 0xFF1C},    // 70004644
+	{0x0F12, 0xE12F},    // 70004646
+	{0x0F12, 0x306B},    // 70004648
+	{0x0F12, 0x0000},    // 7000464A
+	{0x0F12, 0x4778},    // 7000464C
+	{0x0F12, 0x46C0},    // 7000464E
+	{0x0F12, 0xC000},    // 70004650
+	{0x0F12, 0xE59F},    // 70004652
+	{0x0F12, 0xFF1C},    // 70004654
+	{0x0F12, 0xE12F},    // 70004656
+	{0x0F12, 0x6099},    // 70004658
+	{0x0F12, 0x0000},    // 7000465A
+	// End of Patch Data(Last : 7000465Ah)
+	// Total Size 2916 (0B64)
+	// Addr : 3AF8  Size : 2914(B62h)
+
+
+	//	TNP_USER_MBCV_CONTROL
+	// TNP_4EC_MBR_TUNE
+	// TNP_4EC_FORBIDDEN_TUNE
+	// TNP_AF_FINESEARCH_DRIVEBACK
+	// TNP_FLASH_ALG
+	// TNP_GAS_ALPHA_OTP
+	//	TNP_AWB_MODUL_COMP
+	// TNP_AWB_INIT_QUEUE
+	// TNP_AWB_GRID_LOWBR
+	// TNP_AWB_GRID_MODULECOMP
+	//	TNP_ADLC_TUNE
+	// TNP_1FRAME_AE
+	// TNP_TG_OFF_CFG_CHG_IN_SPOOF_MODE
+
+	//===================================================================
+	// OTP setting
+	//===================================================================
+	{0x002A, 0x0722},
+	{0x0F12, 0x0100},	//skl_OTP_usWaitTime This reg should be in fornt of D0001000
+	{0x002A, 0x0726},
+	{0x0F12, 0x0001},	//skl_bUseOTPfunc OTP shading is used,this reg should be 1	//
+	{0x002A, 0x08D6},
+	{0x0F12, 0x0001},	//ash_bUseOTPData OTP shading is used, this reg should be 1	//
+	{0x002A, 0x146E},
+	{0x0F12, 0x0000},	//awbb_otp_disable OTP AWB (0: use AWB Cal.)	//
+	{0x002A, 0x08DC},
+	{0x0F12, 0x0000},	//ash_bUseGasAlphaOTP OTP alpha is used, this reg should be 1
+
+	{0x0028, 0xD000},
+	{0x002A, 0x1000},
+	{0x0F12, 0x0001},
+
+	//{0x0028, 0x7000},
+	//{0x002A, 0x47B0},
+	//{0x0F12, 0x0000},	//TNP_Regs_BUse1FrameAE		(0: off, 1: on)
+
+
+
+	//===================================================================
+	// GAS setting (Shading)
+	//===================================================================
+	// If OTP is used, GAS setting should be deleted.
+	//===================================================================
+	// GAS Alpha setting
+	//===================================================================
+	// Refer Mon_AWB_RotGain
+	{0x0028, 0x7000},
+	{0x002A, 0x08B4},
+	{0x0F12, 0x0001},	//wbt_bUseOutdoorASH
+	{0x002A, 0x08BC},
+	{0x0F12, 0x00C0},	//TVAR_ash_AwbAshCord_0_ 2300K
+	{0x0F12, 0x00DF},	//TVAR_ash_AwbAshCord_1_ 2750K
+	{0x0F12, 0x0100},	//TVAR_ash_AwbAshCord_2_ 3300K
+	{0x0F12, 0x0125},	//TVAR_ash_AwbAshCord_3_ 4150K
+	{0x0F12, 0x015F},	//TVAR_ash_AwbAshCord_4_ 5250K
+	{0x0F12, 0x017C},	//TVAR_ash_AwbAshCord_5_ 6400K
+	{0x0F12, 0x0194},	//TVAR_ash_AwbAshCord_6_ 7500K
+
+	// GAS Alpha Table
+	{0x002A, 0x08F6},
+	{0x0F12, 0x4000}, //TVAR_ash_GASAlpha_0__0_ R  // 2300K
+	{0x0F12, 0x4000}, //TVAR_ash_GASAlpha_0__1_ GR
+	{0x0F12, 0x4000}, //TVAR_ash_GASAlpha_0__2_ GB
+	{0x0F12, 0x4000}, //TVAR_ash_GASAlpha_0__3_ B
+
+	{0x0F12, 0x4000}, //TVAR_ash_GASAlpha_1__0_ R  // 2750K
+	{0x0F12, 0x4000}, //TVAR_ash_GASAlpha_1__1_ GR
+	{0x0F12, 0x4000}, //TVAR_ash_GASAlpha_1__2_ GB
+	{0x0F12, 0x4000}, //TVAR_ash_GASAlpha_1__3_ B
+
+	{0x0F12, 0x4000}, //TVAR_ash_GASAlpha_2__0_ R  // 3300K
+	{0x0F12, 0x4000}, //TVAR_ash_GASAlpha_2__1_ GR
+	{0x0F12, 0x4000}, //TVAR_ash_GASAlpha_2__2_ GB
+	{0x0F12, 0x4000}, //TVAR_ash_GASAlpha_2__3_ B
+
+	{0x0F12, 0x3B00}, //TVAR_ash_GASAlpha_3__0_ R  // 5???K
+	{0x0F12, 0x4000}, //TVAR_ash_GASAlpha_3__1_ GR
+	{0x0F12, 0x4000}, //TVAR_ash_GASAlpha_3__2_ GB
+	{0x0F12, 0x4000}, //TVAR_ash_GASAlpha_3__3_ B
+
+	{0x0F12, 0x3E00}, //TVAR_ash_GASAlpha_4__0_ R  // ????K
+	{0x0F12, 0x4000}, //TVAR_ash_GASAlpha_4__1_ GR
+	{0x0F12, 0x4000}, //TVAR_ash_GASAlpha_4__2_ GB
+	{0x0F12, 0x4000}, //TVAR_ash_GASAlpha_4__3_ B
+
+	{0x0F12, 0x4100}, //TVAR_ash_GASAlpha_5__0_ R  // 6400K
+	{0x0F12, 0x4000}, //TVAR_ash_GASAlpha_5__1_ GR
+	{0x0F12, 0x4000}, //TVAR_ash_GASAlpha_5__2_ GB
+	{0x0F12, 0x4000}, //TVAR_ash_GASAlpha_5__3_ B
+
+	{0x0F12, 0x4300}, //TVAR_ash_GASAlpha_6__0_ R  // 7500K
+	{0x0F12, 0x4000}, //TVAR_ash_GASAlpha_6__1_ GR
+	{0x0F12, 0x4000}, //TVAR_ash_GASAlpha_6__2_ GB
+	{0x0F12, 0x4000}, //TVAR_ash_GASAlpha_6__3_ B
+
+	// Outdoor GAS Alpha
+	{0x0F12, 0x4900}, //TVAR_ash_GASOutdoorAlpha_0_ R // ??
+	{0x0F12, 0x4000}, //TVAR_ash_GASOutdoorAlpha_1_ GR
+	{0x0F12, 0x4000}, //TVAR_ash_GASOutdoorAlpha_2_ GB
+	{0x0F12, 0x4000}, //TVAR_ash_GASOutdoorAlpha_3_ B
+
+	{0x002A, 0x08F4},
+	{0x0F12, 0x0001},   //ash_bUseGasAlpha
+
+
+	//==================================================================================
+	// 07. Analog Setting 2
+	//==================================================================================
+	//This register is for FACTORY ONLY.
+	//If you change it without prior notification
+	//YOU are RESPONSIBLE for the FAILURE that will happen in the future
+	//For subsampling Size
+
+	{0x0028, 0x7000},
+	{0x002A, 0x18BC},
+	{0x0F12, 0x0004},	//senHal_ContPtrs_senModesDataArr_0_
+	{0x0F12, 0x05B6},	//senHal_ContPtrs_senModesDataArr_1_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_2_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_3_
+	{0x0F12, 0x0001},	//senHal_ContPtrs_senModesDataArr_4_
+	{0x0F12, 0x05BA},	//senHal_ContPtrs_senModesDataArr_5_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_6_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_7_
+	{0x0F12, 0x0007},	//senHal_ContPtrs_senModesDataArr_8_
+	{0x0F12, 0x05BA},	//senHal_ContPtrs_senModesDataArr_9_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_10_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_11_
+	{0x0F12, 0x01F4},	//senHal_ContPtrs_senModesDataArr_12_
+	{0x0F12, 0x024E},	//senHal_ContPtrs_senModesDataArr_13_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_14_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_15_
+	{0x0F12, 0x01F4},	//senHal_ContPtrs_senModesDataArr_16_
+	{0x0F12, 0x05B6},	//senHal_ContPtrs_senModesDataArr_17_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_18_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_19_
+	{0x0F12, 0x01F4},	//senHal_ContPtrs_senModesDataArr_20_
+	{0x0F12, 0x05BA},	//senHal_ContPtrs_senModesDataArr_21_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_22_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_23_
+	{0x0F12, 0x01F4},	//senHal_ContPtrs_senModesDataArr_24_
+	{0x0F12, 0x024F},	//senHal_ContPtrs_senModesDataArr_25_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_26_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_27_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_28_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_29_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_30_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_31_
+	{0x0F12, 0x0075},	//senHal_ContPtrs_senModesDataArr_32_
+	{0x0F12, 0x00CF},	//senHal_ContPtrs_senModesDataArr_33_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_34_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_35_
+	{0x0F12, 0x0075},	//senHal_ContPtrs_senModesDataArr_36_
+	{0x0F12, 0x00D6},	//senHal_ContPtrs_senModesDataArr_37_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_38_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_39_
+	{0x0F12, 0x0004},	//senHal_ContPtrs_senModesDataArr_40_
+	{0x0F12, 0x01F4},	//senHal_ContPtrs_senModesDataArr_41_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_42_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_43_
+	{0x0F12, 0x00F0},	//senHal_ContPtrs_senModesDataArr_44_
+	{0x0F12, 0x01F4},	//senHal_ContPtrs_senModesDataArr_45_
+	{0x0F12, 0x029E},	//senHal_ContPtrs_senModesDataArr_46_
+	{0x0F12, 0x05B2},	//senHal_ContPtrs_senModesDataArr_47_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_48_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_49_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_50_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_51_
+	{0x0F12, 0x01F8},	//senHal_ContPtrs_senModesDataArr_52_
+	{0x0F12, 0x0228},	//senHal_ContPtrs_senModesDataArr_53_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_54_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_55_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_56_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_57_
+	{0x0F12, 0x0208},	//senHal_ContPtrs_senModesDataArr_58_
+	{0x0F12, 0x0238},	//senHal_ContPtrs_senModesDataArr_59_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_60_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_61_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_62_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_63_
+	{0x0F12, 0x0218},	//senHal_ContPtrs_senModesDataArr_64_
+	{0x0F12, 0x0238},	//senHal_ContPtrs_senModesDataArr_65_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_66_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_67_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_68_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_69_
+	{0x0F12, 0x0001},	//senHal_ContPtrs_senModesDataArr_70_
+	{0x0F12, 0x0009},	//senHal_ContPtrs_senModesDataArr_71_
+	{0x0F12, 0x00DE},	//senHal_ContPtrs_senModesDataArr_72_
+	{0x0F12, 0x05C0},	//senHal_ContPtrs_senModesDataArr_73_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_74_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_75_
+	{0x0F12, 0x00DF},	//senHal_ContPtrs_senModesDataArr_76_
+	{0x0F12, 0x00E4},	//senHal_ContPtrs_senModesDataArr_77_
+	{0x0F12, 0x01F8},	//senHal_ContPtrs_senModesDataArr_78_
+	{0x0F12, 0x01FD},	//senHal_ContPtrs_senModesDataArr_79_
+	{0x0F12, 0x05B6},	//senHal_ContPtrs_senModesDataArr_80_
+	{0x0F12, 0x05BB},	//senHal_ContPtrs_senModesDataArr_81_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_82_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_83_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_84_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_85_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_86_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_87_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_88_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_89_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_90_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_91_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_92_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_93_
+	{0x0F12, 0x01F8},	//senHal_ContPtrs_senModesDataArr_94_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_95_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_96_
+	{0x0F12, 0x0077},	//senHal_ContPtrs_senModesDataArr_97_
+	{0x0F12, 0x007E},	//senHal_ContPtrs_senModesDataArr_98_
+	{0x0F12, 0x024F},	//senHal_ContPtrs_senModesDataArr_99_
+	{0x0F12, 0x025E},	//senHal_ContPtrs_senModesDataArr_100_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_101_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_102_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_103_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senModesDataArr_104_
+
+	{0x0F12, 0x0004},	//senHal_ContPtrs_senAvgModesDataArr_0_
+	{0x0F12, 0x09D1},	//senHal_ContPtrs_senAvgModesDataArr_1_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_2_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_3_
+	{0x0F12, 0x0001},	//senHal_ContPtrs_senAvgModesDataArr_4_
+	{0x0F12, 0x09D5},	//senHal_ContPtrs_senAvgModesDataArr_5_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_6_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_7_
+	{0x0F12, 0x0008},	//senHal_ContPtrs_senAvgModesDataArr_8_
+	{0x0F12, 0x09D5},	//senHal_ContPtrs_senAvgModesDataArr_9_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_10_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_11_
+	{0x0F12, 0x02AA},	//senHal_ContPtrs_senAvgModesDataArr_12_
+	{0x0F12, 0x0326},	//senHal_ContPtrs_senAvgModesDataArr_13_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_14_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_15_
+	{0x0F12, 0x02AA},	//senHal_ContPtrs_senAvgModesDataArr_16_
+	{0x0F12, 0x09D1},	//senHal_ContPtrs_senAvgModesDataArr_17_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_18_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_19_
+	{0x0F12, 0x02AA},	//senHal_ContPtrs_senAvgModesDataArr_20_
+	{0x0F12, 0x09D5},	//senHal_ContPtrs_senAvgModesDataArr_21_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_22_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_23_
+	{0x0F12, 0x02AA},	//senHal_ContPtrs_senAvgModesDataArr_24_
+	{0x0F12, 0x0327},	//senHal_ContPtrs_senAvgModesDataArr_25_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_26_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_27_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_28_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_29_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_30_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_31_
+	{0x0F12, 0x0008},	//senHal_ContPtrs_senAvgModesDataArr_32_
+	{0x0F12, 0x0084},	//senHal_ContPtrs_senAvgModesDataArr_33_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_34_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_35_
+	{0x0F12, 0x0008},	//senHal_ContPtrs_senAvgModesDataArr_36_
+	{0x0F12, 0x008D},	//senHal_ContPtrs_senAvgModesDataArr_37_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_38_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_39_
+	{0x0F12, 0x0008},	//senHal_ContPtrs_senAvgModesDataArr_40_
+	{0x0F12, 0x02AA},	//senHal_ContPtrs_senAvgModesDataArr_41_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_42_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_43_
+	{0x0F12, 0x00AA},	//senHal_ContPtrs_senAvgModesDataArr_44_
+	{0x0F12, 0x02AA},	//senHal_ContPtrs_senAvgModesDataArr_45_
+	{0x0F12, 0x03AD},	//senHal_ContPtrs_senAvgModesDataArr_46_
+	{0x0F12, 0x09CD},	//senHal_ContPtrs_senAvgModesDataArr_47_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_48_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_49_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_50_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_51_
+	{0x0F12, 0x02AE},	//senHal_ContPtrs_senAvgModesDataArr_52_
+	{0x0F12, 0x02DE},	//senHal_ContPtrs_senAvgModesDataArr_53_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_54_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_55_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_56_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_57_
+	{0x0F12, 0x02BE},	//senHal_ContPtrs_senAvgModesDataArr_58_
+	{0x0F12, 0x02EE},	//senHal_ContPtrs_senAvgModesDataArr_59_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_60_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_61_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_62_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_63_
+	{0x0F12, 0x02CE},	//senHal_ContPtrs_senAvgModesDataArr_64_
+	{0x0F12, 0x02EE},	//senHal_ContPtrs_senAvgModesDataArr_65_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_66_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_67_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_68_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_69_
+	{0x0F12, 0x0001},	//senHal_ContPtrs_senAvgModesDataArr_70_
+	{0x0F12, 0x0009},	//senHal_ContPtrs_senAvgModesDataArr_71_
+	{0x0F12, 0x0095},	//senHal_ContPtrs_senAvgModesDataArr_72_
+	{0x0F12, 0x09DB},	//senHal_ContPtrs_senAvgModesDataArr_73_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_74_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_75_
+	{0x0F12, 0x0096},	//senHal_ContPtrs_senAvgModesDataArr_76_
+	{0x0F12, 0x009B},	//senHal_ContPtrs_senAvgModesDataArr_77_
+	{0x0F12, 0x02AE},	//senHal_ContPtrs_senAvgModesDataArr_78_
+	{0x0F12, 0x02B3},	//senHal_ContPtrs_senAvgModesDataArr_79_
+	{0x0F12, 0x09D1},	//senHal_ContPtrs_senAvgModesDataArr_80_
+	{0x0F12, 0x09D6},	//senHal_ContPtrs_senAvgModesDataArr_81_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_82_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_83_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_84_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_85_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_86_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_87_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_88_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_89_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_90_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_91_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_92_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_93_
+	{0x0F12, 0x02AE},	//senHal_ContPtrs_senAvgModesDataArr_94_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_95_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_96_
+	{0x0F12, 0x0009},	//senHal_ContPtrs_senAvgModesDataArr_97_
+	{0x0F12, 0x0010},	//senHal_ContPtrs_senAvgModesDataArr_98_
+	{0x0F12, 0x0327},	//senHal_ContPtrs_senAvgModesDataArr_99_
+	{0x0F12, 0x0336},	//senHal_ContPtrs_senAvgModesDataArr_100_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_101_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_102_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_103_
+	{0x0F12, 0x0000},	//senHal_ContPtrs_senAvgModesDataArr_104_
+
+	{0x002A, 0x1AF8},
+	{0x0F12, 0x5A3C},	//senHal_TuneStr_AngTuneData1_2_ register at subsampling
+	{0x002A, 0x1896},
+	{0x0F12, 0x0002},	//senHal_SamplingType
+	{0x0F12, 0x0000},	//senHal_SamplingMode 0000 : 2PLA, 0001 : 4PLA
+	{0x0F12, 0x0003},	//senHal_PLAOption [0] VPLA enable, [1] HPLA enable
+
+	{0x002A, 0x1B00},       //Green Noise
+	{0x0F12, 0xF428},
+	{0x0F12, 0xFFFF},
+	{0x0F12, 0x0000},
+
+	{0x002A, 0x189E},
+	{0x0F12, 0x0FB0},	//senHal_ExpMinPixels
+
+	{0x002A, 0x18AC},
+	{0x0F12, 0x0060},	//senHal_uAddColsBin
+	{0x0F12, 0x0060},	//senHal_uAddColsNoBin
+	{0x0F12, 0x05C0},	//senHal_uMinColsBin
+	{0x0F12, 0x05C0},	//senHal_uMinColsNoBin
+
+	{0x002A, 0x1AEA},
+	{0x0F12, 0x8080},	//senHal_SubF404Tune
+	{0x0F12, 0x0080},	//senHal_FullF404Tune
+	{0x002A, 0x1AE0},
+	{0x0F12, 0x0000},	//senHal_bSenAAC
+
+	{0x002A, 0x1A72},
+	{0x0F12, 0x0000},	//senHal_bSRX SRX off
+	{0x002A, 0x18A2},
+	{0x0F12, 0x0004},	//senHal_NExpLinesCheckFine extend Forbidden area line
+	{0x002A, 0x1A6A},
+	{0x0F12, 0x009A},	//senHal_usForbiddenRightOfs extend right Forbidden area line
+	{0x002A, 0x385E},
+	{0x0F12, 0x024C},	//Mon_Sen_uExpPixelsOfs
+
+	{0x002A, 0x0EE6},
+	{0x0F12, 0x0000},	//setot_bUseDigitalHbin
+	{0x002A, 0x1B2A},
+	{0x0F12, 0x0300},	//senHal_TuneStr2_usAngTuneGainTh
+	{0x0F12, 0x00D6},	//senHal_TuneStr2_AngTuneF4CA_0_
+	{0x0F12, 0x008D},	//senHal_TuneStr2_AngTuneF4CA_1_
+	{0x0F12, 0x00CF},	//senHal_TuneStr2_AngTuneF4C2_0_
+	{0x0F12, 0x0084},	//senHal_TuneStr2_AngTuneF4C2_1_
+
+
+	//===================================================================
+	// 08.AF Setting
+	//===================================================================
+
+	{0x0028, 0x7000},
+	{0x002A, 0x01FC},
+	{0x0F12, 0x0001},   // REG_TC_IPRM_LedGpio
+			// 70001720 0100 Only STW Use IT
+	{0x002A, 0x01FE},
+	{0x0F12, 0x0003},
+	{0x0F12, 0x0000},
+	{0x002A, 0x0204},
+	{0x0F12, 0x0061},
+	{0x002A, 0x020C},
+	{0x0F12, 0x2F0C},
+	{0x0F12, 0x0190},
+
+	{0x002A, 0x0294},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x00E3},
+	{0x0F12, 0x0200},
+	{0x0F12, 0x0238},
+	{0x0F12, 0x01C6},
+	{0x0F12, 0x0166},
+	{0x0F12, 0x0074},
+	{0x0F12, 0x0132},
+	{0x0F12, 0x0001},
+
+	{0x002A, 0x070E},
+	{0x0F12, 0x00C0},
+	{0x002A, 0x071E},
+	{0x0F12, 0x0000},  // 20120605 SLSI son
+	{0x002A, 0x163C},
+	{0x0F12, 0x0000},
+
+	///
+	// AF
+	///
+	{0x002A, 0x1648},
+
+	// {0x0F12, 0x1002},   // 2nd search on when 2nd search lens oppsite direction moving
+	{0x0F12, 0x9002},
+
+	{0x002A, 0x1652},
+	{0x0F12, 0x0002},
+	{0x0F12, 0x0000},
+	{0x002A, 0x15E0},
+
+	// {0x0F12, 0x0801},   // when 2nd search 1code distance 6+1 position move
+	{0x0F12, 0x0402},
+
+	{0x002A, 0x164C},
+	{0x0F12, 0x0003},
+	{0x002A, 0x163E},
+
+	// {0x0F12, 0x00D5},
+	// {0x0F12, 0x0080},   //98(60%) -> CC(80%)
+	{0x0F12, 0x00C2},
+	{0x0F12, 0x0098},   //98(60%) -> CC(80%)
+
+
+	{0x002A, 0x15D4},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xD000},
+
+	{0x002A, 0x169A},
+	{0x0F12, 0xFF95},
+	{0x002A, 0x166A},
+	{0x0F12, 0x0280},
+	{0x002A, 0x1676},
+	{0x0F12, 0x03A0},
+	{0x0F12, 0x0320},
+	{0x002A, 0x16BC},
+	{0x0F12, 0x0030},
+	{0x002A, 0x16E0},
+	{0x0F12, 0x0060},
+	{0x002A, 0x16D4},
+	{0x0F12, 0x0010},
+	{0x002A, 0x1656},
+	{0x0F12, 0x0000},
+	{0x002A, 0x15E6},
+	{0x0F12, 0x003C},
+
+	{0x0F12, 0x0018},   //af_pos_usTableLastInd
+	{0x0F12, 0x002A},
+	{0x0F12, 0x0030},
+	{0x0F12, 0x0036},
+	{0x0F12, 0x003C},
+	{0x0F12, 0x0042},
+	{0x0F12, 0x0048},
+	{0x0F12, 0x004E},
+	{0x0F12, 0x0054},
+	{0x0F12, 0x005A},
+	{0x0F12, 0x0060},
+	{0x0F12, 0x0066},
+	{0x0F12, 0x006C},
+	{0x0F12, 0x0072},
+	{0x0F12, 0x0078},
+	{0x0F12, 0x007E},
+	{0x0F12, 0x0084},
+	{0x0F12, 0x008A},
+	{0x0F12, 0x0090},
+	{0x0F12, 0x0096},
+	{0x0F12, 0x009C},
+	{0x0F12, 0x00A2},
+	{0x0F12, 0x00A8},
+	{0x0F12, 0x00AE},
+	{0x0F12, 0x00B4},
+	{0x0F12, 0x00BA},
+
+	{0x002A, 0x1722},
+	{0x0F12, 0x8000},
+	{0x0F12, 0x0006},
+	{0x0F12, 0x3FF0},
+	{0x0F12, 0x03E8},
+	{0x0F12, 0x0000},
+
+	// {0x0F12, 0x0003},   //delay2 when threshold upper lens moving when moving distance 9 delay 80h 12.8ms delay
+	{0x0F12, 0x0008},   // delay2 ??
+
+	{0x0F12, 0x0001},   //threshold
+	{0x0F12, 0x0004},   //delay1 ??
+	{0x0F12, 0x0080},
+	{0x0F12, 0x00C0},
+	{0x0F12, 0x00E0},
+	{0x0F12, 0x0000},
+
+	{0x002A, 0x028C},
+	{0x0F12, 0x0003},	//REG_TC_AF_AfCmd
+
+	//===================================================================
+	// AWB setting
+	//===================================================================
+	// AWB White Locus should be in front of REG_TC_IPRM_InitParamsUpdated //
+
+	// AWB init Start point
+	{0x002A, 0x145E},
+	{0x0F12, 0x0580},
+	{0x0F12, 0x0428},
+	{0x0F12, 0x07B0},
+
+	// White Locus
+	{0x002A, 0x11F0},
+	{0x0F12, 0x0120},   //awbb_IntcR
+	{0x0F12, 0x0121},	//awbb_IntcB
+
+	// Indoor Zone
+	{0x002A, 0x101C},
+	{0x0F12, 0x03B8},
+	{0x0F12, 0x0410},
+	{0x0F12, 0x0344},
+	{0x0F12, 0x040C},
+	{0x0F12, 0x02E6},
+	{0x0F12, 0x03F0},	//awbb_IndoorGrZones_m_BGrid_0__m_right
+	{0x0F12, 0x029A},
+	{0x0F12, 0x03A8},
+	{0x0F12, 0x0272},
+	{0x0F12, 0x0366},
+	{0x0F12, 0x0250},
+	{0x0F12, 0x032E},
+	{0x0F12, 0x0240},
+	{0x0F12, 0x02F4},
+	{0x0F12, 0x0236},
+	{0x0F12, 0x02BC},
+	{0x0F12, 0x021A},
+	{0x0F12, 0x02A0},
+	{0x0F12, 0x01F4},
+	{0x0F12, 0x0298},
+	{0x0F12, 0x01B8},
+	{0x0F12, 0x0290},
+	{0x0F12, 0x01A4},
+	{0x0F12, 0x0276},
+	{0x0F12, 0x01AA},
+	{0x0F12, 0x0260},
+	{0x0F12, 0x01C6},
+	{0x0F12, 0x0210},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},	  //awbb_IndoorGrZones_m_GridStep
+	{0x0F12, 0x0005},
+	{0x002A, 0x1070},		//awbb_IndoorGrZones_ZInfo_m_GridSz
+	{0x0F12, 0x000E},
+	{0x002A, 0x1074},		//awbb_IndoorGrZones_m_Boffs
+	{0x0F12, 0x0106}, // ??
+	// Outdoor Zone
+	{0x002A, 0x1078},
+	{0x0F12, 0x025A},
+	{0x0F12, 0x027C},
+	{0x0F12, 0x0236},
+	{0x0F12, 0x028E},
+	{0x0F12, 0x0222},
+	{0x0F12, 0x0290},
+	{0x0F12, 0x0214},
+	{0x0F12, 0x0290},
+	{0x0F12, 0x0208},
+	{0x0F12, 0x028E},
+	{0x0F12, 0x0200},
+	{0x0F12, 0x0288},
+	{0x0F12, 0x01F8},
+	{0x0F12, 0x027E},
+	{0x0F12, 0x01F4},
+	{0x0F12, 0x0272},
+	{0x0F12, 0x01FC},
+	{0x0F12, 0x0260},
+	{0x0F12, 0x021C},
+	{0x0F12, 0x023C},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+
+	{0x0F12, 0x0004},	//awbb_OutdoorGrZones_m_GridStep
+	{0x002A, 0x10AC},
+	{0x0F12, 0x000A},		//awbb_OutdoorGrZones_ZInfo_m_GridSz
+	{0x002A, 0x10B0},
+	{0x0F12, 0x01DC},		//awbb_OutdoorGrZones_m_Boffs
+
+	// Low Brightness Zone
+	{0x002A, 0x10B4},
+	{0x0F12, 0x039E},
+	{0x0F12, 0x0470},
+	{0x0F12, 0x0330},
+	{0x0F12, 0x0460},
+	{0x0F12, 0x02C4},
+	{0x0F12, 0x0452},
+	{0x0F12, 0x0278},
+	{0x0F12, 0x041C},
+	{0x0F12, 0x0230},
+	{0x0F12, 0x03EE},
+	{0x0F12, 0x01F0},
+	{0x0F12, 0x0392},
+	{0x0F12, 0x01C0},
+	{0x0F12, 0x0340},
+	{0x0F12, 0x0194},
+	{0x0F12, 0x0302},
+	{0x0F12, 0x016E},
+	{0x0F12, 0x02C2},
+	{0x0F12, 0x0148},
+	{0x0F12, 0x0286},
+	{0x0F12, 0x018A},
+	{0x0F12, 0x0242},
+	{0x0F12, 0x0000},	//awbb_LowBrGrZones_m_BGrid_11__m_left
+	{0x0F12, 0x0000},	//awbb_LowBrGrZones_m_BGrid_11__m_right
+
+	{0x0F12, 0x0006},	//awbb_LowBrGrZones_m_GridStep
+	{0x002A, 0x10E8},
+	{0x0F12, 0x000B},   //awbb_LowBrGrZones_ZInfo_m_GridSz
+	{0x002A, 0x10EC},
+	{0x0F12, 0x00C6},   //awbb_LowBrGrZones_m_Boffs
+
+	// Low Temp. Zone
+	{0x002A, 0x10F0},
+	{0x0F12, 0x0380},
+	{0x0F12, 0x0000},	//awbb_CrclLowT_R_c
+	{0x0F12, 0x0168},
+	{0x0F12, 0x0000},	//awbb_CrclLowT_B_c
+	{0x0F12, 0x2D90},
+	{0x0F12, 0x0000},	//awbb_CrclLowT_Rad_c
+
+	// AWB Convergence Speed
+	{0x002A, 0x1464},
+	{0x0F12, 0x0008},	//awbb_WpFilterMinThr
+	{0x0F12, 0x0190},	//awbb_WpFilterMaxThr
+	{0x0F12, 0x00A0},	//awbb_WpFilterCoef
+
+	{0x002A, 0x1228},
+	{0x0F12, 0x00C0},
+	{0x002A, 0x122C},
+	{0x0F12, 0x0010},
+	{0x002A, 0x122A},
+	{0x0F12, 0x0010},
+	{0x002A, 0x120A},
+	{0x0F12, 0x05D5},   //awbb_MvEq_RBthresh
+	{0x002A, 0x120E},
+	{0x0F12, 0x0000},	//awbb_MovingScale10
+
+	{0x0F12, 0x0771},
+	{0x0F12, 0x03A4},
+	{0x0F12, 0x0036},
+	{0x0F12, 0x002A},
+
+	{0x002A, 0x1278},
+	{0x0F12, 0xFEF7},	//awbb_SCDetectionMap_SEC_StartR_B
+	{0x0F12, 0x0021},	//awbb_SCDetectionMap_SEC_StepR_B
+	{0x0F12, 0x0AF0},   //0E74
+	{0x0F12, 0x0AF0},   //0E74
+	{0x0F12, 0x018F},
+	{0x0F12, 0x0096},	//awbb_SCDetectionMap_SEC_SunnyNBZone
+	{0x0F12, 0x000E},
+	{0x002A, 0x1224},
+	{0x0F12, 0x0032},	//awbb_LowBr
+	{0x0F12, 0x001E},	//awbb_LowBr_NBzone
+	{0x0F12, 0x00C0},
+	{0x0F12, 0x0010},	//awbb_YThreshLow_Norm
+	{0x0F12, 0x0002},	//awbb_YThreshLow_Low
+	{0x002A, 0x2BA4},
+	{0x0F12, 0x0004},	//Mon_AWB_ByPassMode
+
+	{0x002A, 0x146C},
+	{0x0F12, 0x0002},	//awbb_GridEnable
+
+	// Grid setting
+	{0x002A, 0x1434},
+	{0x0F12, 0x02CE},   // awbb_GridConst_1
+	{0x0F12, 0x0347},   // awbb_GridConst_1_1_
+	{0x0F12, 0x03C2},   // awbb_GridConst_1_2_
+	{0x0F12, 0x1060},   // awbb_GridConst_2
+	{0x0F12, 0x1000},   // awbb_GridConst_2_1_
+	{0x0F12, 0x1150},   // awbb_GridConst_2_2_
+	{0x0F12, 0x11E5},   // awbb_GridConst_2_3_
+	{0x0F12, 0x123B},   // awbb_GridConst_2_4_
+	{0x0F12, 0x1296},   // awbb_GridConst_2_5_
+	{0x0F12, 0x00AB},   // awbb_GridCoeff_R_1
+	{0x0F12, 0x00BF},   // awbb_GridCoeff_B_1
+	{0x0F12, 0x00D2},   // awbb_GridCoeff_R_2
+	{0x0F12, 0x0093},   // awbb_GridCoeff_B_2
+
+	//Indoor Grid Offset
+	{0x002A, 0x13A4},
+	{0x0F12, 0x0010},  //0000
+	{0x0F12, 0x0010},		//FFD8
+	{0x0F12, 0xFFE0},		//FFD8
+	{0x0F12, 0xFFE0},  //FFD8
+	{0x0F12, 0xFFE0},  //FFD8
+	{0x0F12, 0xFFE0},  //FFF6 B
+
+	{0x0F12, 0x0010},  //0000
+	{0x0F12, 0x0010},		//FFD8
+	{0x0F12, 0xFFE0},		//FFD8
+	{0x0F12, 0xFFE0},  //FFD8
+	{0x0F12, 0xFFE0},  //FFD8
+	{0x0F12, 0xFFE0},  //FFF6
+
+	{0x0F12, 0x0010},  //0000
+	{0x0F12, 0x0010},		//FFD8
+	{0x0F12, 0xFFE0},		//FFD8
+	{0x0F12, 0xFFE0},  //FFD8
+	{0x0F12, 0xFFE0},  //FFD8
+	{0x0F12, 0xFFE0},  //FFF6
+
+	{0x0F12, 0xFFE0},  //FFEC
+	{0x0F12, 0xFFE0},  //000A
+	{0x0F12, 0xFFE0},  //000A
+	{0x0F12, 0xFF80},		//FFC4
+	{0x0F12, 0xFF00},		//FFC4
+	{0x0F12, 0xFE80},  //FF56 7
+
+	{0x0F12, 0xFFE0},  //FFEC
+	{0x0F12, 0xFFE0},  //000A
+	{0x0F12, 0xFFE0},  //000A
+	{0x0F12, 0xFF80},		//FFC4
+	{0x0F12, 0xFF00},		//FFC4
+	{0x0F12, 0xFE80},  //FF56
+
+	{0x0F12, 0xFFE0},  //FFEC
+	{0x0F12, 0xFFE0},  //000A
+	{0x0F12, 0xFFE0},  //000A
+	{0x0F12, 0xFF80},		//FFC4
+	{0x0F12, 0xFF00},		//FFC4
+	{0x0F12, 0xFE80},  //FF56
+
+		//Outdoor Grid Offset
+	{0x0F12, 0xFFB0},
+	{0x0F12, 0xFFB0},
+	{0x0F12, 0xFFB0},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+
+	{0x0F12, 0xFFB0},
+	{0x0F12, 0xFFB0},
+	{0x0F12, 0xFFB0},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+
+	{0x0F12, 0xFFB0},
+	{0x0F12, 0xFFB0},
+	{0x0F12, 0xFFB0},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+
+	{0x0F12, 0x0030},
+	{0x0F12, 0x0030},
+	{0x0F12, 0x0030},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+
+	{0x0F12, 0x0030},
+	{0x0F12, 0x0030},
+	{0x0F12, 0x0030},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+
+	{0x0F12, 0x0030},
+	{0x0F12, 0x0030},
+	{0x0F12, 0x0030},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+
+
+	{0x002A, 0x1208},
+	{0x0F12, 0x0020},
+
+	{0x002A, 0x144E},
+	{0x0F12, 0x0000},		//awbb_RGainOff
+	{0x0F12, 0xFFE0},   //awbb_BGainOff
+	{0x0F12, 0x0000},   //awbb_GGainOff
+
+
+	//==================================================================================
+	// 10.Clock Setting
+	//==================================================================================
+
+	{0x002A, 0x01F8},
+	{0x0F12, 0x5DC0},	//REG_TC_IPRM_InClockLSBs //MCLK : 24Mhz
+	{0x002A, 0x0212},
+	{0x0F12, 0x0000},	//REG_TC_IPRM_UseNPviClocks
+	{0x0F12, 0x0002},	//REG_TC_IPRM_UseNMipiClocks
+	{0x0F12, 0x0002},	//REG_TC_IPRM_NumberOfMipiLanes
+	{0x002A, 0x021A},
+	{0x0F12, 0x3A98},	//REG_TC_IPRM_OpClk4KHz_0 //SCLK : 60Mhz
+	{0x0F12, 0x278D},	//4F1A	//REG_TC_IPRM_MinOutRate4KHz_0 //PCLK Min : 81Mhz
+	{0x0F12, 0x278D},	//4F1A	//REG_TC_IPRM_MaxOutRate4KHz_0 //PCLK Max : 81Mhz
+	{0x0F12, 0x4F1A},	//REG_TC_IPRM_OpClk4KHz_1 //SCLK : 81Mhz
+	{0x0F12, 0x278D},	//4F1A	//REG_TC_IPRM_MinOutRate4KHz_1 //PCLK Min : 81Mhz
+	{0x0F12, 0x278D},	//4F1A	//REG_TC_IPRM_MaxOutRate4KHz_1 //PCLK Max : 81Mhz
+
+
+	//==================================================================================
+	// 11.Auto Flicker Detection
+	//==================================================================================
+
+	{0x002A, 0x0F30},
+	{0x0F12, 0x0001},	//AFC_D_ConvAccelerPower
+
+	//Auto Flicker (60Mhz start)
+	{0x002A, 0x0F2A},
+	{0x0F12, 0x0000},	//AFC_Default BIT[0] 1:60Hz 0:50Hz
+	{0x002A, 0x04E6},
+	{0x0F12, 0x077F},	//REG_TC_DBG 7F: 60Hz  5F:50Hz
+
+	//==================================================================================
+	// ??.????? Setting
+	//==================================================================================
+	{0x002A, 0x0F20},
+	{0x0F12, 0x0002},
+	{0x002A, 0x0F08},
+	{0x0F12, 0x0260},
+	{0x002A, 0x0F2E},
+	{0x0F12, 0x0004},
+	{0x002A, 0x0F0A},
+	{0x0F12, 0x0110},
+	{0x002A, 0x0F12},
+	{0x0F12, 0x0030},
+	{0x002A, 0x0F1C},
+	{0x0F12, 0x0700},
+	{0x002A, 0x0F14},
+	{0x0F12, 0x0010},
+
+
+	//==================================================================================
+	// 12.AE Setting
+	//==================================================================================
+	//AE Target
+	{0x002A, 0x1484},
+	{0x0F12, 0x003C},	//TVAR_ae_BrAve
+
+	//ae_StatMode bit[3] BLC has to be bypassed to prevent AE weight change especially backlight scene
+	{0x002A, 0x148A},
+	{0x0F12, 0x000F},	 //ae_StatMode
+
+	//AE_state
+	{0x002A, 0x058C},
+	{0x0F12, 0x3520},
+	{0x0F12, 0x0000},		//lt_uMaxExp1
+	{0x0F12, 0xC350},
+	{0x0F12, 0x0000},		//lt_uMaxExp2
+	{0x0F12, 0x3520},
+	{0x0F12, 0x0000},		//lt_uCapMaxExp1
+	{0x0F12, 0xC350},
+	{0x0F12, 0x0000},		//lt_uCapMaxExp2
+	{0x002A, 0x059C},
+	{0x0F12, 0x0470},		//lt_uMaxAnGain1
+	{0x0F12, 0x0C00},		//lt_uMaxAnGain2
+	{0x0F12, 0x0100},		//lt_uMaxDigGain
+	{0x0F12, 0x1000},		//lt_uMaxTotGain
+
+	{0x002A, 0x0544},
+	{0x0F12, 0x0111},	//lt_uLimitHigh
+	{0x0F12, 0x00EF},		//lt_uLimitLow
+
+	//AE Concept
+	{0x002A, 0x0608},
+	{0x0F12, 0x0001},	//lt_ExpGain_uSubsamplingmode
+	{0x0F12, 0x0001},		//lt_ExpGain_uNonSubsampling
+	{0x0F12, 0x0800},   //lt_ExpGain_ExpCurveGainMaxStr
+	{0x0F12, 0x0100},   //0100   lt_ExpGain_ExpCurveGainMaxStr_0__uMaxDigGain
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0A3C},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0D05},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x4008},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x7000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x9E00},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xAD00},
+	{0x0F12, 0x0001},
+	{0x0F12, 0xF1D4},
+	{0x0F12, 0x0002},
+	{0x0F12, 0xDC00},
+	{0x0F12, 0x0005},
+	{0x0F12, 0xDC00},
+	{0x0F12, 0x0005},
+
+	//Exposure
+	{0x002A, 0x0638},		//0638
+	{0x0F12, 0x0001},		//0001
+	{0x0F12, 0x0000},		//0000 lt_ExpGain_ExpCurveGainMaxStr_0__ulExpOut_0_
+	{0x0F12, 0x0A3C},		//0A3C
+	{0x0F12, 0x0000},		//0000
+	{0x0F12, 0x0D05},		//0D05
+	{0x0F12, 0x0000},		//0000
+	{0x0F12, 0x3408},		//3408
+	{0x0F12, 0x0000},		//0000
+	{0x0F12, 0x3408},		//3408
+	{0x0F12, 0x0000},		//0000
+	{0x0F12, 0x6810},		//6810
+	{0x0F12, 0x0000},		//0000
+	{0x0F12, 0x8214},		//8214
+	{0x0F12, 0x0000},		//0000
+	{0x0F12, 0xC350},		//C350
+	{0x0F12, 0x0000},		//0000
+	{0x0F12, 0xC350},		//C350
+	{0x0F12, 0x0000},		//0000
+	{0x0F12, 0xC350},		//C350
+	{0x0F12, 0x0000},		//0000
+
+	//???
+	{0x002A, 0x0660},
+	{0x0F12, 0x0650},
+	{0x0F12, 0x0100},
+
+	// Lei Control
+	{0x002A, 0x06B8},
+	{0x0F12, 0x452C},
+	{0x0F12, 0x0005},	 //lt_uMaxLei
+
+	//?????
+	{0x002A, 0x05D0},
+	{0x0F12, 0x0000},
+
+	//==================================================================================
+	// 13.AE Weight (Normal)
+	//==================================================================================
+	{0x002A, 0x1492},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0202},
+	{0x0F12, 0x0202},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0201},
+	{0x0F12, 0x0202},
+	{0x0F12, 0x0202},
+	{0x0F12, 0x0102},
+	{0x0F12, 0x0201},
+	{0x0F12, 0x0302},
+	{0x0F12, 0x0203},
+	{0x0F12, 0x0102},
+	{0x0F12, 0x0201},
+	{0x0F12, 0x0302},
+	{0x0F12, 0x0203},
+	{0x0F12, 0x0102},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0202},
+	{0x0F12, 0x0202},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0201},
+	{0x0F12, 0x0102},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0001},
+
+	//==================================================================================
+	// 14.Flash Setting
+	//==================================================================================
+
+	{0x0028, 0x7000},
+	{0x002A, 0x0484},
+	{0x0F12, 0x0002},		// capture flash on
+
+	{0x002A, 0x183A},
+	{0x0F12, 0x0001},		// one frame AE
+
+	{0x002A, 0x17F6},
+	{0x0F12, 0x023C},		//210 258  AWB R point
+	{0x0F12, 0x0230},		//288 228 ->258 -> 208  AWB B point
+
+	{0x002A, 0x1840},
+	{0x0F12, 0x0001},		// Fls AE tune start
+
+	{0x0F12, 0x0100},		// fls_afl_FlsAFIn  Rin
+	{0x0F12, 0x0120},
+	{0x0F12, 0x0180},
+	{0x0F12, 0x0200},
+	{0x0F12, 0x0400},
+	{0x0F12, 0x0800},
+	{0x0F12, 0x0A00},
+	{0x0F12, 0x1000},
+
+	{0x0F12, 0x0100},		// fls_afl_FlsAFOut  Rout
+	{0x0F12, 0x00A0},
+	{0x0F12, 0x0090},
+	{0x0F12, 0x0080},
+	{0x0F12, 0x0070},
+	{0x0F12, 0x0045},
+	{0x0F12, 0x0030},
+	{0x0F12, 0x0010},
+
+	{0x002A, 0x1884},
+	{0x0F12, 0x0100},		// fls_afl_FlsNBOut  flash NB default
+	{0x0F12, 0x0100},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x0100},
+
+	{0x002A, 0x1826},
+
+	{0x0F12, 0x0100},		// fls_afl_FlashWP_Weight  flash NB default
+	{0x0F12, 0x00C0},
+	{0x0F12, 0x0080},
+	{0x0F12, 0x000A},
+	{0x0F12, 0x0000},
+
+	{0x0F12, 0x0030},		// fls_afl_FlashWP_Weight  flash NB default
+	{0x0F12, 0x0040},
+	{0x0F12, 0x0048},
+	{0x0F12, 0x0050},
+	{0x0F12, 0x0060},
+
+	{0x002A, 0x4784},
+	{0x0F12, 0x00A0},//TNP_Regs_FlsWeightRIn  weight tune start in
+	{0x0F12, 0x00C0},
+	{0x0F12, 0x00D0},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x0200},
+	{0x0F12, 0x0300},
+
+	{0x0F12, 0x0088},// TNP_Regs_FlsWeightROut  weight tune start out
+	{0x0F12, 0x00B0},
+	{0x0F12, 0x00C0},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x0200},
+	{0x0F12, 0x0300},
+
+	{0x002A, 0x479C},
+
+	{0x0F12, 0x0120},		//Fls  BRIn
+	{0x0F12, 0x0150},
+	{0x0F12, 0x0200},
+
+	{0x0F12, 0x003C},		// Fls  BROut
+	{0x0F12, 0x003B},
+	{0x0F12, 0x002B},		//brightness // 23 //26 //30
+
+	//==================================================================================
+	// 15.CCM Setting
+	//==================================================================================
+		//CCM
+	{0x002A, 0x08A6},
+	{0x0F12, 0x00C0},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x0125},
+	{0x0F12, 0x015F},
+	{0x0F12, 0x017C},
+	{0x0F12, 0x0194},
+
+	{0x0F12, 0x0001},	//wbt_bUseOutdoorCCM
+
+	{0x002A, 0x0898},
+	{0x0F12, 0x4800},
+	{0x0F12, 0x7000},	//TVAR_wbt_pBaseCcms
+	{0x002A, 0x08A0},
+	{0x0F12, 0x48D8},
+	{0x0F12, 0x7000},	//TVAR_wbt_pOutdoorCcm
+
+	{0x002A, 0x4800},   // Horizon
+	{0x0F12, 0x0208},
+	{0x0F12, 0xFFB5},
+	{0x0F12, 0xFFE8},
+	{0x0F12, 0xFF99},
+	{0x0F12, 0x00EB},
+	{0x0F12, 0xFFAD},
+	{0x0F12, 0x0022},
+	{0x0F12, 0xFFEA},
+	{0x0F12, 0x01C2},
+	{0x0F12, 0x00C6},
+	{0x0F12, 0x0095},
+	{0x0F12, 0xFEFD},
+	{0x0F12, 0x0206},
+	{0x0F12, 0xFF7F},
+	{0x0F12, 0x0191},
+	{0x0F12, 0xFF06},
+	{0x0F12, 0x01BA},
+	{0x0F12, 0x0108},
+
+	{0x0F12, 0x0208},   // inca A
+	{0x0F12, 0xFFB5},
+	{0x0F12, 0xFFE8},
+	{0x0F12, 0xFF82},
+	{0x0F12, 0x0115},
+	{0x0F12, 0xFF9A},
+	{0x0F12, 0xFFFB},
+	{0x0F12, 0xFFB4},
+	{0x0F12, 0x021E},
+	{0x0F12, 0x00C6},
+	{0x0F12, 0x0095},
+	{0x0F12, 0xFEFD},
+	{0x0F12, 0x0206},
+	{0x0F12, 0xFF7F},
+	{0x0F12, 0x0191},
+	{0x0F12, 0xFF06},
+	{0x0F12, 0x01BA},
+	{0x0F12, 0x0108},
+
+	{0x0F12, 0x0208},   // WW
+	{0x0F12, 0xFFB5},
+	{0x0F12, 0xFFE8},
+	{0x0F12, 0xFF99},
+	{0x0F12, 0x00EB},
+	{0x0F12, 0xFFAD},
+	{0x0F12, 0x0022},
+	{0x0F12, 0xFFEA},
+	{0x0F12, 0x01C2},
+	{0x0F12, 0x00C6},
+	{0x0F12, 0x0095},
+	{0x0F12, 0xFEFD},
+	{0x0F12, 0x0206},
+	{0x0F12, 0xFF7F},
+	{0x0F12, 0x0191},
+	{0x0F12, 0xFF06},
+	{0x0F12, 0x01BA},
+	{0x0F12, 0x0108},
+
+	// Stock values are on the right comments
+	// Using the other values in place
+	{0x0F12, 0x0204},	//CW
+	{0x0F12, 0xFFB2},
+	{0x0F12, 0xFFF5},
+	{0x0F12, 0xFEF1},
+	{0x0F12, 0x014E},
+	{0x0F12, 0xFF18},
+	{0x0F12, 0xFFE6},
+	{0x0F12, 0xFFDD},
+	{0x0F12, 0x01B2},
+	{0x0F12, 0x00F2},
+	{0x0F12, 0x00CA},
+	{0x0F12, 0xFF48},
+	{0x0F12, 0x0151},
+	{0x0F12, 0xFF50},
+	{0x0F12, 0x0147},
+	{0x0F12, 0xFF75},
+	{0x0F12, 0x0187},
+	{0x0F12, 0x01BF},
+
+	{0x0F12, 0x0204},
+	{0x0F12, 0xFFB2},
+	{0x0F12, 0xFFF5},
+	{0x0F12, 0xFEF1},
+	{0x0F12, 0x014E},
+	{0x0F12, 0xFF18},
+	{0x0F12, 0xFFD9},
+	{0x0F12, 0xFFBA},
+	{0x0F12, 0x01D4},
+	{0x0F12, 0x00F2},
+	{0x0F12, 0x00CA},
+	{0x0F12, 0xFF48},
+	{0x0F12, 0x0151},
+	{0x0F12, 0xFF50},
+	{0x0F12, 0x0147},
+	{0x0F12, 0xFF75},
+	{0x0F12, 0x0187},
+	{0x0F12, 0x01BF},
+
+	{0x0F12, 0x0204},
+	{0x0F12, 0xFFB2},
+	{0x0F12, 0xFFF5},
+	{0x0F12, 0xFEF1},
+	{0x0F12, 0x014E},
+	{0x0F12, 0xFF18},
+	{0x0F12, 0xFFD9},
+	{0x0F12, 0xFFBA},
+	{0x0F12, 0x01D4},
+	{0x0F12, 0x00F2},
+	{0x0F12, 0x00CA},
+	{0x0F12, 0xFF48},
+	{0x0F12, 0x0151},
+	{0x0F12, 0xFF50},
+	{0x0F12, 0x0147},
+	{0x0F12, 0xFF75},
+	{0x0F12, 0x0187},
+	{0x0F12, 0x01BF},
+
+	{0x0F12, 0x01E5},	//Y hue-5. TVAR_wbt_pOutdoorCcm[0]
+	{0x0F12, 0xFFA4},
+	{0x0F12, 0xFFDC},
+	{0x0F12, 0xFE69},
+	{0x0F12, 0x0130},
+	{0x0F12, 0xFF55},
+	{0x0F12, 0xFFD2},
+	{0x0F12, 0xFFDF},
+	{0x0F12, 0x0236},
+	{0x0F12, 0x00C7},
+	{0x0F12, 0x0118},
+	{0x0F12, 0xFF38},
+	{0x0F12, 0x01CE},
+	{0x0F12, 0xFF83},
+	{0x0F12, 0x0195},
+	{0x0F12, 0xFEF3},
+	{0x0F12, 0x0126},
+	{0x0F12, 0x0162},
+
+	//===================================================================
+	// 16.GAMMA
+	//===================================================================
+		//RGB Indoor Gamma
+	{0x002A, 0x0734},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0003},
+	{0x0F12, 0x000F},
+	{0x0F12, 0x0028},
+	{0x0F12, 0x0066},
+	{0x0F12, 0x00D9},
+	{0x0F12, 0x0138},
+	{0x0F12, 0x0163},
+	{0x0F12, 0x0189},
+	{0x0F12, 0x01C6},
+	{0x0F12, 0x01F8},
+	{0x0F12, 0x0222},
+	{0x0F12, 0x0247},
+	{0x0F12, 0x0282},
+	{0x0F12, 0x02B5},
+	{0x0F12, 0x030F},
+	{0x0F12, 0x035F},
+	{0x0F12, 0x03A2},
+	{0x0F12, 0x03D8},
+	{0x0F12, 0x03FF},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0003},
+	{0x0F12, 0x000F},
+	{0x0F12, 0x0028},
+	{0x0F12, 0x0066},
+	{0x0F12, 0x00D9},
+	{0x0F12, 0x0138},
+	{0x0F12, 0x0163},
+	{0x0F12, 0x0189},
+	{0x0F12, 0x01C6},
+	{0x0F12, 0x01F8},
+	{0x0F12, 0x0222},
+	{0x0F12, 0x0247},
+	{0x0F12, 0x0282},
+	{0x0F12, 0x02B5},
+	{0x0F12, 0x030F},
+	{0x0F12, 0x035F},
+	{0x0F12, 0x03A2},
+	{0x0F12, 0x03D8},
+	{0x0F12, 0x03FF},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0003},
+	{0x0F12, 0x000F},
+	{0x0F12, 0x0028},
+	{0x0F12, 0x0066},
+	{0x0F12, 0x00D9},
+	{0x0F12, 0x0138},
+	{0x0F12, 0x0163},
+	{0x0F12, 0x0189},
+	{0x0F12, 0x01C6},
+	{0x0F12, 0x01F8},
+	{0x0F12, 0x0222},
+	{0x0F12, 0x0247},
+	{0x0F12, 0x0282},
+	{0x0F12, 0x02B5},
+	{0x0F12, 0x030F},
+	{0x0F12, 0x035F},
+	{0x0F12, 0x03A2},
+	{0x0F12, 0x03D8},
+	{0x0F12, 0x03FF},
+
+		//RGB Outdoor Gamma
+	{0x0F12, 0x0007},
+	{0x0F12, 0x0012},
+	{0x0F12, 0x0020},
+	{0x0F12, 0x0038},
+	{0x0F12, 0x0071},
+	{0x0F12, 0x00DA},
+	{0x0F12, 0x0137},
+	{0x0F12, 0x0161},
+	{0x0F12, 0x0187},
+	{0x0F12, 0x01C3},
+	{0x0F12, 0x01FE},
+	{0x0F12, 0x021B},
+	{0x0F12, 0x0245},
+	{0x0F12, 0x028C},
+	{0x0F12, 0x02CB},
+	{0x0F12, 0x0325},
+	{0x0F12, 0x0365},
+	{0x0F12, 0x039A},
+	{0x0F12, 0x03C7},
+	{0x0F12, 0x03F4},
+
+	{0x0F12, 0x0005},
+	{0x0F12, 0x0010},
+	{0x0F12, 0x001E},
+	{0x0F12, 0x0036},
+	{0x0F12, 0x006F},
+	{0x0F12, 0x00D8},
+	{0x0F12, 0x0135},
+	{0x0F12, 0x015F},
+	{0x0F12, 0x0185},
+	{0x0F12, 0x01C1},
+	{0x0F12, 0x01F3},
+	{0x0F12, 0x0220},
+	{0x0F12, 0x024A},
+	{0x0F12, 0x0291},
+	{0x0F12, 0x02D0},
+	{0x0F12, 0x032A},
+	{0x0F12, 0x036A},
+	{0x0F12, 0x039F},
+	{0x0F12, 0x03CC},
+	{0x0F12, 0x03F9},
+
+	{0x0F12, 0x0003},
+	{0x0F12, 0x000E},
+	{0x0F12, 0x001C},
+	{0x0F12, 0x0034},
+	{0x0F12, 0x006D},
+	{0x0F12, 0x00D6},
+	{0x0F12, 0x0133},
+	{0x0F12, 0x015D},
+	{0x0F12, 0x0183},
+	{0x0F12, 0x01BF},
+	{0x0F12, 0x01F5},
+	{0x0F12, 0x0222},
+	{0x0F12, 0x024C},
+	{0x0F12, 0x0293},
+	{0x0F12, 0x02D2},
+	{0x0F12, 0x032C},
+	{0x0F12, 0x036C},
+	{0x0F12, 0x03A1},
+	{0x0F12, 0x03CE},
+	{0x0F12, 0x03FB},
+
+	//==================================================================================
+	// 17.AFIT
+	//==================================================================================
+	{0x002A, 0x0944},
+	{0x0F12, 0x0050},	//afit_uNoiseIndInDoor
+	{0x0F12, 0x00B0},		//afit_uNoiseIndInDoor
+	{0x0F12, 0x0196},		//afit_uNoiseIndInDoor
+	{0x0F12, 0x0245},		//afit_uNoiseIndInDoor
+	{0x0F12, 0x0300},		//afit_uNoiseIndInDoor
+
+	{0x002A, 0x0976},
+	{0x0F12, 0x0070},	//afit_usGamutTh
+	{0x0F12, 0x0005},		//afit_usNeargrayOffset
+	{0x0F12, 0x0000},	//afit_bUseSenBpr
+	{0x0F12, 0x01CC},	//afit_usBprThr_0_
+	{0x0F12, 0x01CC},	//afit_usBprThr_1_
+	{0x0F12, 0x01CC},	//afit_usBprThr_2_
+	{0x0F12, 0x01CC},	//afit_usBprThr_3_
+	{0x0F12, 0x01CC},	//afit_usBprThr_4_
+	{0x0F12, 0x0180},	//afit_NIContrastAFITValue
+	{0x0F12, 0x0196},	//afit_NIContrastTh
+
+	{0x002A, 0x0938},
+	{0x0F12, 0x0000},	// on/off AFIT by NB option
+	{0x0F12, 0x0014},		//SARR_uNormBrInDoor
+	{0x0F12, 0x00D2},		//SARR_uNormBrInDoor
+	{0x0F12, 0x0384},		//SARR_uNormBrInDoor
+	{0x0F12, 0x07D0},		//SARR_uNormBrInDoor
+	{0x0F12, 0x1388},		//SARR_uNormBrInDoor
+
+	{0x002A, 0x098C},
+
+	{0x0F12, 0xFFEC},		//7000098C//_BRIGHTNESS   AFIT 0
+	{0x0F12, 0x0000},		//7000098E//_CONTRAST
+	{0x0F12, 0x0000},		//70000990//_SATURATION
+	{0x0F12, 0x0000},		//70000992//_SHARP_BLUR
+	{0x0F12, 0x0000},		//70000994//_GLAMOUR
+	{0x0F12, 0x00C0},		//70000996//_bnr_edge_high
+	{0x0F12, 0x0064},		//70000998//_postdmsc_iLowBright
+	{0x0F12, 0x0384},		//7000099A//_postdmsc_iHighBright
+	{0x0F12, 0x005F},		//7000099C//_postdmsc_iLowSat
+	{0x0F12, 0x01F4},		//7000099E//_postdmsc_iHighSat
+	{0x0F12, 0x0070},		//700009A0//_postdmsc_iTune
+	{0x0F12, 0x0040},		//700009A2//_yuvemix_mNegRanges_0
+	{0x0F12, 0x00A0},		//700009A4//_yuvemix_mNegRanges_1
+	{0x0F12, 0x0100},		//700009A6//_yuvemix_mNegRanges_2
+	{0x0F12, 0x0010},		//700009A8//_yuvemix_mPosRanges_0
+	{0x0F12, 0x0040},		//700009AA//_yuvemix_mPosRanges_1
+	{0x0F12, 0x00A0},		//700009AC//_yuvemix_mPosRanges_2
+	{0x0F12, 0x1430},		//700009AE//_bnr_edge_low
+	{0x0F12, 0x0201},		//700009B0//_bnr_repl_force
+	{0x0F12, 0x0204},		//700009B2//_bnr_iHotThreshLow
+	{0x0F12, 0x3604},		//700009B4//_bnr_iColdThreshLow
+	{0x0F12, 0x032A},		//700009B6//_bnr_DispTH_High
+	{0x0F12, 0x0103},		//700009B8//_bnr_DISP_Limit_High
+	{0x0F12, 0x1205},		//700009BA//_bnr_iDistSigmaMax
+	{0x0F12, 0x400D},		//700009BC//_bnr_iDiffSigmaHigh
+	{0x0F12, 0x0080},		//700009BE//_bnr_iNormalizedSTD_Limit
+	{0x0F12, 0x2080},		//700009C0//_bnr_iDirMinThres
+	{0x0F12, 0x3840},		//700009C2//_bnr_iDirFltDiffThresLow
+	{0x0F12, 0x0638},		//700009C4//_bnr_iDirSmoothPowerLow
+	{0x0F12, 0x0306},		//700009C6//_bnr_iHighMaxSlopeAllowed
+	{0x0F12, 0x2003},		//700009C8//_bnr_iHighSlopeThresh
+	{0x0F12, 0xFF01},		//700009CA//_bnr_iSlopeBlurStrength
+	{0x0F12, 0x0000},		//700009CC//_bnr_AddNoisePower1
+	{0x0F12, 0x0400},		//700009CE//_bnr_iRadialTune
+	{0x0F12, 0x245A},		//700009D0//_bnr_iRadialLimit
+	{0x0F12, 0x102A},		//700009D2//_ee_iFSMagThHigh
+	{0x0F12, 0x000B},		//700009D4//_ee_iFSVarThHigh
+	{0x0F12, 0x0600},		//700009D6//_ee_iFSThHigh
+	{0x0F12, 0x5A0F},		//700009D8//_ee_iFSVarCountTh
+	{0x0F12, 0x0505},		//700009DA//_ee_iRadialPower
+	{0x0F12, 0x1802},		//700009DC//_ee_iROADThres
+	{0x0F12, 0x0000},		//700009DE//_ee_iROADSubMaxNR
+	{0x0F12, 0x2006},		//700009E0//_ee_iROADNeiThres
+	{0x0F12, 0x3028},		//700009E2//_ee_iSmoothEdgeThres
+	{0x0F12, 0x0418},		//700009E4//_ee_iWSharpen
+	{0x0F12, 0x0101},		//700009E6//_ee_iWShThresh
+	{0x0F12, 0x0800},		//700009E8//_ee_iEmbossCentAdd
+	{0x0F12, 0x1804},		//700009EA//_ee_iReduceEdgeThresh
+	{0x0F12, 0x4008},		//700009EC//_dmsc_iDesatThresh
+	{0x0F12, 0x0540},		//700009EE//_dmsc_iDemBlurLow
+	{0x0F12, 0x8006},		//700009F0//_dmsc_iDecisionThresh
+	{0x0F12, 0x0020},		//700009F2//_dmsc_iMonochrom
+	{0x0F12, 0x0000},		//700009F4//_dmsc_iGRDenoiseVal
+	{0x0F12, 0x1800},		//700009F6//_dmsc_iEdgeDesatThrLow
+	{0x0F12, 0x0000},		//700009F8//_dmsc_iNearGrayDesat
+	{0x0F12, 0x1E10},		//700009FA//_postdmsc_iBCoeff
+	{0x0F12, 0x000B},		//700009FC//_postdmsc_iWideMult
+	{0x0F12, 0x0607},		//700009FE//_yuvemix_mNegSlopes_1
+	{0x0F12, 0x0005},		//70000A00//_yuvemix_mNegSlopes_3
+	{0x0F12, 0x0607},		//70000A02//_yuvemix_mPosSlopes_1
+	{0x0F12, 0x0405},		//70000A04//_yuvemix_mPosSlopes_3
+	{0x0F12, 0x0205},		//70000A06//_yuviirnr_iXSupportUV
+	{0x0F12, 0x0304},		//70000A08//_yuviirnr_iHighYNorm
+	{0x0F12, 0x0409},		//70000A0A//_yuviirnr_iHighUVNorm
+	{0x0F12, 0x0306},		//70000A0C//_yuviirnr_iUVNormShift
+	{0x0F12, 0x0407},		//70000A0E//_yuviirnr_iVertLength_UV
+	{0x0F12, 0x1C04},		//70000A10//_yuviirnr_iDiffThreshH_Y
+	{0x0F12, 0x0214},		//70000A12//_yuviirnr_iDiffThreshH_UV
+	{0x0F12, 0x1002},		//70000A14//_yuviirnr_iMaxThreshH_Y
+	{0x0F12, 0x0610},		//70000A16//_yuviirnr_iMaxThreshH_UV
+	{0x0F12, 0x1A02},		//70000A18//_yuviirnr_iYNRStrengthH
+	{0x0F12, 0x4A18},		//70000A1A//_yuviirnr_iUVNRStrengthH
+	{0x0F12, 0x0080},		//70000A1C//_RGBGamma2_iLinearity
+	{0x0F12, 0x0350},		//70000A1E//_ccm_oscar_iSaturation
+	{0x0F12, 0x0180},		//70000A20//_RGB2YUV_iRGBGain
+	{0x0F12, 0x0A0A},		//70000A22//_bnr_iClustMulT_H
+	{0x0F12, 0x0101},		//70000A24//_bnr_iClustThresh_H
+	{0x0F12, 0x2A36},		//70000A26//_bnr_iDenThreshLow
+	{0x0F12, 0x6024},		//70000A28//_ee_iLowSharpPower
+	{0x0F12, 0x2A36},		//70000A2A//_ee_iLowShDenoise
+	{0x0F12, 0xFFFF},		//70000A2C//_ee_iLowSharpClamp
+	{0x0F12, 0x0808},		//70000A2E//_ee_iReduceEdgeMinMult
+	{0x0F12, 0x0A01},		//70000A30//_bnr_nClustLevel_H_Bin
+	{0x0F12, 0x010A},		//70000A32//_bnr_iClustMulT_C_Bin
+	{0x0F12, 0x3601},		//70000A34//_bnr_iClustThresh_C_Bin
+	{0x0F12, 0x242A},		//70000A36//_bnr_iDenThreshHigh_Bin
+	{0x0F12, 0x3660},		//70000A38//_ee_iHighSharpPower_Bin
+	{0x0F12, 0xFF2A},		//70000A3A//_ee_iHighShDenoise_Bin
+	{0x0F12, 0x08FF},		//70000A3C//_ee_iHighSharpClamp_Bin
+	{0x0F12, 0x0008},		//70000A3E//_ee_iReduceEdgeSlope_Bin
+	{0x0F12, 0x0001},		//70000A40//_bnr_nClustLevel_C
+
+	{0x0F12, 0x0000},		//70000A42//_BRIGHTNESS   AFIT 1
+	{0x0F12, 0x0000},		//70000A44//_CONTRAST
+	{0x0F12, 0xFFFB},		//70000A46//_SATURATION
+	{0x0F12, 0x0000},		//70000A48//_SHARP_BLUR
+	{0x0F12, 0x0000},		//70000A4A//_GLAMOUR
+	{0x0F12, 0x00C0},		//70000A4C//_bnr_edge_high
+	{0x0F12, 0x0064},		//70000A4E//_postdmsc_iLowBright
+	{0x0F12, 0x0384},		//70000A50//_postdmsc_iHighBright
+	{0x0F12, 0x0051},		//70000A52//_postdmsc_iLowSat
+	{0x0F12, 0x01F4},		//70000A54//_postdmsc_iHighSat
+	{0x0F12, 0x0070},		//70000A56//_postdmsc_iTune
+	{0x0F12, 0x0040},		//70000A58//_yuvemix_mNegRanges_0
+	{0x0F12, 0x00A0},		//70000A5A//_yuvemix_mNegRanges_1
+	{0x0F12, 0x0100},		//70000A5C//_yuvemix_mNegRanges_2
+	{0x0F12, 0x0010},		//70000A5E//_yuvemix_mPosRanges_0
+	{0x0F12, 0x0060},		//70000A60//_yuvemix_mPosRanges_1
+	{0x0F12, 0x0100},		//70000A62//_yuvemix_mPosRanges_2
+	{0x0F12, 0x1430},		//70000A64//_bnr_edge_low
+	{0x0F12, 0x0201},		//70000A66//_bnr_repl_force
+	{0x0F12, 0x0204},		//70000A68//_bnr_iHotThreshLow
+	{0x0F12, 0x2404},		//70000A6A//_bnr_iColdThreshLow
+	{0x0F12, 0x031B},		//70000A6C//_bnr_DispTH_High
+	{0x0F12, 0x0103},		//70000A6E//_bnr_DISP_Limit_High
+	{0x0F12, 0x1004},		//70000A70//_bnr_iDistSigmaMax
+	{0x0F12, 0x3A0C},		//70000A72//_bnr_iDiffSigmaHigh
+	{0x0F12, 0x0070},		//70000A74//_bnr_iNormalizedSTD_Limit
+	{0x0F12, 0x1C80},		//70000A76//_bnr_iDirMinThres
+	{0x0F12, 0x3030},		//70000A78//_bnr_iDirFltDiffThresLow
+	{0x0F12, 0x0630},		//70000A7A//_bnr_iDirSmoothPowerLow
+	{0x0F12, 0x0306},		//70000A7C//_bnr_iHighMaxSlopeAllowed
+	{0x0F12, 0x2003},		//70000A7E//_bnr_iHighSlopeThresh
+	{0x0F12, 0xFF01},		//70000A80//_bnr_iSlopeBlurStrength
+	{0x0F12, 0x0404},		//70000A82//_bnr_AddNoisePower1
+	{0x0F12, 0x0300},		//70000A84//_bnr_iRadialTune
+	{0x0F12, 0x245A},		//70000A86//_bnr_iRadialLimit
+	{0x0F12, 0x1018},		//70000A88//_ee_iFSMagThHigh
+	{0x0F12, 0x000B},		//70000A8A//_ee_iFSVarThHigh
+	{0x0F12, 0x0B00},		//70000A8C//_ee_iFSThHigh
+	{0x0F12, 0x5A0F},		//70000A8E//_ee_iFSVarCountTh
+	{0x0F12, 0x0505},		//70000A90//_ee_iRadialPower
+	{0x0F12, 0x1802},		//70000A92//_ee_iROADThres
+	{0x0F12, 0x0000},		//70000A94//_ee_iROADSubMaxNR
+	{0x0F12, 0x2006},		//70000A96//_ee_iROADNeiThres
+	{0x0F12, 0x3428},		//70000A98//_ee_iSmoothEdgeThres
+	{0x0F12, 0x041C},		//70000A9A//_ee_iWSharpen
+	{0x0F12, 0x0101},		//70000A9C//_ee_iWShThresh
+	{0x0F12, 0x0800},		//70000A9E//_ee_iEmbossCentAdd
+	{0x0F12, 0x1004},		//70000AA0//_ee_iReduceEdgeThresh
+	{0x0F12, 0x4008},		//70000AA2//_dmsc_iDesatThresh
+	{0x0F12, 0x0540},		//70000AA4//_dmsc_iDemBlurLow
+	{0x0F12, 0x8006},		//70000AA6//_dmsc_iDecisionThresh
+	{0x0F12, 0x0020},		//70000AA8//_dmsc_iMonochrom
+	{0x0F12, 0x0000},		//70000AAA//_dmsc_iGRDenoiseVal
+	{0x0F12, 0x1800},		//70000AAC//_dmsc_iEdgeDesatThrLow
+	{0x0F12, 0x0000},		//70000AAE//_dmsc_iNearGrayDesat
+	{0x0F12, 0x1E10},		//70000AB0//_postdmsc_iBCoeff
+	{0x0F12, 0x000B},		//70000AB2//_postdmsc_iWideMult
+	{0x0F12, 0x0607},		//70000AB4//_yuvemix_mNegSlopes_1
+	{0x0F12, 0x0005},		//70000AB6//_yuvemix_mNegSlopes_3
+	{0x0F12, 0x0607},		//70000AB8//_yuvemix_mPosSlopes_1
+	{0x0F12, 0x0405},		//70000ABA//_yuvemix_mPosSlopes_3
+	{0x0F12, 0x0205},		//70000ABC//_yuviirnr_iXSupportUV
+	{0x0F12, 0x0304},		//70000ABE//_yuviirnr_iHighYNorm
+	{0x0F12, 0x0409},		//70000AC0//_yuviirnr_iHighUVNorm
+	{0x0F12, 0x0306},		//70000AC2//_yuviirnr_iUVNormShift
+	{0x0F12, 0x0407},		//70000AC4//_yuviirnr_iVertLength_UV
+	{0x0F12, 0x1F04},		//70000AC6//_yuviirnr_iDiffThreshH_Y
+	{0x0F12, 0x0218},		//70000AC8//_yuviirnr_iDiffThreshH_UV
+	{0x0F12, 0x1102},		//70000ACA//_yuviirnr_iMaxThreshH_Y
+	{0x0F12, 0x0611},		//70000ACC//_yuviirnr_iMaxThreshH_UV
+	{0x0F12, 0x1A02},		//70000ACE//_yuviirnr_iYNRStrengthH
+	{0x0F12, 0x8018},		//70000AD0//_yuviirnr_iUVNRStrengthH
+	{0x0F12, 0x0080},		//70000AD2//_RGBGamma2_iLinearity
+	{0x0F12, 0x0380},		//70000AD4//_ccm_oscar_iSaturation
+	{0x0F12, 0x0180},		//70000AD6//_RGB2YUV_iRGBGain
+	{0x0F12, 0x0A0A},		//70000AD8//_bnr_iClustMulT_H
+	{0x0F12, 0x0101},		//70000ADA//_bnr_iClustThresh_H
+	{0x0F12, 0x1B24},		//70000ADC//_bnr_iDenThreshLow
+	{0x0F12, 0x6024},		//70000ADE//_ee_iLowSharpPower
+	{0x0F12, 0x1D22},		//70000AE0//_ee_iLowShDenoise
+	{0x0F12, 0xFFFF},		//70000AE2//_ee_iLowSharpClamp
+	{0x0F12, 0x0808},		//70000AE4//_ee_iReduceEdgeMinMult
+	{0x0F12, 0x0A01},		//70000AE6//_bnr_nClustLevel_H_Bin
+	{0x0F12, 0x010A},		//70000AE8//_bnr_iClustMulT_C_Bin
+	{0x0F12, 0x2401},		//70000AEA//_bnr_iClustThresh_C_Bin
+	{0x0F12, 0x241B},		//70000AEC//_bnr_iDenThreshHigh_Bin
+	{0x0F12, 0x1E60},		//70000AEE//_ee_iHighSharpPower_Bin
+	{0x0F12, 0xFF18},		//70000AF0//_ee_iHighShDenoise_Bin
+	{0x0F12, 0x08FF},		//70000AF2//_ee_iHighSharpClamp_Bin
+	{0x0F12, 0x0008},		//70000AF4//_ee_iReduceEdgeSlope_Bin
+	{0x0F12, 0x0001},		//70000AF6//_bnr_nClustLevel_C
+
+	{0x0F12, 0x0000},		//70000AF8//_BRIGHTNESS   AFIT 2
+	{0x0F12, 0x0000},		//70000AFA//_CONTRAST
+	{0x0F12, 0xFFFB},		//70000AFC//_SATURATION
+	{0x0F12, 0x0000},		//70000AFE//_SHARP_BLUR
+	{0x0F12, 0x0000},		//70000B00//_GLAMOUR
+	{0x0F12, 0x00C0},		//70000B02//_bnr_edge_high
+	{0x0F12, 0x0064},		//70000B04//_postdmsc_iLowBright
+	{0x0F12, 0x0384},		//70000B06//_postdmsc_iHighBright
+	{0x0F12, 0x0043},		//70000B08//_postdmsc_iLowSat
+	{0x0F12, 0x01F4},		//70000B0A//_postdmsc_iHighSat
+	{0x0F12, 0x0070},		//70000B0C//_postdmsc_iTune
+	{0x0F12, 0x0040},		//70000B0E//_yuvemix_mNegRanges_0
+	{0x0F12, 0x00A0},		//70000B10//_yuvemix_mNegRanges_1
+	{0x0F12, 0x0100},		//70000B12//_yuvemix_mNegRanges_2
+	{0x0F12, 0x0010},		//70000B14//_yuvemix_mPosRanges_0
+	{0x0F12, 0x0060},		//70000B16//_yuvemix_mPosRanges_1
+	{0x0F12, 0x0100},		//70000B18//_yuvemix_mPosRanges_2
+	{0x0F12, 0x1430},		//70000B1A//_bnr_edge_low
+	{0x0F12, 0x0201},		//70000B1C//_bnr_repl_force
+	{0x0F12, 0x0204},		//70000B1E//_bnr_iHotThreshLow
+	{0x0F12, 0x1B04},		//70000B20//_bnr_iColdThreshLow
+	{0x0F12, 0x0312},		//70000B22//_bnr_DispTH_High
+	{0x0F12, 0x0003},		//70000B24//_bnr_DISP_Limit_High
+	{0x0F12, 0x0C03},		//70000B26//_bnr_iDistSigmaMax
+	{0x0F12, 0x2806},		//70000B28//_bnr_iDiffSigmaHigh
+	{0x0F12, 0x0060},		//70000B2A//_bnr_iNormalizedSTD_Limit
+	{0x0F12, 0x1580},		//70000B2C//_bnr_iDirMinThres
+	{0x0F12, 0x2020},		//70000B2E//_bnr_iDirFltDiffThresLow
+	{0x0F12, 0x0620},		//70000B30//_bnr_iDirSmoothPowerLow
+	{0x0F12, 0x0306},		//70000B32//_bnr_iHighMaxSlopeAllowed
+	{0x0F12, 0x2003},		//70000B34//_bnr_iHighSlopeThresh
+	{0x0F12, 0xFF01},		//70000B36//_bnr_iSlopeBlurStrength
+	{0x0F12, 0x0404},		//70000B38//_bnr_AddNoisePower1
+	{0x0F12, 0x0300},		//70000B3A//_bnr_iRadialTune
+	{0x0F12, 0x145A},		//70000B3C//_bnr_iRadialLimit
+	{0x0F12, 0x1010},		//70000B3E//_ee_iFSMagThHigh
+	{0x0F12, 0x000B},		//70000B40//_ee_iFSVarThHigh
+	{0x0F12, 0x0E00},		//70000B42//_ee_iFSThHigh
+	{0x0F12, 0x5A0F},		//70000B44//_ee_iFSVarCountTh
+	{0x0F12, 0x0504},		//70000B46//_ee_iRadialPower
+	{0x0F12, 0x1802},		//70000B48//_ee_iROADThres
+	{0x0F12, 0x0000},		//70000B4A//_ee_iROADSubMaxNR
+	{0x0F12, 0x2006},		//70000B4C//_ee_iROADNeiThres
+	{0x0F12, 0x3828},		//70000B4E//_ee_iSmoothEdgeThres
+	{0x0F12, 0x0428},		//70000B50//_ee_iWSharpen
+	{0x0F12, 0x0101},		//70000B52//_ee_iWShThresh
+	{0x0F12, 0x8000},		//70000B54//_ee_iEmbossCentAdd
+	{0x0F12, 0x0A04},		//70000B56//_ee_iReduceEdgeThresh
+	{0x0F12, 0x4008},		//70000B58//_dmsc_iDesatThresh
+	{0x0F12, 0x0540},		//70000B5A//_dmsc_iDemBlurLow
+	{0x0F12, 0x8006},		//70000B5C//_dmsc_iDecisionThresh
+	{0x0F12, 0x0020},		//70000B5E//_dmsc_iMonochrom
+	{0x0F12, 0x0000},		//70000B60//_dmsc_iGRDenoiseVal
+	{0x0F12, 0x1800},		//70000B62//_dmsc_iEdgeDesatThrLow
+	{0x0F12, 0x0000},		//70000B64//_dmsc_iNearGrayDesat
+	{0x0F12, 0x1E10},		//70000B66//_postdmsc_iBCoeff
+	{0x0F12, 0x000B},		//70000B68//_postdmsc_iWideMult
+	{0x0F12, 0x0607},		//70000B6A//_yuvemix_mNegSlopes_1
+	{0x0F12, 0x0005},		//70000B6C//_yuvemix_mNegSlopes_3
+	{0x0F12, 0x0607},		//70000B6E//_yuvemix_mPosSlopes_1
+	{0x0F12, 0x0405},		//70000B70//_yuvemix_mPosSlopes_3
+	{0x0F12, 0x0207},		//70000B72//_yuviirnr_iXSupportUV
+	{0x0F12, 0x0304},		//70000B74//_yuviirnr_iHighYNorm
+	{0x0F12, 0x0409},		//70000B76//_yuviirnr_iHighUVNorm
+	{0x0F12, 0x0306},		//70000B78//_yuviirnr_iUVNormShift
+	{0x0F12, 0x0407},		//70000B7A//_yuviirnr_iVertLength_UV
+	{0x0F12, 0x2404},		//70000B7C//_yuviirnr_iDiffThreshH_Y
+	{0x0F12, 0x0221},		//70000B7E//_yuviirnr_iDiffThreshH_UV
+	{0x0F12, 0x1202},		//70000B80//_yuviirnr_iMaxThreshH_Y
+	{0x0F12, 0x0613},		//70000B82//_yuviirnr_iMaxThreshH_UV
+	{0x0F12, 0x1A02},		//70000B84//_yuviirnr_iYNRStrengthH
+	{0x0F12, 0x8018},		//70000B86//_yuviirnr_iUVNRStrengthH
+	{0x0F12, 0x0080},		//70000B88//_RGBGamma2_iLinearity
+	{0x0F12, 0x0080},		//70000B8A//_ccm_oscar_iSaturation
+	{0x0F12, 0x0180},		//70000B8C//_RGB2YUV_iRGBGain
+	{0x0F12, 0x0A0A},		//70000B8E//_bnr_iClustMulT_H
+	{0x0F12, 0x0101},		//70000B90//_bnr_iClustThresh_H
+	{0x0F12, 0x141D},		//70000B92//_bnr_iDenThreshLow
+	{0x0F12, 0x6024},		//70000B94//_ee_iLowSharpPower
+	{0x0F12, 0x0C0C},		//70000B96//_ee_iLowShDenoise
+	{0x0F12, 0xFFFF},		//70000B98//_ee_iLowSharpClamp
+	{0x0F12, 0x0808},		//70000B9A//_ee_iReduceEdgeMinMult
+	{0x0F12, 0x0A01},		//70000B9C//_bnr_nClustLevel_H_Bin
+	{0x0F12, 0x010A},		//70000B9E//_bnr_iClustMulT_C_Bin
+	{0x0F12, 0x1B01},		//70000BA0//_bnr_iClustThresh_C_Bin
+	{0x0F12, 0x2412},		//70000BA2//_bnr_iDenThreshHigh_Bin
+	{0x0F12, 0x0C60},		//70000BA4//_ee_iHighSharpPower_Bin
+	{0x0F12, 0xFF0C},		//70000BA6//_ee_iHighShDenoise_Bin
+	{0x0F12, 0x08FF},		//70000BA8//_ee_iHighSharpClamp_Bin
+	{0x0F12, 0x0008},		//70000BAA//_ee_iReduceEdgeSlope_Bin
+	{0x0F12, 0x0001},		//70000BAC//_bnr_nClustLevel_C
+
+	{0x0F12, 0x0000},		//70000BAE//_BRIGHTNESS   AFIT 3
+	{0x0F12, 0x0000},		//70000BB0//_CONTRAST
+	{0x0F12, 0x0000},		//70000BB2//_SATURATION
+	{0x0F12, 0x0000},		//70000BB4//_SHARP_BLUR
+	{0x0F12, 0x0000},		//70000BB6//_GLAMOUR
+	{0x0F12, 0x00C0},		//70000BB8//_bnr_edge_high
+	{0x0F12, 0x0064},		//70000BBA//_postdmsc_iLowBright
+	{0x0F12, 0x0384},		//70000BBC//_postdmsc_iHighBright
+	{0x0F12, 0x0032},		//70000BBE//_postdmsc_iLowSat
+	{0x0F12, 0x01F4},		//70000BC0//_postdmsc_iHighSat
+	{0x0F12, 0x0070},		//70000BC2//_postdmsc_iTune
+	{0x0F12, 0x0040},		//70000BC4//_yuvemix_mNegRanges_0
+	{0x0F12, 0x00A0},		//70000BC6//_yuvemix_mNegRanges_1
+	{0x0F12, 0x0100},		//70000BC8//_yuvemix_mNegRanges_2
+	{0x0F12, 0x0010},		//70000BCA//_yuvemix_mPosRanges_0
+	{0x0F12, 0x0060},		//70000BCC//_yuvemix_mPosRanges_1
+	{0x0F12, 0x0100},		//70000BCE//_yuvemix_mPosRanges_2
+	{0x0F12, 0x1430},		//70000BD0//_bnr_edge_low
+	{0x0F12, 0x0201},		//70000BD2//_bnr_repl_force
+	{0x0F12, 0x0204},		//70000BD4//_bnr_iHotThreshLow
+	{0x0F12, 0x1504},		//70000BD6//_bnr_iColdThreshLow
+	{0x0F12, 0x030F},		//70000BD8//_bnr_DispTH_High
+	{0x0F12, 0x0003},		//70000BDA//_bnr_DISP_Limit_High
+	{0x0F12, 0x0902},		//70000BDC//_bnr_iDistSigmaMax
+	{0x0F12, 0x2004},		//70000BDE//_bnr_iDiffSigmaHigh
+	{0x0F12, 0x0050},		//70000BE0//_bnr_iNormalizedSTD_Limit
+	{0x0F12, 0x1140},		//70000BE2//_bnr_iDirMinThres
+	{0x0F12, 0x201C},		//70000BE4//_bnr_iDirFltDiffThresLow
+	{0x0F12, 0x0620},		//70000BE6//_bnr_iDirSmoothPowerLow
+	{0x0F12, 0x0306},		//70000BE8//_bnr_iHighMaxSlopeAllowed
+	{0x0F12, 0x2003},		//70000BEA//_bnr_iHighSlopeThresh
+	{0x0F12, 0xFF01},		//70000BEC//_bnr_iSlopeBlurStrength
+	{0x0F12, 0x0404},		//70000BEE//_bnr_AddNoisePower1
+	{0x0F12, 0x0300},		//70000BF0//_bnr_iRadialTune
+	{0x0F12, 0x145A},		//70000BF2//_bnr_iRadialLimit
+	{0x0F12, 0x1010},		//70000BF4//_ee_iFSMagThHigh
+	{0x0F12, 0x000B},		//70000BF6//_ee_iFSVarThHigh
+	{0x0F12, 0x1000},		//70000BF8//_ee_iFSThHigh
+	{0x0F12, 0x5A0F},		//70000BFA//_ee_iFSVarCountTh
+	{0x0F12, 0x0503},		//70000BFC//_ee_iRadialPower
+	{0x0F12, 0x1802},		//70000BFE//_ee_iROADThres
+	{0x0F12, 0x0000},		//70000C00//_ee_iROADSubMaxNR
+	{0x0F12, 0x2006},		//70000C02//_ee_iROADNeiThres
+	{0x0F12, 0x3C28},		//70000C04//_ee_iSmoothEdgeThres
+	{0x0F12, 0x042C},		//70000C06//_ee_iWSharpen
+	{0x0F12, 0x0101},		//70000C08//_ee_iWShThresh
+	{0x0F12, 0xFF00},		//70000C0A//_ee_iEmbossCentAdd
+	{0x0F12, 0x0904},		//70000C0C//_ee_iReduceEdgeThresh
+	{0x0F12, 0x4008},		//70000C0E//_dmsc_iDesatThresh
+	{0x0F12, 0x0540},		//70000C10//_dmsc_iDemBlurLow
+	{0x0F12, 0x8006},		//70000C12//_dmsc_iDecisionThresh
+	{0x0F12, 0x0020},		//70000C14//_dmsc_iMonochrom
+	{0x0F12, 0x0000},		//70000C16//_dmsc_iGRDenoiseVal
+	{0x0F12, 0x1800},		//70000C18//_dmsc_iEdgeDesatThrLow
+	{0x0F12, 0x0000},		//70000C1A//_dmsc_iNearGrayDesat
+	{0x0F12, 0x1E10},		//70000C1C//_postdmsc_iBCoeff
+	{0x0F12, 0x000B},		//70000C1E//_postdmsc_iWideMult
+	{0x0F12, 0x0607},		//70000C20//_yuvemix_mNegSlopes_1
+	{0x0F12, 0x0005},		//70000C22//_yuvemix_mNegSlopes_3
+	{0x0F12, 0x0607},		//70000C24//_yuvemix_mPosSlopes_1
+	{0x0F12, 0x0405},		//70000C26//_yuvemix_mPosSlopes_3
+	{0x0F12, 0x0206},		//70000C28//_yuviirnr_iXSupportUV
+	{0x0F12, 0x0304},		//70000C2A//_yuviirnr_iHighYNorm
+	{0x0F12, 0x0409},		//70000C2C//_yuviirnr_iHighUVNorm
+	{0x0F12, 0x0305},		//70000C2E//_yuviirnr_iUVNormShift
+	{0x0F12, 0x0406},		//70000C30//_yuviirnr_iVertLength_UV
+	{0x0F12, 0x2804},		//70000C32//_yuviirnr_iDiffThreshH_Y
+	{0x0F12, 0x0228},		//70000C34//_yuviirnr_iDiffThreshH_UV
+	{0x0F12, 0x1402},		//70000C36//_yuviirnr_iMaxThreshH_Y
+	{0x0F12, 0x0618},		//70000C38//_yuviirnr_iMaxThreshH_UV
+	{0x0F12, 0x1A02},		//70000C3A//_yuviirnr_iYNRStrengthH
+	{0x0F12, 0x8018},		//70000C3C//_yuviirnr_iUVNRStrengthH
+	{0x0F12, 0x0080},		//70000C3E//_RGBGamma2_iLinearity
+	{0x0F12, 0x0080},		//70000C40//_ccm_oscar_iSaturation
+	{0x0F12, 0x0180},		//70000C42//_RGB2YUV_iRGBGain
+	{0x0F12, 0x0A0A},		//70000C44//_bnr_iClustMulT_H
+	{0x0F12, 0x0101},		//70000C46//_bnr_iClustThresh_H
+	{0x0F12, 0x1117},		//70000C48//_bnr_iDenThreshLow
+	{0x0F12, 0x6024},		//70000C4A//_ee_iLowSharpPower
+	{0x0F12, 0x0A0A},		//70000C4C//_ee_iLowShDenoise
+	{0x0F12, 0xFFFF},		//70000C4E//_ee_iLowSharpClamp
+	{0x0F12, 0x0808},		//70000C50//_ee_iReduceEdgeMinMult
+	{0x0F12, 0x0A01},		//70000C52//_bnr_nClustLevel_H_Bin
+	{0x0F12, 0x010A},		//70000C54//_bnr_iClustMulT_C_Bin
+	{0x0F12, 0x1501},		//70000C56//_bnr_iClustThresh_C_Bin
+	{0x0F12, 0x240F},		//70000C58//_bnr_iDenThreshHigh_Bin
+	{0x0F12, 0x0A60},		//70000C5A//_ee_iHighSharpPower_Bin
+	{0x0F12, 0xFF0A},		//70000C5C//_ee_iHighShDenoise_Bin
+	{0x0F12, 0x08FF},		//70000C5E//_ee_iHighSharpClamp_Bin
+	{0x0F12, 0x0008},		//70000C60//_ee_iReduceEdgeSlope_Bin
+	{0x0F12, 0x0001},		//70000C62//_bnr_nClustLevel_C
+
+	{0x0F12, 0x0000},		//70000C64//_BRIGHTNESS   AFIT 4
+	{0x0F12, 0x0000},		//70000C66//_CONTRAST
+	{0x0F12, 0x0000},		//70000C68//_SATURATION
+	{0x0F12, 0x0000},		//70000C6A//_SHARP_BLUR
+	{0x0F12, 0x0000},		//70000C6C//_GLAMOUR
+	{0x0F12, 0x00C0},		//70000C6E//_bnr_edge_high
+	{0x0F12, 0x0064},		//70000C70//_postdmsc_iLowBright
+	{0x0F12, 0x0384},		//70000C72//_postdmsc_iHighBright
+	{0x0F12, 0x0032},		//70000C74//_postdmsc_iLowSat
+	{0x0F12, 0x01F4},		//70000C76//_postdmsc_iHighSat
+	{0x0F12, 0x0070},		//70000C78//_postdmsc_iTune
+	{0x0F12, 0x0040},		//70000C7A//_yuvemix_mNegRanges_0
+	{0x0F12, 0x00A0},		//70000C7C//_yuvemix_mNegRanges_1
+	{0x0F12, 0x0100},		//70000C7E//_yuvemix_mNegRanges_2
+	{0x0F12, 0x0010},		//70000C80//_yuvemix_mPosRanges_0
+	{0x0F12, 0x0060},		//70000C82//_yuvemix_mPosRanges_1
+	{0x0F12, 0x0100},		//70000C84//_yuvemix_mPosRanges_2
+	{0x0F12, 0x1430},		//70000C86//_bnr_edge_low
+	{0x0F12, 0x0201},		//70000C88//_bnr_repl_force
+	{0x0F12, 0x0204},		//70000C8A//_bnr_iHotThreshLow
+	{0x0F12, 0x0F04},		//70000C8C//_bnr_iColdThreshLow
+	{0x0F12, 0x030C},		//70000C8E//_bnr_DispTH_High
+	{0x0F12, 0x0003},		//70000C90//_bnr_DISP_Limit_High
+	{0x0F12, 0x0602},		//70000C92//_bnr_iDistSigmaMax
+	{0x0F12, 0x1803},		//70000C94//_bnr_iDiffSigmaHigh
+	{0x0F12, 0x0040},		//70000C96//_bnr_iNormalizedSTD_Limit
+	{0x0F12, 0x0E20},		//70000C98//_bnr_iDirMinThres
+	{0x0F12, 0x2018},		//70000C9A//_bnr_iDirFltDiffThresLow
+	{0x0F12, 0x0620},		//70000C9C//_bnr_iDirSmoothPowerLow
+	{0x0F12, 0x0306},		//70000C9E//_bnr_iHighMaxSlopeAllowed
+	{0x0F12, 0x2003},		//70000CA0//_bnr_iHighSlopeThresh
+	{0x0F12, 0xFF01},		//70000CA2//_bnr_iSlopeBlurStrength
+	{0x0F12, 0x0404},		//70000CA4//_bnr_AddNoisePower1
+	{0x0F12, 0x0200},		//70000CA6//_bnr_iRadialTune
+	{0x0F12, 0x145A},		//70000CA8//_bnr_iRadialLimit
+	{0x0F12, 0x1010},		//70000CAA//_ee_iFSMagThHigh
+	{0x0F12, 0x000B},		//70000CAC//_ee_iFSVarThHigh
+	{0x0F12, 0x1200},		//70000CAE//_ee_iFSThHigh
+	{0x0F12, 0x5A0F},		//70000CB0//_ee_iFSVarCountTh
+	{0x0F12, 0x0502},		//70000CB2//_ee_iRadialPower
+	{0x0F12, 0x1802},		//70000CB4//_ee_iROADThres
+	{0x0F12, 0x0000},		//70000CB6//_ee_iROADSubMaxNR
+	{0x0F12, 0x2006},		//70000CB8//_ee_iROADNeiThres
+	{0x0F12, 0x4028},		//70000CBA//_ee_iSmoothEdgeThres
+	{0x0F12, 0x0430},		//70000CBC//_ee_iWSharpen
+	{0x0F12, 0x0101},		//70000CBE//_ee_iWShThresh
+	{0x0F12, 0xFF00},		//70000CC0//_ee_iEmbossCentAdd
+	{0x0F12, 0x0804},		//70000CC2//_ee_iReduceEdgeThresh
+	{0x0F12, 0x4008},		//70000CC4//_dmsc_iDesatThresh
+	{0x0F12, 0x0540},		//70000CC6//_dmsc_iDemBlurLow
+	{0x0F12, 0x8006},		//70000CC8//_dmsc_iDecisionThresh
+	{0x0F12, 0x0020},		//70000CCA//_dmsc_iMonochrom
+	{0x0F12, 0x0000},		//70000CCC//_dmsc_iGRDenoiseVal
+	{0x0F12, 0x1800},		//70000CCE//_dmsc_iEdgeDesatThrLow
+	{0x0F12, 0x0000},		//70000CD0//_dmsc_iNearGrayDesat
+	{0x0F12, 0x1E10},		//70000CD2//_postdmsc_iBCoeff
+	{0x0F12, 0x000B},		//70000CD4//_postdmsc_iWideMult
+	{0x0F12, 0x0607},		//70000CD6//_yuvemix_mNegSlopes_1
+	{0x0F12, 0x0005},		//70000CD8//_yuvemix_mNegSlopes_3
+	{0x0F12, 0x0607},		//70000CDA//_yuvemix_mPosSlopes_1
+	{0x0F12, 0x0405},		//70000CDC//_yuvemix_mPosSlopes_3
+	{0x0F12, 0x0205},		//70000CDE//_yuviirnr_iXSupportUV
+	{0x0F12, 0x0304},		//70000CE0//_yuviirnr_iHighYNorm
+	{0x0F12, 0x0409},		//70000CE2//_yuviirnr_iHighUVNorm
+	{0x0F12, 0x0306},		//70000CE4//_yuviirnr_iUVNormShift
+	{0x0F12, 0x0407},		//70000CE6//_yuviirnr_iVertLength_UV
+	{0x0F12, 0x2C04},		//70000CE8//_yuviirnr_iDiffThreshH_Y
+	{0x0F12, 0x022C},		//70000CEA//_yuviirnr_iDiffThreshH_UV
+	{0x0F12, 0x1402},		//70000CEC//_yuviirnr_iMaxThreshH_Y
+	{0x0F12, 0x0618},		//70000CEE//_yuviirnr_iMaxThreshH_UV
+	{0x0F12, 0x1A02},		//70000CF0//_yuviirnr_iYNRStrengthH
+	{0x0F12, 0x8018},		//70000CF2//_yuviirnr_iUVNRStrengthH
+	{0x0F12, 0x0080},		//70000CF4//_RGBGamma2_iLinearity
+	{0x0F12, 0x0080},		//70000CF6//_ccm_oscar_iSaturation
+	{0x0F12, 0x0180},		//70000CF8//_RGB2YUV_iRGBGain
+	{0x0F12, 0x0A0A},		//70000CFA//_bnr_iClustMulT_H
+	{0x0F12, 0x0101},		//70000CFC//_bnr_iClustThresh_H
+	{0x0F12, 0x0C0F},		//70000CFE//_bnr_iDenThreshLow
+	{0x0F12, 0x6024},		//70000D00//_ee_iLowSharpPower
+	{0x0F12, 0x0808},		//70000D02//_ee_iLowShDenoise
+	{0x0F12, 0xFFFF},		//70000D04//_ee_iLowSharpClamp
+	{0x0F12, 0x0808},		//70000D06//_ee_iReduceEdgeMinMult
+	{0x0F12, 0x0A01},		//70000D08//_bnr_nClustLevel_H_Bin
+	{0x0F12, 0x010A},		//70000D0A//_bnr_iClustMulT_C_Bin
+	{0x0F12, 0x0F01},		//70000D0C//_bnr_iClustThresh_C_Bin
+	{0x0F12, 0x240C},		//70000D0E//_bnr_iDenThreshHigh_Bin
+	{0x0F12, 0x0860},		//70000D10//_ee_iHighSharpPower_Bin
+	{0x0F12, 0xFF08},		//70000D12//_ee_iHighShDenoise_Bin
+	{0x0F12, 0x08FF},		//70000D14//_ee_iHighSharpClamp_Bin
+	{0x0F12, 0x0008},		//70000D16//_ee_iReduceEdgeSlope_Bin
+	{0x0F12, 0x0001},		//70000D18//_bnr_nClustLevel_C
+
+	{0x0F12, 0x23CE},	//70000D1A	//[0]CAFITB_bnr_bypass
+	{0x0F12, 0xFDC8},	//70000D1C	//[0]CAFITB_bnr_bSlopenessTune
+	{0x0F12, 0x112E},	//70000D1E	//[0]CAFITB_ee_bReduceNegMedSh
+	{0x0F12, 0x93A5},	//70000D20	//[0]CAFITB_dmsc_bDoDesat
+	{0x0F12, 0xFE67},	//70000D22	//[0]CAFITB_postdmsc_bSat
+	{0x0F12, 0x0000},	//70000D24	//[0]CAFITB_yuviirnr_bWideY																				//
+
+
+	//===================================================================
+	// 18.JPEG Thumnail Setting
+	//===================================================================
+	// JPEG Quality
+	{0x002A, 0x0478},
+	{0x0F12, 0x005F},	//REG_TC_BRC_usPrevQuality
+	{0x0F12, 0x005F},	//REG_TC_BRC_usCaptureQuality
+
+	// JPEG Thumnail
+	{0x0F12, 0x0001},	//REG_TC_THUMB_Thumb_bActive
+	{0x0F12, 0x0280},	//REG_TC_THUMB_Thumb_uWidth //640
+	{0x0F12, 0x01E0},	//REG_TC_THUMB_Thumb_uHeight //480
+	{0x0F12, 0x0005},	//REG_TC_THUMB_Thumb_Format //YUV
+
+	// JPEG setting
+	{0x002A, 0x17DC},
+	{0x0F12, 0x0054},	//jpeg_ManualMBCV
+	{0x002A, 0x1AE4},
+	{0x0F12, 0x001C},	//senHal_bExtraAddLine
+	{0x002A, 0x0284},
+	{0x0F12, 0x0001},	//REG_TC_GP_bBypassScalerJpg
+	{0x002A, 0x028A},
+	{0x0F12, 0x0000},	//REG_TC_GP_bUse1FrameCaptureMode //0:continus capture frame, 1:single capture frame
+
+	{0x002A, 0x1CC2},		//DRx_uDRxWeight for AutoCont function
+	{0x0F12, 0x0100},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x0100},
+	{0x002A, 0x147C},//bp_uMaxBrightnessFactor
+	{0x0F12, 0x0170},
+	{0x002A, 0x1482},		//bp_uMinBrightnessFactor
+	{0x0F12, 0x01E0},
+
+	//===================================================================
+	// Input Width & Height
+	//===================================================================
+	{0x002A, 0x0250},
+	{0x0F12, 0x0A00},	//REG_TC_GP_PrevReqInputWidth //2560
+	{0x0F12, 0x0780},	//REG_TC_GP_PrevReqInputHeight //1920
+	{0x0F12, 0x0010},	//REG_TC_GP_PrevInputWidthOfs //(2592-2560)/2
+	{0x0F12, 0x000C},	//REG_TC_GP_PrevInputHeightOfs //(1944-1920)/2
+	{0x0F12, 0x0A00},	//REG_TC_GP_CapReqInputWidth //2560
+	{0x0F12, 0x0780},	//REG_TC_GP_CapReqInputHeight //1920
+	{0x0F12, 0x0010},	//REG_TC_GP_CapInputWidthOfs //(2592-2560)/2
+	{0x0F12, 0x000C},	//REG_TC_GP_CapInputHeightOfs //(1944-1920)/2
+
+	{0x002A, 0x0494},
+	{0x0F12, 0x0A00},	//REG_TC_PZOOM_PrevZoomReqInputWidth //2560
+	{0x0F12, 0x0780},	//REG_TC_PZOOM_PrevZoomReqInputHeight //1920
+	{0x0F12, 0x0000},	//REG_TC_PZOOM_PrevZoomReqInputWidthOfs
+	{0x0F12, 0x0000},	//REG_TC_PZOOM_PrevZoomReqInputHeightOfs
+	{0x0F12, 0x0A00},	//REG_TC_PZOOM_CapZoomReqInputWidth //2560
+	{0x0F12, 0x0780},	//REG_TC_PZOOM_CapZoomReqInputHeight //1920
+	{0x0F12, 0x0000},	//REG_TC_PZOOM_CapZoomReqInputWidthOfs
+	{0x0F12, 0x0000},	//REG_TC_PZOOM_CapZoomReqInputHeightOfs
+
+	{0x002A, 0x0262},
+	{0x0F12, 0x0001},   //REG_TC_GP_bUseReqInputInPre
+	{0x0F12, 0x0001},	//REG_TC_GP_bUseReqInputInCap
+
+
+	//===================================================================
+	// Preview
+	//===================================================================
+	{0x002A, 0x02A6},
+	{0x0F12, 0x0280},	//REG_0TC_PCFG_usWidth //640
+	{0x0F12, 0x01E0},	//REG_0TC_PCFG_usHeight //480
+	{0x0F12, 0x0005},	//REG_0TC_PCFG_Format //5:YUV, 7:RAW, 9:JPEG
+	{0x0F12, 0x278D},	//4F1A	//REG_0TC_PCFG_usMaxOut4KHzRate
+	{0x0F12, 0x278D},	//4F1A	//REG_0TC_PCFG_usMinOut4KHzRate
+	{0x0F12, 0x0100},	//REG_0TC_PCFG_OutClkPerPix88
+	{0x0F12, 0x0300},	//REG_0TC_PCFG_uBpp88
+	{0x0F12, 0x0012},	//REG_0TC_PCFG_PVIMask //[1]:PCLK Inversion
+	{0x0F12, 0x0000},	//REG_0TC_PCFG_OIFMask
+	{0x0F12, 0x01E0},	//REG_0TC_PCFG_usJpegPacketSize
+	{0x0F12, 0x0000},	//REG_0TC_PCFG_usJpegTotalPackets
+	{0x0F12, 0x0000},	//REG_0TC_PCFG_uClockInd
+	{0x0F12, 0x0000},	//REG_0TC_PCFG_usFrTimeType
+	{0x0F12, 0x0001},	//REG_0TC_PCFG_FrRateQualityType
+	{0x0F12, 0x03E8},	//REG_0TC_PCFG_usMaxFrTimeMsecMult10 //03E8h:10fps
+	{0x0F12, 0x014A},	//REG_0TC_PCFG_usMinFrTimeMsecMult10 //014Ah:30fps
+	{0x002A, 0x02D0},
+	{0x0F12, 0x0000},	//REG_0TC_PCFG_uPrevMirror
+	{0x0F12, 0x0000},	//REG_0TC_PCFG_uCaptureMirror
+
+	//===================================================================
+	// Capture
+	//===================================================================
+	{0x002A, 0x0396},
+	{0x0F12, 0x0000},	//REG_0TC_CCFG_uCaptureMode
+	{0x0F12, 0x0A00},	//REG_0TC_CCFG_usWidth //2560
+	{0x0F12, 0x0780},	//REG_0TC_CCFG_usHeight //1920
+	{0x0F12, 0x0005},	//REG_0TC_CCFG_Format //5:YUV, 7:RAW, 9:JPEG
+	{0x0F12, 0x278D},	//4F1A	//REG_0TC_CCFG_usMaxOut4KHzRate
+	{0x0F12, 0x278D},	//4F1A	//REG_0TC_CCFG_usMinOut4KHzRate
+	{0x0F12, 0x0100},	//REG_0TC_CCFG_OutClkPerPix88
+	{0x0F12, 0x0300},	//REG_0TC_CCFG_uBpp88
+	{0x0F12, 0x0012},	//REG_0TC_CCFG_PVIMask //[1]:PCLK Inversion
+	{0x0F12, 0x0070},	//REG_0TC_CCFG_OIFMask
+	{0x0F12, 0x0810},	//REG_0TC_CCFG_usJpegPacketSize //2064d
+	{0x0F12, 0x0900},	//REG_0TC_CCFG_usJpegTotalPackets //2304d //Must be multiples of 16
+	{0x0F12, 0x0001},	//REG_0TC_CCFG_uClockInd
+	{0x0F12, 0x0000},	//REG_0TC_CCFG_usFrTimeType
+	{0x0F12, 0x0002},	//REG_0TC_CCFG_FrRateQualityType
+	{0x0F12, 0x0535},	//REG_0TC_CCFG_usMaxFrTimeMsecMult10 //0535h:7.5fps
+	{0x0F12, 0x029A},	//REG_0TC_CCFG_usMinFrTimeMsecMult10 //029Ah:15fps
+
+	{0x002A, 0x022C},
+	{0x0F12, 0x0001},	//REG_TC_IPRM_InitParamsUpdated
+
+	//===========================================================
+	// 21.Select Cofigration Display
+	//===========================================================
+	//PREVIEW
+	{0x0028, 0x7000},
+	{0x002A, 0x0266},
+	{0x0F12, 0x0000}, //REG_TC_GP_ActivePrevConfig
+	{0x002A, 0x026A},
+	{0x0F12, 0x0001},	//REG_TC_GP_PrevOpenAfterChange
+	{0x002A, 0x0268},
+	{0x0F12, 0x0001},	//REG_TC_GP_PrevConfigChanged
+	{0x002A, 0x026E},
+	{0x0F12, 0x0000},       //REG_TC_GP_ActiveCapConfig
+	{0x002A, 0x026A},
+	{0x0F12, 0x0001},	//REG_TC_GP_CapOpenAfterChange
+	{0x002A, 0x0270},
+	{0x0F12, 0x0001},	//REG_TC_GP_CapConfigChanged
+
+	{0x002A, 0x024E},
+	{0x0F12, 0x0001},	//REG_TC_GP_NewConfigSync
+	{0x002A, 0x023E},
+	{0x0F12, 0x0001},	//REG_TC_GP_EnablePreview
+	{0x0F12, 0x0001},	//REG_TC_GP_EnablePreviewChanged
+
+	//===================================================================================
+	// 22. ESD Check
+	//===================================================================================
+
+	{0x0028, 0x7000},
+	{0x002A, 0x01A8},	//ESD Check
+	{0x0F12, 0xAAAA},
+
+	//===================================================================================
+	// 23. Brightness min/Max
+	//===================================================================================
+	{0x0028, 0x147C},
+	{0x0F12, 0x0170}, //bp_uMaxBrightnessFactor
+	{0x0028, 0x1482},
+	{0x0F12, 0x01E0}, //bp_uMinBrightnessFactor
+
+	//===================================================================================
+	// 24.ISSUE
+	//===================================================================================
+	//20110728 : Sequence Changed by image dev. (by J.M.Ahn)
+	//20110728 : ESD Check Register Address Change
+	//20110829 : TnP Changed ( by S.Y.Lee)
+	//20120104 : init Parm Update sequence changed by J.M.Ahn)
+	//20120201 : Flash ֺ Green Noise  setting (by J.M.Ahn)
+	//20120229 : Brightness Block ߰ (by J.W.Yoo)
+};
+
+//==========================================================
+// ISO
+//==========================================================
+LOCAL SENSOR_REG_T  s5k4ec_ISO_auto[] = {
+	{0x0028, 0x7000},
+	{0x002A ,0x04D0},
+	{0x0F12 ,0x0000},
+	{0x0F12 ,0x0000},
+	{0x0F12 ,0x0001},
+	{0xFFFF, 0xFFFF}
+};
+
+LOCAL SENSOR_REG_T  s5k4ec_ISO_50[] = {
+	{0x0028, 0x7000},
+	{0x002A ,0x04D0},
+	{0x0F12 ,0x0001},
+	{0x0F12 ,0x0100},
+	{0x0F12 ,0x0001},
+	{0xFFFF, 0xFFFF}
+};
+
+LOCAL SENSOR_REG_T  s5k4ec_ISO_100[] = {
+	{0x0028, 0x7000},
+	{0x002A ,0x04D0},
+	{0x0F12 ,0x0001},
+	{0x0F12 ,0x01A0},
+	{0x0F12 ,0x0001},
+	{0xFFFF, 0xFFFF}
+};
+
+LOCAL SENSOR_REG_T  s5k4ec_ISO_200[] = {
+	{0x0028, 0x7000},
+	{0x002A ,0x04D0},
+	{0x0F12 ,0x0001},
+	{0x0F12 ,0x0458},
+	{0x0F12 ,0x0001},
+	{0xFFFF, 0xFFFF}
+};
+
+LOCAL SENSOR_REG_T  s5k4ec_ISO_300[] = {
+	{0x0028, 0x7000},
+	{0x002A ,0x04D0},
+	{0x0F12 ,0x0001},
+	{0x0F12 ,0x0710},
+	{0x0F12 ,0x0001},
+	{0xFFFF, 0xFFFF}
+};
+
+LOCAL SENSOR_REG_T  s5k4ec_ISO_400[] = {
+	{0x0028, 0x7000},
+	{0x002A ,0x04D0},
+	{0x0F12 ,0x0001},
+	{0x0F12 ,0x0C80},
+	{0x0F12 ,0x0001},
+	{0xFFFF, 0xFFFF}
+};
+
+//==========================================================
+// Scenes (Alphabetically arranged)
+//==========================================================
+LOCAL SENSOR_REG_T s5k4ec_scene_backlight[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x1492},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0F01},
+	{0x0F12, 0x010F},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0F01},
+	{0x0F12, 0x010F},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_scene_beach[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x1484},
+	{0x0F12, 0x0045},
+	{0x002A, 0x0938},
+	{0x0F12, 0x0001},
+	{0x002A, 0x04D0},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x00D0},
+	{0x0F12, 0x0001},
+	{0x002A, 0x06C2},
+	{0x0F12, 0x0150},
+	{0x002A, 0x0234},
+	{0x0F12, 0x0030},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_scene_candlelight[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x04E6},
+	{0x0F12, 0x0777},
+	{0x0020, 0x04BA},
+	{0x0F10, 0x04DA},
+	{0x002A, 0x04BE},
+	{0x0F12, 0x0400},
+	{0x002A, 0x04C2},
+	{0x0F12, 0x0550},
+	{0x002A, 0x04C6},
+	{0x0F12, 0x0001},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_scene_dawn[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x04E6},
+	{0x0F12, 0x0777},
+	{0x002A, 0x04BA},
+	{0x0F12, 0x0558},
+	{0x002A, 0x04BE},
+	{0x0F12, 0x0400},
+	{0x002A, 0x04C2},
+	{0x0F12, 0x0955},
+	{0x002A, 0x04C6},
+	{0x0F12, 0x0001},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_scene_fall[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x0234},
+	{0x0F12, 0x0060},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_scene_firework[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x0544},
+	{0x0F12, 0x012C},
+	{0x0F12, 0x00D4},
+	{0x002A, 0x0638},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0A3C},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0D05},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x3408},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x3408},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xD020},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0428},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x1A80},
+	{0x0F12, 0x0006},
+	{0x0F12, 0x1A80},
+	{0x0F12, 0x0006},
+	{0x0F12, 0x1A80},
+	{0x0F12, 0x0006},
+	{0x002A, 0x02C2},
+	{0x0F12, 0x03E8},
+	{0x0F12, 0x014A},
+	{0x002A, 0x03B4},
+	{0x0F12, 0x2710},
+	{0x0F12, 0x2710},
+	{0x002A, 0x04D0},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x0001},
+	{0x002A, 0x06C2},
+	{0x0F12, 0x0180},
+	{0x002A, 0x0266},
+	{0x0F12, 0x0000},
+	{0x002A, 0x026A},
+	{0x0F12, 0x0001},
+	{0x002A, 0x024E},
+	{0x0F12, 0x0001},
+	{0x002A, 0x0268},
+	{0x0F12, 0x0001},
+	{0x002A, 0x0270},
+	{0x0F12, 0x0001},
+	{0x002A, 0x023E},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0001},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_scene_landscape[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x1492},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x002A, 0x0A28},
+	{0x0F12, 0xE082},
+	{0x002A, 0x0ADE},
+	{0x0F12, 0xE082},
+	{0x002A, 0x0B94},
+	{0x0F12, 0xE082},
+	{0x002A, 0x0C4A},
+	{0x0F12, 0xE082},
+	{0x002A, 0x0D00},
+	{0x0F12, 0xE082},
+	{0x002A, 0x0234},
+	{0x0F12, 0x0030},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_scene_night[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x06B8},
+	{0x0F12, 0xFFFF},
+	{0x0F12, 0x00FF},
+	{0x002A, 0x0A1E},
+	{0x0F12, 0x15C0},
+	{0x002A, 0x0638},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0A3C},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0D05},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x3408},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x3408},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x6810},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x8214},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x1A80},
+	{0x0F12, 0x0006},
+	{0x0F12, 0x1A80},
+	{0x0F12, 0x0006},
+	{0x0F12, 0x1A80},
+	{0x0F12, 0x0006},
+	{0x002A, 0x02C2},
+	{0x0F12, 0x07D0},
+	{0x0F12, 0x014A},
+	{0x002A, 0x03B4},
+	{0x0F12, 0x1388},
+	{0x0F12, 0x1388},
+	{0x002A, 0x1648},
+	{0x0F12, 0x9000},
+	{0x002A, 0x15E8},
+	{0x0F12, 0x0006},
+	{0x0F12, 0x0036},
+	{0x0F12, 0x003A},
+	{0x0F12, 0x0040},
+	{0x0F12, 0x0048},
+	{0x0F12, 0x0050},
+	{0x0F12, 0x0058},
+	{0x0F12, 0x0060},
+	{0x002A, 0x0266},
+	{0x0F12, 0x0000},
+	{0x002A, 0x026A},
+	{0x0F12, 0x0001},
+	{0x002A, 0x024E},
+	{0x0F12, 0x0001},
+	{0x002A, 0x0268},
+	{0x0F12, 0x0001},
+	{0x002A, 0x0270},
+	{0x0F12, 0x0001},
+	{0x002A, 0x023E},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0001},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_scene_off[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x1492},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0202},
+	{0x0F12, 0x0202},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0201},
+	{0x0F12, 0x0202},
+	{0x0F12, 0x0202},
+	{0x0F12, 0x0102},
+	{0x0F12, 0x0201},
+	{0x0F12, 0x0302},
+	{0x0F12, 0x0203},
+	{0x0F12, 0x0102},
+	{0x0F12, 0x0201},
+	{0x0F12, 0x0302},
+	{0x0F12, 0x0203},
+	{0x0F12, 0x0102},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0202},
+	{0x0F12, 0x0202},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0201},
+	{0x0F12, 0x0102},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0001},
+	{0x002A, 0x0A28},
+	{0x0F12, 0x6024},
+	{0x002A, 0x0ADE},
+	{0x0F12, 0x6024},
+	{0x002A, 0x0B94},
+	{0x0F12, 0x6024},
+	{0x002A, 0x0C4A},
+	{0x0F12, 0x6024},
+	{0x002A, 0x0D00},
+	{0x0F12, 0x6024},
+	{0x002A, 0x0234},
+	{0x0F12, 0x0000},
+	{0x002A, 0x06B8},
+	{0x0F12, 0x452C},
+	{0x0F12, 0x0005},
+	{0x002A, 0x0A1E},
+	{0x0F12, 0x0348},
+	{0x002A, 0x0638},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0A3C},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0D05},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x3408},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x3408},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x6810},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x8214},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xC350},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xC350},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xC350},
+	{0x0F12, 0x0000},
+	{0x002A, 0x02C2},
+	{0x0F12, 0x029A},
+	{0x0F12, 0x014A},
+	{0x002A, 0x03B4},
+	{0x0F12, 0x0535},
+	{0x0F12, 0x029A},
+	{0x002A, 0x0938},
+	{0x0F12, 0x0000},
+	{0x002A, 0x04E6},
+	{0x0F12, 0x077F},
+	{0x002A, 0x1484},
+	{0x0F12, 0x003C},
+	{0x002A, 0x04D0},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0001},
+	{0x002A, 0x06C2},
+	{0x0F12, 0x0200},
+	{0x002A, 0x1648},
+	{0x0F12, 0x9002},
+	{0x002A, 0x15E8},
+	{0x0F12, 0x0018},
+	{0x0F12, 0x002A},
+	{0x0F12, 0x0030},
+	{0x0F12, 0x0036},
+	{0x0F12, 0x003C},
+	{0x0F12, 0x0042},
+	{0x0F12, 0x0048},
+	{0x0F12, 0x004E},
+	{0x0F12, 0x0054},
+	{0x0F12, 0x005A},
+	{0x0F12, 0x0060},
+	{0x0F12, 0x0066},
+	{0x0F12, 0x006C},
+	{0x0F12, 0x0072},
+	{0x0F12, 0x0078},
+	{0x0F12, 0x007E},
+	{0x0F12, 0x0084},
+	{0x0F12, 0x008A},
+	{0x0F12, 0x0090},
+	{0x0F12, 0x0096},
+	{0x0F12, 0x009C},
+	{0x0F12, 0x00A2},
+	{0x0F12, 0x00A8},
+	{0x0F12, 0x00AE},
+	{0x0F12, 0x00B4},
+	{0x0F12, 0x00BA},
+	{0x002A, 0x0266},
+	{0x0F12, 0x0000},
+	{0x002A, 0x026A},
+	{0x0F12, 0x0001},
+	{0x002A, 0x024E},
+	{0x0F12, 0x0001},
+	{0x002A, 0x0268},
+	{0x0F12, 0x0001},
+	{0x002A, 0x0270},
+	{0x0F12, 0x0001},
+	{0x002A, 0x023E},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0001},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_scene_party[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x0938},
+	{0x0F12, 0x0001},
+	{0x002A, 0x04D0},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0377},
+	{0x0F12, 0x0001},
+	{0x002A, 0x06C2},
+	{0x0F12, 0x0180},
+	{0x002A, 0x0234},
+	{0x0F12, 0x0030},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_scene_portrait[] = {
+	{0x0028, 0x7000},
+	{0x002A, 0x0A28},
+	{0x0F12, 0x4020},
+	{0x002A, 0x0ADE},
+	{0x0F12, 0x4020},
+	{0x002A, 0x0B94},
+	{0x0F12, 0x4020},
+	{0x002A, 0x0C4A},
+	{0x0F12, 0x4020},
+	{0x002A, 0x0D00},
+	{0x0F12, 0x4020},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_scene_sports[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x0544},
+	{0x0F12, 0x0130},
+	{0x0F12, 0x00D0},
+	{0x002A, 0x0638},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0A3C},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0D05},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x3408},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x3408},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x3408},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x3408},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x3408},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x3408},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x3408},
+	{0x0F12, 0x0000},
+	{0x002A, 0x0938},
+	{0x0F12, 0x0001},
+	{0x002A, 0x04D0},
+	{0x0F12, 0x0003},
+	{0x0F12, 0x0200},
+	{0x0F12, 0x0001},
+	{0x002A, 0x0266},
+	{0x0F12, 0x0000},
+	{0x002A, 0x026A},
+	{0x0F12, 0x0001},
+	{0x002A, 0x024E},
+	{0x0F12, 0x0001},
+	{0x002A, 0x0268},
+	{0x0F12, 0x0001},
+	{0x002A, 0x0270},
+	{0x0F12, 0x0001},
+	{0x002A, 0x023E},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0001},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_scene_sunset[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x04E6},
+	{0x0F12, 0x0777},
+	{0x002A, 0x04BA},
+	{0x0F12, 0x04DA},
+	{0x002A, 0x04BE},
+	{0x0F12, 0x0400},
+	{0x002A, 0x04C2},
+	{0x0F12, 0x0550},
+	{0x002A, 0x04C6},
+	{0x0F12, 0x0001},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_scene_text[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x0A28},
+	{0x0F12, 0xA060},
+	{0x002A, 0x0ADE},
+	{0x0F12, 0xA060},
+	{0x002A, 0x0B94},
+	{0x0F12, 0xA060},
+	{0x002A, 0x0C4A},
+	{0x0F12, 0xA060},
+	{0x002A, 0x0D00},
+	{0x0F12, 0xA060},
+	{0xFFFF, 0xFFFF},
+};
+
+
+//==========================================================
+// SPRD Image params
+// Their design combines all reg settings to a table
+//==========================================================
+
+LOCAL SENSOR_REG_T s5k4ec_saturation_tab[][4] = {
+	{ // Lowest saturation
+		{0x0028, 0x7000},
+		{0x002A, 0x0234},
+		{0x0F12, 0xFF81},
+		{0xFFFF, 0xFFFF},
+	},
+	{ // -2 linearly interpolated
+		{0x0028, 0x7000},
+		{0x002A, 0x0234},
+		{0x0F12, 0xFFA0},
+		{0xFFFF, 0xFFFF},
+	},
+	{ // -1
+		{0x0028, 0x7000},
+		{0x002A, 0x0234},
+		{0x0F12, 0xFFC0},
+		{0xFFFF, 0xFFFF},
+	},
+	{ // +1
+		{0x0028, 0x7000},
+		{0x002A, 0x0234},
+		{0x0F12, 0x0040},
+		{0xFFFF, 0xFFFF},
+	},
+	{ // +2 linearly interpolated
+		{0x0028, 0x7000},
+		{0x002A, 0x0234},
+		{0x0F12, 0x0060},
+		{0xFFFF, 0xFFFF},
+	},
+	{ // highest saturation
+		{0x0028, 0x7000},
+		{0x002A, 0x0234},
+		{0x0F12, 0x007F},
+		{0xFFFF, 0xFFFF},
+	},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_contrast_tab[][4] = {
+	{//level -3
+		{0x0028, 0x7000}, {0x002A ,0x0232}, {0x0F12 ,0xFF9C}, {0xffff, 0xffff}
+	},
+	{//level -2
+		{0x0028, 0x7000}, {0x002A ,0x0232}, {0x0F12 ,0xFFAC}, {0xffff, 0xffff}
+	},
+	{//level -1
+		{0x0028, 0x7000}, {0x002A ,0x0232}, {0x0F12 ,0xFFD5}, {0xffff, 0xffff}
+	},
+	{//level 0
+		{0x0028, 0x7000}, {0x002A ,0x0232}, {0x0F12 ,0x0000}, {0xffff, 0xffff}
+	},
+	{//level 1
+		{0x0028, 0x7000}, {0x002A ,0x0232}, {0x0F12 ,0x002B}, {0xffff, 0xffff}
+	},
+	{//level 2
+		{0x0028, 0x7000}, {0x002A ,0x0232}, {0x0F12 ,0x0057}, {0xffff, 0xffff}
+	},
+	{//level 3
+		{0x0028, 0x7000}, {0x002A ,0x0232}, {0x0F12 ,0x0064}, {0xffff, 0xffff}
+	}
+};
+
+LOCAL SENSOR_REG_T s5k4ec_image_effect_tab[][15] = {
+	// CAMERA_EFFECT_NONE     --effect normal
+	{
+		{0x0028, 0x7000},
+		{0x002A, 0x023C},
+		{0x0F12, 0x0000},
+		{0xFFFF, 0xFFFF}
+	},
+	// CAMERA_EFFECT_MONO    --effect monochrome
+	{
+		{0x0028, 0x7000},
+		{0x002A, 0x023C},
+		{0x0F12, 0x0001},
+		{0xFFFF, 0xFFFF}
+	},
+	// CAMERA_EFFECT_RED      --effect red-tinted
+	{
+		{0x0028, 0x7000},
+		{0x002A, 0x023C},
+		{0x0F12, 0x0000},
+		{0x002A, 0x04E6},
+		{0x0F12, 0x0777},
+
+		{0x002A, 0x04BA},
+		{0x0F12, 0x0300},
+		{0x0F12, 0x0001},
+		{0x002A, 0x04BE},
+		{0x0F12, 0x0100},
+		{0x0F12, 0x0001},
+		{0x002A, 0x04C2},
+		{0x0F12, 0x0100},
+		{0x0F12, 0x0001},
+		{0xFFFF, 0xFFFF}
+	},
+	// CAMERA_EFFECT_GREEN         --effect green-tinted
+	{
+		{0x0028, 0x7000},
+		{0x002A, 0x023C},
+		{0x0F12, 0x0000},
+		{0x002A, 0x04E6},
+		{0x0F12, 0x0777},
+
+	  	{0x002A, 0x04BA},
+	  	{0x0F12, 0x0100},
+	  	{0x0F12, 0x0001},
+	  	{0x002A, 0x04BE},
+	  	{0x0F12, 0x0200},
+	  	{0x0F12, 0x0001},
+	  	{0x002A, 0x04C2},
+	  	{0x0F12, 0x0100},
+	  	{0x0F12, 0x0001},
+		{0xFFFF, 0xFFFF}
+	},
+	// CAMERA_EFFECT_BLUE         --effect blue-tinted
+	{
+		{0x0028, 0x7000},
+		{0x002A, 0x023C},
+		{0x0F12, 0x0000},
+		{0x002A, 0x04E6},
+		{0x0F12, 0x0777},
+
+		{0x002A, 0x04BA},
+		{0x0F12, 0x0100},
+		{0x0F12, 0x0001},
+		{0x002A, 0x04BE},
+		{0x0F12, 0x0100},
+		{0x0F12, 0x0001},
+		{0x002A, 0x04C2},
+		{0x0F12, 0x0200},
+		{0x0F12, 0x0001},
+		{0xFFFF, 0xFFFF}
+	},
+	// CAMERA_EFFECT_YELLOW       --effect solarize
+	{
+		{0x0028, 0x7000},
+		{0x002A, 0x023C},
+		{0x0F12, 0x0002},
+		{0xFFFF, 0xFFFF}
+	},
+	// CAMERA_EFFECT_NEGATIVE  --effect inverted colors
+	{
+		{0x0028, 0x7000},
+		{0x002A, 0x023C},
+		{0x0F12, 0x0003},
+		{0xFFFF, 0xFFFF}
+	},
+	// CAMERA_EFFECT_SEPIA    --effect sepia/lightbrown-tinted
+	{
+		{0x0028, 0x7000},
+		{0x002A, 0x023C},
+		{0x0F12, 0x0004},
+		{0xFFFF, 0xFFFF}
+	},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_anti_banding_flicker_tab[][7] = {
+	{//50hz
+		{0x0028, 0x7000},
+		{0x002a, 0x04e6},
+		{0x0f12, 0x075f},
+		{0x002a, 0x04d6},
+		{0x0f12, 0x0001},
+		{0x0f12, 0x0001},
+		{0xffff, 0xffff}
+	},
+	{//60hz
+		{0x0028, 0x7000},
+		{0x002a, 0x04e6},
+		{0x0f12, 0x075f},
+		{0x002a, 0x04d6},
+		{0x0f12, 0x0002},
+		{0x0f12, 0x0001},
+		{0xffff, 0xffff}
+	}
+};
+
+LOCAL SENSOR_REG_T s5k4ec_video_mode_tab[][40] = {
+	/* preview mode: 30 fps*/
+	{
+	{0xfcfc, 0xd000},
+	{0x0028, 0x7000},
+	////////////////////////////////////////////////////
+	// Preview Config 0     800*480
+	////////////////////////////////////////////////////
+	{0x002A, 0x02A6},
+	{0x0F12, 0x0320},  //#REG_0TC_PCFG_usWidth
+	{0x0F12, 0x01e0},  //#REG_0TC_PCFG_usHeight
+	{0x0F12, 0x0005},  //#REG_0TC_PCFG_Format
+	{0x0F12, 0x2EE0},  //#REG_0TC_PCFG_usMaxOut4KHzRate
+	{0x0F12, 0x2EE0},  //#REG_0TC_PCFG_usMinOut4KHzRate
+	{0x0F12, 0x0100},  //#REG_0TC_PCFG_OutClkPerPix88
+	{0x0F12, 0x0300},  //#REG_0TC_PCFG_uBpp88
+	{0x0F12, 0x0042},  //#REG_0TC_PCFG_PVIMask
+	{0x0F12, 0x0800},  //#REG_0TC_PCFG_OIFMask
+	{0x0F12, 0x01E0},  //#REG_0TC_PCFG_usJpegPacketSize
+	{0x0F12, 0x0000},  //#REG_0TC_PCFG_usJpegTotalPackets
+	{0x0F12, 0x0000},  //#REG_0TC_PCFG_uClockInd
+	{0x0F12, 0x0000},  //#REG_0TC_PCFG_usFrTimeType
+	{0x0F12, 0x0001},  //#REG_0TC_PCFG_FrRateQualityType
+	{0x0F12, 0x03e8},  //#REG_0TC_PCFG_usMaxFrTimeMsecMult10
+	{0x0F12, 0x0000},  //#REG_0TC_PCFG_usMinFrTimeMsecMult10
+	{0x002A, 0x02D0},
+	{0x0F12, 0x0000},  //#REG_0TC_PCFG_uPrevMirror
+	{0x0F12, 0x0000},  //#REG_0TC_PCFG_uCaptureMirror
+	{0x0F12, 0x0000},  //#REG_0TC_PCFG_uRotation
+
+	{0x002A, 0x0266},
+	{0x0F12, 0x0000},  //#REG_TC_GP_ActivePrevConfig
+	{0x002A, 0x026A},
+	{0x0F12, 0x0001},  //#REG_TC_GP_PrevOpenAfterChange
+	{0x002A, 0x026E},
+	{0x0F12, 0x0000},	 //REG_TC_GP_ActiveCapConfig
+	{0x002A, 0x024E},
+	{0x0F12, 0x0001},  //#REG_TC_GP_NewConfigSync
+	{0x002A, 0x0268},
+	{0x0F12, 0x0001},  //#REG_TC_GP_PrevConfigChanged
+	{0x002A, 0x0270},
+	{0x0F12, 0x0001},  //#REG_TC_GP_CapConfigChanged
+	{0x002A, 0x023E},
+	{0x0F12, 0x0001},  //#REG_TC_GP_EnablePreview
+	{0x0F12, 0x0001},  //#REG_TC_GP_EnablePreviewChanged
+	{0xffff, 0xffff},
+	{0xffff, 0xffff}
+	},
+	/* video mode: if use 35 fps, change it to 0x50*/
+	{
+	{0xfcfc, 0xd000},
+	{0x0028, 0x7000},
+	////////////////////////////////////////////////////
+	// Preview Config 0     640*480
+	////////////////////////////////////////////////////
+	{0x002A, 0x02A6},
+	{0x0F12, 0x0320},  //#REG_0TC_PCFG_usWidth
+	{0x0F12, 0x01e0},  //#REG_0TC_PCFG_usHeight
+	{0x0F12, 0x0005},  //#REG_0TC_PCFG_Format
+	{0x0F12, 0x2EE0},  //#REG_0TC_PCFG_usMaxOut4KHzRate
+	{0x0F12, 0x2EE0},  //#REG_0TC_PCFG_usMinOut4KHzRate
+	{0x0F12, 0x0100},  //#REG_0TC_PCFG_OutClkPerPix88
+	{0x0F12, 0x0300},  //#REG_0TC_PCFG_uBpp88
+	{0x0F12, 0x0042},  //#REG_0TC_PCFG_PVIMask
+	{0x0F12, 0x0800},  //#REG_0TC_PCFG_OIFMask
+	{0x0F12, 0x01E0},  //#REG_0TC_PCFG_usJpegPacketSize
+	{0x0F12, 0x0000},  //#REG_0TC_PCFG_usJpegTotalPackets
+	{0x0F12, 0x0000},  //#REG_0TC_PCFG_uClockInd
+	{0x0F12, 0x0002},  //#REG_0TC_PCFG_usFrTimeType
+	{0x0F12, 0x0001},  //#REG_0TC_PCFG_FrRateQualityType
+	{0x0F12, 0x029a},  //#REG_0TC_PCFG_usMaxFrTimeMsecMult10
+	{0x0F12, 0x0000},  //#REG_0TC_PCFG_usMinFrTimeMsecMult10
+	{0x002A, 0x02D0},
+	{0x0F12, 0x0000},  //#REG_0TC_PCFG_uPrevMirror
+	{0x0F12, 0x0000},  //#REG_0TC_PCFG_uCaptureMirror
+	{0x0F12, 0x0000},  //#REG_0TC_PCFG_uRotation
+
+	{0x002A, 0x0266},
+	{0x0F12, 0x0000},  //#REG_TC_GP_ActivePrevConfig
+	{0x002A, 0x026A},
+	{0x0F12, 0x0001},  //#REG_TC_GP_PrevOpenAfterChange
+	{0x002A, 0x026E},
+	{0x0F12, 0x0000},	 //REG_TC_GP_ActiveCapConfig
+	{0x002A, 0x024E},
+	{0x0F12, 0x0001},  //#REG_TC_GP_NewConfigSync
+	{0x002A, 0x0268},
+	{0x0F12, 0x0001},  //#REG_TC_GP_PrevConfigChanged
+	{0x002A, 0x0270},
+	{0x0F12, 0x0001},  //#REG_TC_GP_CapConfigChanged
+	{0x002A, 0x023E},
+	{0x0F12, 0x0001},  //#REG_TC_GP_EnablePreview
+	{0x0F12, 0x0001},  //#REG_TC_GP_EnablePreviewChanged
+	{0xffff, 0xffff},
+	{0xffff, 0xffff}
+	}
+};
+
+LOCAL SENSOR_REG_T s5k4ec_awb_tab[][13] = {
+	//AUTO
+	{
+		{0x0028, 0x7000},
+		{0x002A ,0x04E6}, {0x0F12 ,0x077F}, {0xffff, 0xffff},
+		{0xffff, 0xffff}, {0xffff, 0xffff}, {0xffff, 0xffff},
+		{0xffff, 0xffff}, {0xffff, 0xffff}, {0xffff, 0xffff},
+		{0xffff, 0xffff}, {0xffff, 0xffff}, {0xffff, 0xffff},
+	},
+	//INCANDESCENCE:
+	{
+		{0x0028, 0x7000},
+		{0x002A ,0x04E6}, {0x0F12 ,0x0777}, {0x002A ,0x04BA},
+		{0x0F12 ,0x066e}, {0x0F12 ,0x0001}, {0x002A ,0x04Be},
+		{0x0F12 ,0x0400}, {0x0F12 ,0x0001}, {0x002A ,0x04c2},
+		{0x0F12 ,0x0476}, {0x0F12 ,0x0001}, {0xffff, 0xffff}
+	},
+	//CWF equal to flourescent(auto),1
+	{
+		{0x0028, 0x7000},
+		{0x002A ,0x04E6}, {0x0F12 ,0x0777}, {0x002A ,0x04BA},
+		{0x0F12 ,0x0575}, {0x0F12 ,0x0001}, {0x002A ,0x04Be},
+		{0x0F12 ,0x0400}, {0x0F12 ,0x0001}, {0x002A ,0x04c2},
+		{0x0F12 ,0x0800}, {0x0F12 ,0x0001}, {0xffff, 0xffff}
+	},
+	//U30(auto),2
+	{
+		{0x0028, 0x7000},
+		{0x002A ,0x04E6}, {0x0F12 ,0x0777}, {0x002A ,0x04BA},
+		{0x0F12 ,0x0800}, {0x0F12 ,0x0001}, {0x002A ,0x04Be},
+		{0x0F12 ,0x0400}, {0x0F12 ,0x0001}, {0x002A ,0x04c2},
+		{0x0F12 ,0x0800}, {0x0F12 ,0x0001}, {0xffff, 0xffff}
+	},
+	//CWF equal to flourescent(auto),3
+	{
+		{0x0028, 0x7000},
+		{0x002A ,0x04E6}, {0x0F12 ,0x0777}, {0x002A ,0x04BA},
+		{0x0F12 ,0x0575}, {0x0F12 ,0x0001}, {0x002A ,0x04Be},
+		{0x0F12 ,0x0400}, {0x0F12 ,0x0001}, {0x002A ,0x04c2},
+		{0x0F12 ,0x0800}, {0x0F12 ,0x0001}, {0xffff, 0xffff}
+	},
+	//FLUORESCENT:4
+	{
+		{0x0028, 0x7000},
+		{0x002A ,0x04E6}, {0x0F12 ,0x0777}, {0x002A ,0x04BA},
+		{0x0F12 ,0x0400}, {0x0F12 ,0x0001}, {0x002A ,0x04Be},
+		{0x0F12 ,0x0400}, {0x0F12 ,0x0001}, {0x002A ,0x04c2},
+		{0x0F12 ,0x0940}, {0x0F12 ,0x0001}, {0xffff, 0xffff}
+	},
+	//SUN:5
+	{
+		{0x0028, 0x7000},
+		{0x002A ,0x04E6}, {0x0F12 ,0x0777}, {0x002A ,0x04BA},
+		{0x0F12 ,0x05e0}, {0x0F12 ,0x0001}, {0x002A ,0x04Be},
+		{0x0F12 ,0x0400}, {0x0F12 ,0x0001}, {0x002A ,0x04c2},
+		{0x0F12 ,0x0530}, {0x0F12 ,0x0001}, {0xffff, 0xffff}
+	},
+	//CLOUD:6
+	{
+		{0x0028, 0x7000},
+		{0x002A ,0x04E6}, {0x0F12 ,0x0777}, {0x002A ,0x04BA},
+		{0x0F12 ,0x0740}, {0x0F12 ,0x0001}, {0x002A ,0x04Be},
+		{0x0F12 ,0x0400}, {0x0F12 ,0x0001}, {0x002A ,0x04c2},
+		{0x0F12 ,0x0460}, {0x0F12 ,0x0001}, {0xffff, 0xffff}
+	}
+};
+
+/*
+ * In more recent iterations of the userspace driver for s5k4ec,
+ * These reg settings are used to simulate EV compensations
+ * While the reg settings below (for the "ev compensations")
+ * are used to tweak the brightness.
+ * I only used 2 sources both are conflicting so I'll use
+ * the settings opposite from the stock rom.
+ */
+LOCAL SENSOR_REG_T s5k4ec_brightness_tab[][7] = {
+	{//level -3 TVAR_ae_BrAve
+		{0x0028, 0x7000},{0x002A, 0x1484},{0x0F12, 0x000C}, {0xffff, 0xffff}
+	},
+	{//level -2
+		{0x0028, 0x7000},{0x002A, 0x1484},{0x0F12, 0x001E}, {0xffff, 0xffff}
+	},
+	{//level -1
+		{0x0028, 0x7000},{0x002A, 0x1484},{0x0F12, 0x002E}, {0xffff, 0xffff}
+	},
+	{//level 0
+		{0x0028, 0x7000},{0x002A, 0x1484},{0x0F12, 0x003C}, {0xffff, 0xffff}
+	},
+	{//level 1
+		{0x0028, 0x7000},{0x002A, 0x1484},{0x0F12, 0x0054}, {0xffff, 0xffff}
+	},
+	{//level 2
+		{0x0028, 0x7000},{0x002A, 0x1484},{0x0F12, 0x0066}, {0xffff, 0xffff}
+	},
+	{//level 3
+		{0x0028, 0x7000},{0x002A, 0x1484},{0x0F12, 0x0078}, {0xffff, 0xffff}
+	}
+};
+
+LOCAL SENSOR_REG_T s5k4ec_ev_tab[][4] = {
+	{//level -3
+		{0x0028, 0x7000},  {0x002A ,0x0230}, {0x0F12 ,0xFF81}, {0xffff, 0xffff}
+	},
+	{//level -2
+		{0x0028, 0x7000}, {0x002A ,0x0230}, {0x0F12 ,0xFFAC}, {0xffff, 0xffff}
+	},
+	{//level -1
+		{0x0028, 0x7000},  {0x002A ,0x0230}, {0x0F12 ,0xFFD5}, {0xffff, 0xffff}
+	},
+	{//level 0
+		{0x0028, 0x7000},  {0x002A ,0x0230}, {0x0F12 ,0x0000}, {0xffff, 0xffff}
+	},
+	{//level 1
+		{0x0028, 0x7000},  {0x002A ,0x0230}, {0x0F12 ,0x002B}, {0xffff, 0xffff}
+	},
+	{//level 2
+		{0x0028, 0x7000},  {0x002A ,0x0230}, {0x0F12 ,0x0057}, {0xffff, 0xffff}
+	},
+	{//level 3
+		{0x0028, 0x7000},  {0x002A ,0x0230}, {0x0F12 ,0x007F}, {0xffff, 0xffff}
+	}
+};
+
+//==========================================================
+// Low light capture modes (low_cap & night_mode)
+//==========================================================
+
+LOCAL SENSOR_REG_T s5k4ec_night_mode_On[] = {
+	{0x0028, 0x7000},
+	{0x0028, 0x7000},
+	{0x002A, 0x0608},
+	{0x0F12, 0x0001}, /*#lt_ExpGain_uSubsamplingmode*/
+	{0x0F12, 0x0001}, /*#lt_ExpGain_uNonSubsampling*/
+	{0x0F12, 0x0900}, /*#lt_ExpGain_ExpCurveGainMaxStr*/
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_night_mode_Off[] = {
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_low_cap_On[] = {
+	{0x0028, 0x7000},
+
+	{0x002A, 0x06B8},
+	{0x0F12, 0xFFFF},
+	{0x0F12, 0x00FF}, //lt_uMaxLei
+	{0x002A, 0x0A1A},
+	{0x0F12, 0x4A18}, //Gamma linearity
+	{0x002A, 0x0608},
+	{0x0F12, 0x0001}, //lt_ExpGain_uSubsamplingmode
+	{0x0F12, 0x0001}, //lt_ExpGain_uNonSubsampling
+	{0x0F12, 0x0850}, //lt_ExpGain_ExpCurveGainMaxStr
+	{0x002A, 0x0938},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0012}, //SARR_uNormBrInDoor_0_
+	{0x0F12, 0x0022}, //SARR_uNormBrInDoor_1_
+	{0x0F12, 0x0384}, //SARR_uNormBrInDoor_2_
+	{0x0F12, 0x07D0}, //SARR_uNormBrInDoor_3_
+	{0x0F12, 0x1388}, //SARR_uNormBrInDoor_4_
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_low_cap_Off[] = {
+	{0x002A, 0x06B8},
+	{0x0F12, 0x452C},
+	{0x0F12, 0x0005}, //lt_uMaxLei
+	{0x002A, 0x0A1A},
+	{0x0F12, 0x8F18}, //Gamma linearity
+	{0x002A, 0x0608},
+	{0x0F12, 0x0001}, //lt_ExpGain_uSubsamplingmode
+	{0x0F12, 0x0001}, //lt_ExpGain_uNonSubsampling
+	{0x0F12, 0x0800}, //lt_ExpGain_ExpCurveGainMaxStr
+	{0x002A, 0x0938},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0014}, //#SARR_uNormBrInDoor_0_
+	{0x0F12, 0x00D2}, //#SARR_uNormBrInDoor_1_
+	{0x0F12, 0x0384}, //#SARR_uNormBrInDoor_2_
+	{0x0F12, 0x07D0}, //#SARR_uNormBrInDoor_3_
+	{0x0F12, 0x1388}, //#SARR_uNormBrInDoor_4_
+	{0xFFFF, 0xFFFF},
+};
+
+//==========================================================
+// Autofocus
+//==========================================================
+LOCAL SENSOR_REG_T s5k4ec_AF_normal_mode_1[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x028E},
+	{0x0F12, 0x0000},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_AF_normal_mode_2[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x028C},
+	{0x0F12, 0x0004},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_AF_normal_mode_3[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x1648},
+	{0x0F12, 0x9002},
+
+	{0x002A, 0x15E8},
+	{0x0F12, 0x0015},
+	{0x0F12, 0x0032},
+	{0x0F12, 0x0038},
+	{0x0F12, 0x003E},
+	{0x0F12, 0x0044},
+	{0x0F12, 0x004A},
+	{0x0F12, 0x0050},
+	{0x0F12, 0x0056},
+	{0x0F12, 0x005C},
+	{0x0F12, 0x0062},
+	{0x0F12, 0x0068},
+	{0x0F12, 0x006E},
+	{0x0F12, 0x0074},
+	{0x0F12, 0x007A},
+	{0x0F12, 0x0080},
+	{0x0F12, 0x0086},
+	{0x0F12, 0x008C},
+	{0x0F12, 0x0092},
+	{0x0F12, 0x0098},
+	{0x0F12, 0x009E},
+	{0x0F12, 0x00A4},
+	{0x0F12, 0x00AA},
+	{0x0F12, 0x00B0},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_AF_macro_mode_1[] = {
+	{0x0028, 0x7000},
+	{0x002A, 0x0288},
+	{0x0F12, 0x00D0},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_AF_macro_mode_2[] = {
+	{0x002A, 0x0286},
+	{0x0F12, 0x0004},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_AF_macro_mode_3[] = {
+	{0x002A, 0x160C},
+	{0x0F12, 0x1042},
+	{0x002A, 0x159E},
+	{0x0F12, 0x1700},
+	{0xFFFF, 0xFFFF},
+
+};
+
+LOCAL SENSOR_REG_T s5k4ec_single_AF_start[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x028C},
+	{0x0F12, 0x0005},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_AF_off_1[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x028E},
+	{0x0F12, 0x0000},	//REG_TC_AF_AfCmdParam
+	{0x002A, 0x028C},
+	{0x0F12, 0x0004},	//REG_TC_AF_AfCmd
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_AF_return_inf_pos[] = {
+	{0x002A, 0x15D6},
+	{0x0F12, 0xD000},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_AF_low_light_mode_On[] = {
+	{0x002A, 0x15DA},
+	{0x0F12, 0x0C00},
+
+	{0x002A, 0x15E8},
+	{0x0F12, 0x000C},
+	{0x0F12, 0x002A},
+	{0x0F12, 0x0033},
+	{0x0F12, 0x003C},
+	{0x0F12, 0x0045},
+	{0x0F12, 0x004E},
+	{0x0F12, 0x0057},
+	{0x0F12, 0x0063},
+	{0x0F12, 0x006F},
+	{0x0F12, 0x007B},
+	{0x0F12, 0x0087},
+	{0x0F12, 0x0093},
+	{0x0F12, 0x00A2},
+	{0x0F12, 0x00B1},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_AF_low_light_mode_Off[] = {
+	{0x002A, 0x15DA},
+	{0x0F12, 0x1800},
+
+	{0x002A, 0x15E8},
+	{0x0F12, 0x0018},
+	{0x0F12, 0x002A},
+	{0x0F12, 0x0030},
+	{0x0F12, 0x0036},
+	{0x0F12, 0x003C},
+	{0x0F12, 0x0042},
+	{0x0F12, 0x0048},
+	{0x0F12, 0x004E},
+	{0x0F12, 0x0054},
+	{0x0F12, 0x005A},
+	{0x0F12, 0x0060},
+	{0x0F12, 0x0066},
+	{0x0F12, 0x006C},
+	{0x0F12, 0x0072},
+	{0x0F12, 0x0078},
+	{0x0F12, 0x007E},
+	{0x0F12, 0x0084},
+	{0x0F12, 0x008A},
+	{0x0F12, 0x0090},
+	{0x0F12, 0x0096},
+	{0x0F12, 0x009C},
+	{0x0F12, 0x00A2},
+	{0x0F12, 0x00A8},
+	{0x0F12, 0x00AE},
+	{0x0F12, 0x00B4},
+	{0x0F12, 0x00BA},
+	{0xFFFF, 0xFFFF},
+};
+
+
+//==========================================================
+// FPS modes
+//==========================================================
+
+LOCAL SENSOR_REG_T s5k4ec_Auto30_FPS[] = { //10-30 fps
+	{0x0028, 0x7000},
+
+	{0x002A, 0x02BE},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x03E8}, //29A = 66.7msec(15fps) //03E8 = 100msec (10fps) // 7D0 = 200msec (5fps)
+	{0x0F12, 0x014A},
+
+	{0x002A, 0x0266},
+	{0x0F12, 0x0000},
+	{0x002A, 0x026A},
+	{0x0F12, 0x0001},
+	{0x002A, 0x024E},
+	{0x0F12, 0x0001},
+	{0x002A, 0x0268},
+	{0x0F12, 0x0001},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_7_FPS[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+
+	{0x002A, 0x02B4},
+	{0x0F12, 0x0012},
+	{0x002A, 0x02BE},
+	{0x0F12, 0x0000},	//REG_0TC_PCFG_usFrTimeType
+	{0x0F12, 0x0001},	//REG_0TC_PCFG_FrRateQualityType
+	{0x0F12, 0x0535},	//REG_0TC_PCFG_usMaxFrTimeMsecMult10 //0535h:7.5fps
+	{0x0F12, 0x0535},	//REG_0TC_PCFG_usMinFrTimeMsecMult10 //0535h:7.5fps
+
+	{0x002A, 0x0266},
+	{0x0F12, 0x0000},	//REG_TC_GP_ActivePrevConfig
+	{0x002A, 0x026A},
+	{0x0F12, 0x0001},	//REG_TC_GP_PrevOpenAfterChange
+	{0x002A, 0x024E},
+	{0x0F12, 0x0001},	//REG_TC_GP_NewConfigSync
+	{0x002A, 0x0268},
+	{0x0F12, 0x0001},	//REG_TC_GP_PrevConfigChanged
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_10_FPS[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0xD000},
+
+	{0x002A, 0xF132},
+	{0x0F12, 0x0200},
+
+	{0x002A, 0xF142},
+	{0x0F12, 0x0200},
+
+	{0x0028, 0x7000},
+
+	{0x002A, 0x02BE},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x03E8},
+	{0x0F12, 0x03E8},
+
+	{0x002A, 0x0266},
+	{0x0F12, 0x0000},
+	{0x002A, 0x026A},
+	{0x0F12, 0x0001},
+	{0x002A, 0x024E},
+	{0x0F12, 0x0001},
+	{0x002A, 0x0268},
+	{0x0F12, 0x0001},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_12_FPS[]= {
+	{0xFCFC, 0xD000},
+	{0x0028, 0xD000},
+	{0x002A, 0xF132},
+	{0x0F12, 0x0200},
+	{0x002A, 0xF142},
+	{0x0F12, 0x0200},
+	{0x0028, 0x7000},
+
+	{0x002A, 0x02BE},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0341},
+	{0x0F12, 0x0341},
+
+	{0x002A, 0x0266},
+	{0x0F12, 0x0000},
+	{0x002A, 0x026A},
+	{0x0F12, 0x0001},
+	{0x002A, 0x024E},
+	{0x0F12, 0x0001},
+	{0x002A, 0x0268},
+	{0x0F12, 0x0001},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_15_FPS[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x02B4},
+	{0x0F12, 0x0012},
+
+	{0x002A, 0x02BE},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x029A},
+	{0x0F12, 0x029A},
+
+	{0x002A, 0x0266},
+	{0x0F12, 0x0000},
+	{0x002A, 0x026A},
+	{0x0F12, 0x0001},
+	{0x002A, 0x024E},
+	{0x0F12, 0x0001},
+	{0x002A, 0x0268},
+	{0x0F12, 0x0001},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_25_FPS[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0xD000},
+
+	{0x002A, 0xF132},
+	{0x0F12, 0x0200},
+
+	{0x002A, 0xF142},
+	{0x0F12, 0x0200},
+
+	{0x0028, 0x7000},
+
+	{0x002A, 0x02B4},
+	{0x0F12, 0x0012},
+
+	{0x002A, 0x02BE},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0190},
+	{0x0F12, 0x0190},
+
+	{0x002A, 0x0266},
+	{0x0F12, 0x0000},
+	{0x002A, 0x026A},
+	{0x0F12, 0x0001},
+	{0x002A, 0x024E},
+	{0x0F12, 0x0001},
+	{0x002A, 0x0268},
+	{0x0F12, 0x0001},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_30_FPS[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0xD000},
+
+	{0x002A, 0xF132},
+	{0x0F12, 0x0200},
+
+	{0x002A, 0xF142},
+	{0x0F12, 0x0200},//110404 AE haunting
+
+	{0x0028, 0x7000},
+
+	{0x002A, 0x02B4},
+	{0x0F12, 0x0052},
+
+	{0x002A, 0x02BE},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x014A},
+	{0x0F12, 0x014A},
+
+	{0x002A, 0x02AA},
+	{0x0F12, 0x0006},
+
+	{0x002A, 0x098C},
+	{0x0F12, 0x0010},
+
+	{0x002A, 0x060C},
+	{0x0F12, 0x1388},
+
+	{0x002A, 0x0266},
+	{0x0F12, 0x0000},
+	{0x002A, 0x026A},
+	{0x0F12, 0x0001},
+	{0x002A, 0x024E},
+	{0x0F12, 0x0001},
+	{0x002A, 0x0268},
+	{0x0F12, 0x0001},
+	{0xFFFF, 0xFFFF},
+};
+
+//==========================================================
+// Metering modes
+//==========================================================
+LOCAL SENSOR_REG_T s5k4ec_metering_matrix[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+
+	{0x002A, 0x1492},
+	{0x0F12, 0x0101},	//ae_WeightTbl_16
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+
+	{0x002A, 0x0268},	//REG_TC_GP_PrevConfigChanged
+	{0x0F12, 0x0001},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_metering_spot[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+
+	{0x002A, 0x1492},
+	{0x0F12, 0x0000},	//ae_WeightTbl_16
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0F01},
+	{0x0F12, 0x010F},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0F01},
+	{0x0F12, 0x010F},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+
+	{0x002A, 0x0268},	//REG_TC_GP_PrevConfigChanged
+	{0x0F12, 0x0001},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_metering_center_weighted[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+
+	{0x002A, 0x1492},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0202},
+	{0x0F12, 0x0202},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0201},
+	{0x0F12, 0x0202},
+	{0x0F12, 0x0202},
+	{0x0F12, 0x0102},
+	{0x0F12, 0x0201},
+	{0x0F12, 0x0302},
+	{0x0F12, 0x0203},
+	{0x0F12, 0x0102},
+	{0x0F12, 0x0201},
+	{0x0F12, 0x0302},
+	{0x0F12, 0x0203},
+	{0x0F12, 0x0102},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0202},
+	{0x0F12, 0x0202},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0201},
+	{0x0F12, 0x0102},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0001},
+
+	{0x002A, 0x0268},   //REG_TC_GP_PrevConfigChanged
+	{0x0F12, 0x0001},
+	{0xFFFF, 0xFFFF},
+};
+
+
+//==========================================================
+// State Triggers
+//==========================================================
+LOCAL SENSOR_REG_T s5k4ec_preview_return[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x0242},
+	{0x0F12, 0x0000}, //REG_TC_GP_EnableCapture
+	{0x002A, 0x024E},
+	{0x0F12, 0x0001}, //REG_TC_GP_NewConfigSync
+	{0x002A, 0x0244},
+	{0x0F12, 0x0001}, //REG_TC_GP_EnableCaptureChanged
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_capture_start[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x0242},
+	{0x0F12, 0x0001},	//REG_TC_GP_EnableCapture
+	{0x002A, 0x024E},
+	{0x0F12, 0x0001},	//REG_TC_GP_NewConfigSync
+	{0x002A, 0x0244},
+	{0x0F12, 0x0001},	//REG_TC_GP_EnableCaptureChanged
+	{0xFFFF, 0xFFFF},
+};
+
+
+//==========================================================
+// Preview Sizes
+//==========================================================
+//640X480 YUV
+LOCAL SENSOR_REG_T s5k4ec_640X480[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+
+	{0x002A, 0x18AC},
+	{0x0F12, 0x0060},	//senHal_uAddColsBin
+	{0x0F12, 0x0060},	//senHal_uAddColsNoBin
+	{0x0F12, 0x05C0},	//senHal_uMinColsBin
+	{0x0F12, 0x05C0},	//senHal_uMinColsNoBin
+
+	{0x002A, 0x0250},
+	{0x0F12, 0x0A00},	//REG_TC_GP_PrevReqInputWidth //2560
+	{0x0F12, 0x0780},	//REG_TC_GP_PrevReqInputHeight //1920
+	{0x0F12, 0x0010},	//REG_TC_GP_PrevInputWidthOfs //(2592-2560)/2
+	{0x0F12, 0x000C},	//REG_TC_GP_PrevInputHeightOfs //(1944-1920)/2
+
+	{0x002A, 0x0262},
+	{0x0F12, 0x0001},	//REG_TC_GP_bUseReqInputInPre
+
+	{0x002A, 0x0494},
+	{0x0F12, 0x0A00},	//REG_TC_PZOOM_PrevZoomReqInputWidth //2560
+	{0x0F12, 0x0780},	//REG_TC_PZOOM_PrevZoomReqInputHeight //1920
+	{0x0F12, 0x0000},	//REG_TC_PZOOM_PrevZoomReqInputWidthOfs
+	{0x0F12, 0x0000},	//REG_TC_PZOOM_PrevZoomReqInputHeightOfs
+
+	{0x002A, 0x02A6},
+	{0x0F12, 0x0280},	//REG_0TC_PCFG_usWidth //640
+	{0x0F12, 0x01E0},	//REG_0TC_PCFG_usHeight //480
+
+	{0x002A, 0x0266},
+	{0x0F12, 0x0000},	//REG_TC_GP_ActivePrevConfig
+	{0x002A, 0x026A},
+	{0x0F12, 0x0001},	//REG_TC_GP_PrevOpenAfterChange
+	{0x002A, 0x024E},
+	{0x0F12, 0x0001},	//REG_TC_GP_NewConfigSync
+	{0x002A, 0x0268},
+	{0x0F12, 0x0001},	//REG_TC_GP_PrevConfigChanged
+
+};
+
+LOCAL SENSOR_REG_T s5k4ec_1280X720[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0xD000},
+	{0x002A, 0xE410},
+	{0x0F12, 0x3E01},
+
+	{0x0028, 0x7000},
+	{0x002A, 0x18AC},
+	{0x0F12, 0x0060},	//	#senHal_uAddColsBin 	//
+	{0x0F12, 0x0060},	//	#senHal_uAddColsNoBin	//
+	{0x0F12, 0x07DC},	//05C0	//	#senHal_uMinColsBin 	//
+	{0x0F12, 0x05C0},	//	#senHal_uMinColsNoBin	//
+
+	{0x002A, 0x02A6},
+	{0x0F12, 0x0500},	//	#REG_0TC_PCFG_usWidth  //Hsize	 : 800			//
+	{0x0F12, 0x02D0}, //	#REG_0TC_PCFG_usHeight//Vsize	: 480		//
+
+		// FOR HD CAMCORDER
+		// FRAME RATE
+
+		// AE TARGET
+	{0x002A, 0x1484},
+	{0x0F12, 0x002A},	//003C	 //TVAR_ae_BrAve p //
+
+		// METERING
+	{0x002A, 0x1492},	// Matrix //
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+
+
+		// SLOW AE
+	{0x002A, 0x1568},
+	{0x0F12, 0x0030},	// 0010 ae_GainIn_0_			//
+	{0x0F12, 0x0090},	// 0020 ae_GainIn_1_			//
+	{0x0F12, 0x00A8},	// 0040 ae_GainIn_2_			//
+	{0x0F12, 0x00C0},	// 0080 ae_GainIn_3_			//
+	{0x0F12, 0x0100},	// fix 0100 ae_GainIn_4_			//
+	{0x0F12, 0x0140},	// 0200 ae_GainIn_5_			//
+	{0x0F12, 0x0180},	// 0400 ae_GainIn_6_			//
+	{0x0F12, 0x0400},	// 0800 ae_GainIn_7_			//
+	{0x0F12, 0x2000},	// 2000 ae_GainIn_8_			//
+
+	{0x0F12, 0x0080},	//0050	// 0010 ae_GainOut_0_	p	//
+	{0x0F12, 0x00D0},	//0070	// 0020 ae_GainOut_1_ p//
+	{0x0F12, 0x00D8},	//00A0	// 0040 ae_GainOut_2_	p	//
+	{0x0F12, 0x00f8},	//00D0	// 0080 ae_GainOut_3_	p	//
+	{0x0F12, 0x0100},	// fix 0100 ae_GainOut_4_		//
+	{0x0F12, 0x0103},	// 0200 ae_GainOut_5_		//
+	{0x0F12, 0x0110},	// 0400 ae_GainOut_6_		//
+	{0x0F12, 0x0150},	// 0800 ae_GainOut_7_		//
+	{0x0F12, 0x0400},	// 2000 ae_GainOut_8_		//
+
+	{0x002A, 0x0544},
+	{0x0F12, 0x0105},	// limit high		//
+	{0x0F12, 0x00FA},	// limit low		//
+
+	{0x002A, 0x0588},
+	{0x0F12, 0x0001},	// post tolerance cnt		//
+
+	{0x002A, 0x0582},
+	{0x0F12, 0x00D0},	// speed		//
+
+		// SLOW AWB
+	{0x002A, 0x139A},
+	{0x0F12, 0x0258}, //0258 awbb_GainsMaxMove//
+
+		//AWB Convergence Speed //
+	{0x002A, 0x1464},
+	{0x0F12, 0x0008},
+	{0x0F12, 0xFFFF},	//0190	awbb_WpFilterMaxThr //
+	{0x0F12, 0x0010}, //00A0	//awbb_WpFilterCoef p //
+	{0x0F12, 0x0020},	//0004 awbb_WpFilterSize //
+
+
+		// SEHF_HD_Camcorder_AWB
+		//Indoor Grid Offset
+	{0x002A, 0x13A4},
+	{0x0F12, 0x0000},  //0000
+	{0x0F12, 0xFFD8},  //FFD8
+	{0x0F12, 0xFFD8},  //FFD8
+	{0x0F12, 0xFFD8},  //FFD8
+	{0x0F12, 0xFFD8},  //FFD8
+	{0x0F12, 0xFFD0},  //FFF6 B
+
+	{0x0F12, 0x0000},  //0000
+	{0x0F12, 0xFFD8},  //FFD8
+	{0x0F12, 0xFFD8},  //FFD8
+	{0x0F12, 0xFFD8},  //FFD8
+	{0x0F12, 0xFFD8},  //FFD8
+	{0x0F12, 0xFFD0},  //FFF6
+
+	{0x0F12, 0x0000},  //0000
+	{0x0F12, 0xFFD8},  //FFD8
+	{0x0F12, 0xFFD8},  //FFD8
+	{0x0F12, 0xFFD8},  //FFD8
+	{0x0F12, 0xFFD8},  //FFD8
+	{0x0F12, 0xFFD0},  //FFF6
+
+	{0x0F12, 0xFFEC},  //FFEC
+	{0x0F12, 0x000A},  //000A
+	{0x0F12, 0x000A},  //000A
+	{0x0F12, 0xFFC4},  //FFC4
+	{0x0F12, 0xFFC4},  //FFC4
+	{0x0F12, 0xFF66},  //FF56 7
+
+	{0x0F12, 0xFFEC},  //FFEC
+	{0x0F12, 0x000A},  //000A
+	{0x0F12, 0x000A},  //000A
+	{0x0F12, 0xFFC4},  //FFC4
+	{0x0F12, 0xFFC4},  //FFC4
+	{0x0F12, 0xFF66},  //FF56
+
+	{0x0F12, 0xFFEC},  //FFEC
+	{0x0F12, 0x000A},  //000A
+	{0x0F12, 0x000A},  //000A
+	{0x0F12, 0xFFC4},  //FFC4
+	{0x0F12, 0xFFC4},  //FFC4
+	{0x0F12, 0xFF66},  //FF56
+
+		//Outdoor Grid Offset
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+
+	{0x0F12, 0xFFC0},
+	{0x0F12, 0xFFC0},
+	{0x0F12, 0xFFC0},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+
+	{0x0F12, 0xFFC0},
+	{0x0F12, 0xFFC0},
+	{0x0F12, 0xFFC0},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+
+	{0x0F12, 0xFFC0},
+	{0x0F12, 0xFFC0},
+	{0x0F12, 0xFFC0},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+
+	{0x002A, 0x1208},
+	{0x0F12, 0x0020},
+
+	{0x002A, 0x144E},
+	{0x0F12, 0x0000},	//awbb_RGainOff
+	{0x0F12, 0xFFE0},	//awbb_BGainOff
+	{0x0F12, 0x0000},	//awbb_GGainOff
+		// SEHF_HD_Camcorder_AWB
+
+		// SHARPNESS n NOISE
+	{0x002A, 0x098C},	//AFIT 0
+	{0x0F12, 0x0000},	//70000C64 AFIT16_BRIGHTNESS
+	{0x0F12, 0x0000},	//70000C66 AFIT16_CONTRAST
+	{0x0F12, 0x0000},	//70000C68 AFIT16_SATURATION
+	{0x0F12, 0x0000},	//70000C6A AFIT16_SHARP_BLUR
+	{0x0F12, 0x0000},	//70000C6C AFIT16_GLAMOUR
+	{0x0F12, 0x00C0},	//70000C6E AFIT16_bnr_edge_high
+	{0x0F12, 0x0064},	//70000C70 AFIT16_postdmsc_iLowBright
+	{0x0F12, 0x0384},	//70000C72 AFIT16_postdmsc_iHighBright
+	{0x0F12, 0x0051},	//70000C74 AFIT16_postdmsc_iLowSat
+	{0x0F12, 0x01F4},	//70000C76 AFIT16_postdmsc_iHighSat
+	{0x0F12, 0x0070},	//70000C78 AFIT16_postdmsc_iTune
+	{0x0F12, 0x0040},	//70000C7A AFIT16_yuvemix_mNegRanges_0
+	{0x0F12, 0x00A0},	//70000C7C AFIT16_yuvemix_mNegRanges_1
+	{0x0F12, 0x0100},	//70000C7E AFIT16_yuvemix_mNegRanges_2
+	{0x0F12, 0x0010},	//70000C80 AFIT16_yuvemix_mPosRanges_0
+	{0x0F12, 0x0060},	//70000C82 AFIT16_yuvemix_mPosRanges_1
+	{0x0F12, 0x0100},	//70000C84 AFIT16_yuvemix_mPosRanges_2
+	{0x0F12, 0x1430},	//70000C86 AFIT8_bnr_edge_low  [7:0] AFIT8_bnr_repl_thresh
+	{0x0F12, 0x0201},	//70000C88 AFIT8_bnr_repl_force  [7:0] AFIT8_bnr_iHotThreshHigh
+	{0x0F12, 0x0204},	//70000C8A AFIT8_bnr_iHotThreshLow	 [7:0] AFIT8_bnr_iColdThreshHigh
+	{0x0F12, 0x2404},	//70000C8C AFIT8_bnr_iColdThreshLow   [7:0] AFIT8_bnr_DispTH_Low
+	{0x0F12, 0x031B},	//70000C8E AFIT8_bnr_DispTH_High   [7:0] AFIT8_bnr_DISP_Limit_Low
+	{0x0F12, 0x0103},	//70000C90 AFIT8_bnr_DISP_Limit_High   [7:0] AFIT8_bnr_iDistSigmaMin
+	{0x0F12, 0x1205},	//70000C92 AFIT8_bnr_iDistSigmaMax	 [7:0] AFIT8_bnr_iDiffSigmaLow
+	{0x0F12, 0x400D},	//70000C94 AFIT8_bnr_iDiffSigmaHigh   [7:0] AFIT8_bnr_iNormalizedSTD_TH
+	{0x0F12, 0x0080},	//70000C96 AFIT8_bnr_iNormalizedSTD_Limit	[7:0] AFIT8_bnr_iDirNRTune
+	{0x0F12, 0x2080},	//70000C98 AFIT8_bnr_iDirMinThres	[7:0] AFIT8_bnr_iDirFltDiffThresHigh
+	{0x0F12, 0x3040},	//70000C9A AFIT8_bnr_iDirFltDiffThresLow   [7:0] AFIT8_bnr_iDirSmoothPowerHigh
+	{0x0F12, 0x0630},	//70000C9C AFIT8_bnr_iDirSmoothPowerLow   [7:0] AFIT8_bnr_iLowMaxSlopeAllowed
+	{0x0F12, 0x0306},	//70000C9E AFIT8_bnr_iHighMaxSlopeAllowed	[7:0] AFIT8_bnr_iLowSlopeThresh
+	{0x0F12, 0x2003},	//70000CA0 AFIT8_bnr_iHighSlopeThresh	[7:0] AFIT8_bnr_iSlopenessTH
+	{0x0F12, 0xFF01},	//70000CA2 AFIT8_bnr_iSlopeBlurStrength   [7:0] AFIT8_bnr_iSlopenessLimit
+	{0x0F12, 0x0404},	//70000CA4 AFIT8_bnr_AddNoisePower1   [7:0] AFIT8_bnr_AddNoisePower2
+	{0x0F12, 0x0300},	//70000CA6 AFIT8_bnr_iRadialTune   [7:0] AFIT8_bnr_iRadialPower
+	{0x0F12, 0x245A},	//70000CA8 AFIT8_bnr_iRadialLimit	[7:0] AFIT8_ee_iFSMagThLow
+	{0x0F12, 0x1018},	//70000CAA AFIT8_ee_iFSMagThHigh   [7:0] AFIT8_ee_iFSVarThLow
+	{0x0F12, 0x000B},	//70000CAC AFIT8_ee_iFSVarThHigh   [7:0] AFIT8_ee_iFSThLow
+	{0x0F12, 0x0B00},	//70000CAE AFIT8_ee_iFSThHigh	[7:0] AFIT8_ee_iFSmagPower
+	{0x0F12, 0x5A0F},	//70000CB0 AFIT8_ee_iFSVarCountTh	[7:0] AFIT8_ee_iRadialLimit
+	{0x0F12, 0x0505},	//70000CB2 AFIT8_ee_iRadialPower   [7:0] AFIT8_ee_iSmoothEdgeSlope
+	{0x0F12, 0x1802},	//70000CB4 AFIT8_ee_iROADThres	 [7:0] AFIT8_ee_iROADMaxNR
+	{0x0F12, 0x0000},	//70000CB6 AFIT8_ee_iROADSubMaxNR	[7:0] AFIT8_ee_iROADSubThres
+	{0x0F12, 0x2006},	//70000CB8 AFIT8_ee_iROADNeiThres	[7:0] AFIT8_ee_iROADNeiMaxNR
+	{0x0F12, 0x3428},	//70000CBA AFIT8_ee_iSmoothEdgeThres   [7:0] AFIT8_ee_iMSharpen
+	{0x0F12, 0x041C},	//70000CBC AFIT8_ee_iWSharpen	[7:0] AFIT8_ee_iMShThresh
+	{0x0F12, 0x0101},	//70000CBE AFIT8_ee_iWShThresh	 [7:0] AFIT8_ee_iReduceNegative
+	{0x0F12, 0x0800},	//70000CC0 AFIT8_ee_iEmbossCentAdd	 [7:0] AFIT8_ee_iShDespeckle
+	{0x0F12, 0x1004},	//70000CC2 AFIT8_ee_iReduceEdgeThresh	[7:0] AFIT8_dmsc_iEnhThresh
+	{0x0F12, 0x4008},	//70000CC4 AFIT8_dmsc_iDesatThresh	 [7:0] AFIT8_dmsc_iDemBlurHigh
+	{0x0F12, 0x0540},	//70000CC6 AFIT8_dmsc_iDemBlurLow	[7:0] AFIT8_dmsc_iDemBlurRange
+	{0x0F12, 0x8006},	//70000CC8 AFIT8_dmsc_iDecisionThresh	[7:0] AFIT8_dmsc_iCentGrad
+	{0x0F12, 0x0020},	//70000CCA AFIT8_dmsc_iMonochrom   [7:0] AFIT8_dmsc_iGBDenoiseVal
+	{0x0F12, 0x0000},	//70000CCC AFIT8_dmsc_iGRDenoiseVal   [7:0] AFIT8_dmsc_iEdgeDesatThrHigh
+	{0x0F12, 0x1800},	//70000CCE AFIT8_dmsc_iEdgeDesatThrLow	 [7:0] AFIT8_dmsc_iEdgeDesat
+	{0x0F12, 0x0000},	//70000CD0 AFIT8_dmsc_iNearGrayDesat   [7:0] AFIT8_dmsc_iEdgeDesatLimit
+	{0x0F12, 0x1E10},	//70000CD2 AFIT8_postdmsc_iBCoeff	[7:0] AFIT8_postdmsc_iGCoeff
+	{0x0F12, 0x000B},	//70000CD4 AFIT8_postdmsc_iWideMult   [7:0] AFIT8_yuvemix_mNegSlopes_0
+	{0x0F12, 0x0607},	//70000CD6 AFIT8_yuvemix_mNegSlopes_1	[7:0] AFIT8_yuvemix_mNegSlopes_2
+	{0x0F12, 0x0005},	//70000CD8 AFIT8_yuvemix_mNegSlopes_3	[7:0] AFIT8_yuvemix_mPosSlopes_0
+	{0x0F12, 0x0607},	//70000CDA AFIT8_yuvemix_mPosSlopes_1	[7:0] AFIT8_yuvemix_mPosSlopes_2
+	{0x0F12, 0x0405},	//70000CDC AFIT8_yuvemix_mPosSlopes_3	[7:0] AFIT8_yuviirnr_iXSupportY
+	{0x0F12, 0x0205},	//70000CDE AFIT8_yuviirnr_iXSupportUV	[7:0] AFIT8_yuviirnr_iLowYNorm
+	{0x0F12, 0x0304},	//70000CE0 AFIT8_yuviirnr_iHighYNorm   [7:0] AFIT8_yuviirnr_iLowUVNorm
+	{0x0F12, 0x0409},	//70000CE2 AFIT8_yuviirnr_iHighUVNorm	[7:0] AFIT8_yuviirnr_iYNormShift
+	{0x0F12, 0x0306},	//70000CE4 AFIT8_yuviirnr_iUVNormShift	 [7:0] AFIT8_yuviirnr_iVertLength_Y
+	{0x0F12, 0x0407},	//70000CE6 AFIT8_yuviirnr_iVertLength_UV   [7:0] AFIT8_yuviirnr_iDiffThreshL_Y
+	{0x0F12, 0x1804},	//70000CE8 AFIT8_yuviirnr_iDiffThreshH_Y   [7:0] AFIT8_yuviirnr_iDiffThreshL_UV
+	{0x0F12, 0x0214},	//70000CEA AFIT8_yuviirnr_iDiffThreshH_UV	[7:0] AFIT8_yuviirnr_iMaxThreshL_Y
+	{0x0F12, 0x1002},	//70000CEC AFIT8_yuviirnr_iMaxThreshH_Y   [7:0] AFIT8_yuviirnr_iMaxThreshL_UV
+	{0x0F12, 0x0610},	//70000CEE AFIT8_yuviirnr_iMaxThreshH_UV   [7:0] AFIT8_yuviirnr_iYNRStrengthL
+	{0x0F12, 0x1A02},	//70000CF0 AFIT8_yuviirnr_iYNRStrengthH   [7:0] AFIT8_yuviirnr_iUVNRStrengthL
+	{0x0F12, 0x4A18},	//70000CF2 AFIT8_yuviirnr_iUVNRStrengthH   [7:0] AFIT8_byr_gras_iShadingPower
+	{0x0F12, 0x00B0},	//70000CF4 AFIT8_RGBGamma2_iLinearity	[7:0] AFIT8_RGBGamma2_iDarkReduce
+	{0x0F12, 0x1080},	//70000CF6 AFIT8_ccm_oscar_iSaturation	 [7:0] AFIT8_RGB2YUV_iYOffset
+	{0x0F12, 0x0180},	//70000CF8 AFIT8_RGB2YUV_iRGBGain	[7:0] AFIT8_bnr_nClustLevel_H
+	{0x0F12, 0x0A0A},	//70000CFA AFIT8_bnr_iClustMulT_H	[7:0] AFIT8_bnr_iClustMulT_C
+	{0x0F12, 0x0101},	//70000CFC AFIT8_bnr_iClustThresh_H   [7:0] AFIT8_bnr_iClustThresh_C
+	{0x0F12, 0x1B24},	//70000CFE AFIT8_bnr_iDenThreshLow	 [7:0] AFIT8_bnr_iDenThreshHigh
+	{0x0F12, 0x6024},	//70000D00 AFIT8_ee_iLowSharpPower	 [7:0] AFIT8_ee_iHighSharpPower
+	{0x0F12, 0x1D22},	//70000D02 AFIT8_ee_iLowShDenoise	[7:0] AFIT8_ee_iHighShDenoise
+	{0x0F12, 0xFFFF},	//70000D04 AFIT8_ee_iLowSharpClamp	 [7:0] AFIT8_ee_iHighSharpClamp
+	{0x0F12, 0x0808},	//70000D06 AFIT8_ee_iReduceEdgeMinMult	 [7:0] AFIT8_ee_iReduceEdgeSlope
+	{0x0F12, 0x0A01},	//70000D08 AFIT8_bnr_nClustLevel_H_Bin	 [7:0] AFIT8_bnr_iClustMulT_H_Bin
+	{0x0F12, 0x010A},	//70000D0A AFIT8_bnr_iClustMulT_C_Bin	[7:0] AFIT8_bnr_iClustThresh_H_Bin
+	{0x0F12, 0x2401},	//70000D0C AFIT8_bnr_iClustThresh_C_Bin   [7:0] AFIT8_bnr_iDenThreshLow_Bin
+	{0x0F12, 0x241B},	//70000D0E AFIT8_bnr_iDenThreshHigh_Bin   [7:0] AFIT8_ee_iLowSharpPower_Bin
+	{0x0F12, 0x1E60},	//70000D10 AFIT8_ee_iHighSharpPower_Bin   [7:0] AFIT8_ee_iLowShDenoise_Bin
+	{0x0F12, 0xFF18},	//70000D12 AFIT8_ee_iHighShDenoise_Bin	 [7:0] AFIT8_ee_iLowSharpClamp_Bin
+	{0x0F12, 0x08FF},	//70000D14 AFIT8_ee_iHighSharpClamp_Bin   [7:0] AFIT8_ee_iReduceEdgeMinMult_Bin
+	{0x0F12, 0x0008},	//70000D16 AFIT8_ee_iReduceEdgeSlope_Bin [7:0]
+	{0x0F12, 0x0001},	//70000D18 AFITB_bnr_nClustLevel_C		[0]   bWideWide[1]
+	{0x0F12, 0x0000},	//70000C64 AFIT16_BRIGHTNESS
+	{0x0F12, 0x0000},	//70000C66 AFIT16_CONTRAST
+	{0x0F12, 0x0000},	//70000C68 AFIT16_SATURATION
+	{0x0F12, 0x0000},	//70000C6A AFIT16_SHARP_BLUR
+	{0x0F12, 0x0000},	//70000C6C AFIT16_GLAMOUR
+	{0x0F12, 0x00C0},	//70000C6E AFIT16_bnr_edge_high
+	{0x0F12, 0x0064},	//70000C70 AFIT16_postdmsc_iLowBright
+	{0x0F12, 0x0384},	//70000C72 AFIT16_postdmsc_iHighBright
+	{0x0F12, 0x0051},	//70000C74 AFIT16_postdmsc_iLowSat
+	{0x0F12, 0x01F4},	//70000C76 AFIT16_postdmsc_iHighSat
+	{0x0F12, 0x0070},	//70000C78 AFIT16_postdmsc_iTune
+	{0x0F12, 0x0040},	//70000C7A AFIT16_yuvemix_mNegRanges_0
+	{0x0F12, 0x00A0},	//70000C7C AFIT16_yuvemix_mNegRanges_1
+	{0x0F12, 0x0100},	//70000C7E AFIT16_yuvemix_mNegRanges_2
+	{0x0F12, 0x0010},	//70000C80 AFIT16_yuvemix_mPosRanges_0
+	{0x0F12, 0x0060},	//70000C82 AFIT16_yuvemix_mPosRanges_1
+	{0x0F12, 0x0100},	//70000C84 AFIT16_yuvemix_mPosRanges_2
+	{0x0F12, 0x1430},	//70000C86 AFIT8_bnr_edge_low  [7:0] AFIT8_bnr_repl_thresh
+	{0x0F12, 0x0201},	//70000C88 AFIT8_bnr_repl_force  [7:0] AFIT8_bnr_iHotThreshHigh
+	{0x0F12, 0x0204},	//70000C8A AFIT8_bnr_iHotThreshLow	 [7:0] AFIT8_bnr_iColdThreshHigh
+	{0x0F12, 0x1B04},	//70000C8C AFIT8_bnr_iColdThreshLow   [7:0] AFIT8_bnr_DispTH_Low
+	{0x0F12, 0x0312},	//70000C8E AFIT8_bnr_DispTH_High   [7:0] AFIT8_bnr_DISP_Limit_Low
+	{0x0F12, 0x0003},	//70000C90 AFIT8_bnr_DISP_Limit_High   [7:0] AFIT8_bnr_iDistSigmaMin
+	{0x0F12, 0x0C03},	//70000C92 AFIT8_bnr_iDistSigmaMax	 [7:0] AFIT8_bnr_iDiffSigmaLow
+	{0x0F12, 0x2806},	//70000C94 AFIT8_bnr_iDiffSigmaHigh   [7:0] AFIT8_bnr_iNormalizedSTD_TH
+	{0x0F12, 0x0060},	//70000C96 AFIT8_bnr_iNormalizedSTD_Limit	[7:0] AFIT8_bnr_iDirNRTune
+	{0x0F12, 0x1540},	//70000C98 AFIT8_bnr_iDirMinThres	[7:0] AFIT8_bnr_iDirFltDiffThresHigh
+	{0x0F12, 0x201C},	//70000C9A AFIT8_bnr_iDirFltDiffThresLow   [7:0] AFIT8_bnr_iDirSmoothPowerHigh
+	{0x0F12, 0x0620},	//70000C9C AFIT8_bnr_iDirSmoothPowerLow   [7:0] AFIT8_bnr_iLowMaxSlopeAllowed
+	{0x0F12, 0x0306},	//70000C9E AFIT8_bnr_iHighMaxSlopeAllowed	[7:0] AFIT8_bnr_iLowSlopeThresh
+	{0x0F12, 0x2003},	//70000CA0 AFIT8_bnr_iHighSlopeThresh	[7:0] AFIT8_bnr_iSlopenessTH
+	{0x0F12, 0xFF01},	//70000CA2 AFIT8_bnr_iSlopeBlurStrength   [7:0] AFIT8_bnr_iSlopenessLimit
+	{0x0F12, 0x0404},	//70000CA4 AFIT8_bnr_AddNoisePower1   [7:0] AFIT8_bnr_AddNoisePower2
+	{0x0F12, 0x0300},	//70000CA6 AFIT8_bnr_iRadialTune   [7:0] AFIT8_bnr_iRadialPower
+	{0x0F12, 0x145A},	//70000CA8 AFIT8_bnr_iRadialLimit	[7:0] AFIT8_ee_iFSMagThLow
+	{0x0F12, 0x1010},	//70000CAA AFIT8_ee_iFSMagThHigh   [7:0] AFIT8_ee_iFSVarThLow
+	{0x0F12, 0x000B},	//70000CAC AFIT8_ee_iFSVarThHigh   [7:0] AFIT8_ee_iFSThLow
+	{0x0F12, 0x0B00},	//70000CAE AFIT8_ee_iFSThHigh	[7:0] AFIT8_ee_iFSmagPower
+	{0x0F12, 0x5A0F},	//70000CB0 AFIT8_ee_iFSVarCountTh	[7:0] AFIT8_ee_iRadialLimit
+	{0x0F12, 0x0503},	//70000CB2 AFIT8_ee_iRadialPower   [7:0] AFIT8_ee_iSmoothEdgeSlope
+	{0x0F12, 0x1802},	//70000CB4 AFIT8_ee_iROADThres	 [7:0] AFIT8_ee_iROADMaxNR
+	{0x0F12, 0x0000},	//70000CB6 AFIT8_ee_iROADSubMaxNR	[7:0] AFIT8_ee_iROADSubThres
+	{0x0F12, 0x2006},	//70000CB8 AFIT8_ee_iROADNeiThres	[7:0] AFIT8_ee_iROADNeiMaxNR
+	{0x0F12, 0x3C28},	//70000CBA AFIT8_ee_iSmoothEdgeThres   [7:0] AFIT8_ee_iMSharpen
+	{0x0F12, 0x0428},	//70000CBC AFIT8_ee_iWSharpen	[7:0] AFIT8_ee_iMShThresh
+	{0x0F12, 0x0101},	//70000CBE AFIT8_ee_iWShThresh	 [7:0] AFIT8_ee_iReduceNegative
+	{0x0F12, 0x8000},	//70000CC0 AFIT8_ee_iEmbossCentAdd	 [7:0] AFIT8_ee_iShDespeckle
+	{0x0F12, 0x1004},	//70000CC2 AFIT8_ee_iReduceEdgeThresh	[7:0] AFIT8_dmsc_iEnhThresh
+	{0x0F12, 0x4008},	//70000CC4 AFIT8_dmsc_iDesatThresh	 [7:0] AFIT8_dmsc_iDemBlurHigh
+	{0x0F12, 0x0540},	//70000CC6 AFIT8_dmsc_iDemBlurLow	[7:0] AFIT8_dmsc_iDemBlurRange
+	{0x0F12, 0x8006},	//70000CC8 AFIT8_dmsc_iDecisionThresh	[7:0] AFIT8_dmsc_iCentGrad
+	{0x0F12, 0x0020},	//70000CCA AFIT8_dmsc_iMonochrom   [7:0] AFIT8_dmsc_iGBDenoiseVal
+	{0x0F12, 0x0000},	//70000CCC AFIT8_dmsc_iGRDenoiseVal   [7:0] AFIT8_dmsc_iEdgeDesatThrHigh
+	{0x0F12, 0x1800},	//70000CCE AFIT8_dmsc_iEdgeDesatThrLow	 [7:0] AFIT8_dmsc_iEdgeDesat
+	{0x0F12, 0x0000},	//70000CD0 AFIT8_dmsc_iNearGrayDesat   [7:0] AFIT8_dmsc_iEdgeDesatLimit
+	{0x0F12, 0x1E10},	//70000CD2 AFIT8_postdmsc_iBCoeff	[7:0] AFIT8_postdmsc_iGCoeff
+	{0x0F12, 0x000B},	//70000CD4 AFIT8_postdmsc_iWideMult   [7:0] AFIT8_yuvemix_mNegSlopes_0
+	{0x0F12, 0x0607},	//70000CD6 AFIT8_yuvemix_mNegSlopes_1	[7:0] AFIT8_yuvemix_mNegSlopes_2
+	{0x0F12, 0x0005},	//70000CD8 AFIT8_yuvemix_mNegSlopes_3	[7:0] AFIT8_yuvemix_mPosSlopes_0
+	{0x0F12, 0x0607},	//70000CDA AFIT8_yuvemix_mPosSlopes_1	[7:0] AFIT8_yuvemix_mPosSlopes_2
+	{0x0F12, 0x0405},	//70000CDC AFIT8_yuvemix_mPosSlopes_3	[7:0] AFIT8_yuviirnr_iXSupportY
+	{0x0F12, 0x0205},	//70000CDE AFIT8_yuviirnr_iXSupportUV	[7:0] AFIT8_yuviirnr_iLowYNorm
+	{0x0F12, 0x0304},	//70000CE0 AFIT8_yuviirnr_iHighYNorm   [7:0] AFIT8_yuviirnr_iLowUVNorm
+	{0x0F12, 0x0409},	//70000CE2 AFIT8_yuviirnr_iHighUVNorm	[7:0] AFIT8_yuviirnr_iYNormShift
+	{0x0F12, 0x0306},	//70000CE4 AFIT8_yuviirnr_iUVNormShift	 [7:0] AFIT8_yuviirnr_iVertLength_Y
+	{0x0F12, 0x0407},	//70000CE6 AFIT8_yuviirnr_iVertLength_UV   [7:0] AFIT8_yuviirnr_iDiffThreshL_Y
+	{0x0F12, 0x1804},	//70000CE8 AFIT8_yuviirnr_iDiffThreshH_Y   [7:0] AFIT8_yuviirnr_iDiffThreshL_UV
+	{0x0F12, 0x0214},	//70000CEA AFIT8_yuviirnr_iDiffThreshH_UV	[7:0] AFIT8_yuviirnr_iMaxThreshL_Y
+	{0x0F12, 0x1002},	//70000CEC AFIT8_yuviirnr_iMaxThreshH_Y   [7:0] AFIT8_yuviirnr_iMaxThreshL_UV
+	{0x0F12, 0x0610},	//70000CEE AFIT8_yuviirnr_iMaxThreshH_UV   [7:0] AFIT8_yuviirnr_iYNRStrengthL
+	{0x0F12, 0x1A02},	//70000CF0 AFIT8_yuviirnr_iYNRStrengthH   [7:0] AFIT8_yuviirnr_iUVNRStrengthL
+	{0x0F12, 0x8018},	//70000CF2 AFIT8_yuviirnr_iUVNRStrengthH   [7:0] AFIT8_byr_gras_iShadingPower
+	{0x0F12, 0x00A0},	//70000CF4 AFIT8_RGBGamma2_iLinearity	[7:0] AFIT8_RGBGamma2_iDarkReduce
+	{0x0F12, 0x1080},	//70000CF6 AFIT8_ccm_oscar_iSaturation	 [7:0] AFIT8_RGB2YUV_iYOffset
+	{0x0F12, 0x0180},	//70000CF8 AFIT8_RGB2YUV_iRGBGain	[7:0] AFIT8_bnr_nClustLevel_H
+	{0x0F12, 0x0A0A},	//70000CFA AFIT8_bnr_iClustMulT_H	[7:0] AFIT8_bnr_iClustMulT_C
+	{0x0F12, 0x0101},	//70000CFC AFIT8_bnr_iClustThresh_H   [7:0] AFIT8_bnr_iClustThresh_C
+	{0x0F12, 0x1B24},	//70000CFE AFIT8_bnr_iDenThreshLow	 [7:0] AFIT8_bnr_iDenThreshHigh
+	{0x0F12, 0x6024},	//70000D00 AFIT8_ee_iLowSharpPower	 [7:0] AFIT8_ee_iHighSharpPower
+	{0x0F12, 0x0C0C},	//70000D02 AFIT8_ee_iLowShDenoise	[7:0] AFIT8_ee_iHighShDenoise
+	{0x0F12, 0xFFFF},	//70000D04 AFIT8_ee_iLowSharpClamp	 [7:0] AFIT8_ee_iHighSharpClamp
+	{0x0F12, 0x0808},	//70000D06 AFIT8_ee_iReduceEdgeMinMult	 [7:0] AFIT8_ee_iReduceEdgeSlope
+	{0x0F12, 0x0A01},	//70000D08 AFIT8_bnr_nClustLevel_H_Bin	 [7:0] AFIT8_bnr_iClustMulT_H_Bin
+	{0x0F12, 0x010A},	//70000D0A AFIT8_bnr_iClustMulT_C_Bin	[7:0] AFIT8_bnr_iClustThresh_H_Bin
+	{0x0F12, 0x1501},	//70000D0C AFIT8_bnr_iClustThresh_C_Bin   [7:0] AFIT8_bnr_iDenThreshLow_Bin
+	{0x0F12, 0x240F},	//70000D0E AFIT8_bnr_iDenThreshHigh_Bin   [7:0] AFIT8_ee_iLowSharpPower_Bin
+	{0x0F12, 0x0C60},	//70000D10 AFIT8_ee_iHighSharpPower_Bin   [7:0] AFIT8_ee_iLowShDenoise_Bin
+	{0x0F12, 0xFF0C},	//70000D12 AFIT8_ee_iHighShDenoise_Bin	 [7:0] AFIT8_ee_iLowSharpClamp_Bin
+	{0x0F12, 0x08FF},	//70000D14 AFIT8_ee_iHighSharpClamp_Bin   [7:0] AFIT8_ee_iReduceEdgeMinMult_Bin
+	{0x0F12, 0x0008},	//70000D16 AFIT8_ee_iReduceEdgeSlope_Bin [7:0]
+	{0x0F12, 0x0001},	//70000D18 AFITB_bnr_nClustLevel_C		[0]   bWideWide[1]
+	{0x0F12, 0x0000},	//70000C64 AFIT16_BRIGHTNESS
+	{0x0F12, 0x0000},	//70000C66 AFIT16_CONTRAST
+	{0x0F12, 0x0000},	//70000C68 AFIT16_SATURATION
+	{0x0F12, 0x0000},	//70000C6A AFIT16_SHARP_BLUR
+	{0x0F12, 0x0000},	//70000C6C AFIT16_GLAMOUR
+	{0x0F12, 0x00C0},	//70000C6E AFIT16_bnr_edge_high
+	{0x0F12, 0x0064},	//70000C70 AFIT16_postdmsc_iLowBright
+	{0x0F12, 0x0384},	//70000C72 AFIT16_postdmsc_iHighBright
+	{0x0F12, 0x0043},	//70000C74 AFIT16_postdmsc_iLowSat
+	{0x0F12, 0x01F4},	//70000C76 AFIT16_postdmsc_iHighSat
+	{0x0F12, 0x0070},	//70000C78 AFIT16_postdmsc_iTune
+	{0x0F12, 0x0040},	//70000C7A AFIT16_yuvemix_mNegRanges_0
+	{0x0F12, 0x00A0},	//70000C7C AFIT16_yuvemix_mNegRanges_1
+	{0x0F12, 0x0100},	//70000C7E AFIT16_yuvemix_mNegRanges_2
+	{0x0F12, 0x0010},	//70000C80 AFIT16_yuvemix_mPosRanges_0
+	{0x0F12, 0x0060},	//70000C82 AFIT16_yuvemix_mPosRanges_1
+	{0x0F12, 0x0100},	//70000C84 AFIT16_yuvemix_mPosRanges_2
+	{0x0F12, 0x1430},	//70000C86 AFIT8_bnr_edge_low  [7:0] AFIT8_bnr_repl_thresh
+	{0x0F12, 0x0201},	//70000C88 AFIT8_bnr_repl_force  [7:0] AFIT8_bnr_iHotThreshHigh
+	{0x0F12, 0x0204},	//70000C8A AFIT8_bnr_iHotThreshLow	 [7:0] AFIT8_bnr_iColdThreshHigh
+	{0x0F12, 0x1B04},	//70000C8C AFIT8_bnr_iColdThreshLow   [7:0] AFIT8_bnr_DispTH_Low
+	{0x0F12, 0x0312},	//70000C8E AFIT8_bnr_DispTH_High   [7:0] AFIT8_bnr_DISP_Limit_Low
+	{0x0F12, 0x0003},	//70000C90 AFIT8_bnr_DISP_Limit_High   [7:0] AFIT8_bnr_iDistSigmaMin
+	{0x0F12, 0x0C03},	//70000C92 AFIT8_bnr_iDistSigmaMax	 [7:0] AFIT8_bnr_iDiffSigmaLow
+	{0x0F12, 0x2806},	//70000C94 AFIT8_bnr_iDiffSigmaHigh   [7:0] AFIT8_bnr_iNormalizedSTD_TH
+	{0x0F12, 0x0060},	//70000C96 AFIT8_bnr_iNormalizedSTD_Limit	[7:0] AFIT8_bnr_iDirNRTune
+	{0x0F12, 0x1540},	//70000C98 AFIT8_bnr_iDirMinThres	[7:0] AFIT8_bnr_iDirFltDiffThresHigh
+	{0x0F12, 0x201C},	//70000C9A AFIT8_bnr_iDirFltDiffThresLow   [7:0] AFIT8_bnr_iDirSmoothPowerHigh
+	{0x0F12, 0x0620},	//70000C9C AFIT8_bnr_iDirSmoothPowerLow   [7:0] AFIT8_bnr_iLowMaxSlopeAllowed
+	{0x0F12, 0x0306},	//70000C9E AFIT8_bnr_iHighMaxSlopeAllowed	[7:0] AFIT8_bnr_iLowSlopeThresh
+	{0x0F12, 0x2003},	//70000CA0 AFIT8_bnr_iHighSlopeThresh	[7:0] AFIT8_bnr_iSlopenessTH
+	{0x0F12, 0xFF01},	//70000CA2 AFIT8_bnr_iSlopeBlurStrength   [7:0] AFIT8_bnr_iSlopenessLimit
+	{0x0F12, 0x0404},	//70000CA4 AFIT8_bnr_AddNoisePower1   [7:0] AFIT8_bnr_AddNoisePower2
+	{0x0F12, 0x0300},	//70000CA6 AFIT8_bnr_iRadialTune   [7:0] AFIT8_bnr_iRadialPower
+	{0x0F12, 0x145A},	//70000CA8 AFIT8_bnr_iRadialLimit	[7:0] AFIT8_ee_iFSMagThLow
+	{0x0F12, 0x1010},	//70000CAA AFIT8_ee_iFSMagThHigh   [7:0] AFIT8_ee_iFSVarThLow
+	{0x0F12, 0x000B},	//70000CAC AFIT8_ee_iFSVarThHigh   [7:0] AFIT8_ee_iFSThLow
+	{0x0F12, 0x0E00},	//70000CAE AFIT8_ee_iFSThHigh	[7:0] AFIT8_ee_iFSmagPower
+	{0x0F12, 0x5A0F},	//70000CB0 AFIT8_ee_iFSVarCountTh	[7:0] AFIT8_ee_iRadialLimit
+	{0x0F12, 0x0503},	//70000CB2 AFIT8_ee_iRadialPower   [7:0] AFIT8_ee_iSmoothEdgeSlope
+	{0x0F12, 0x1802},	//70000CB4 AFIT8_ee_iROADThres	 [7:0] AFIT8_ee_iROADMaxNR
+	{0x0F12, 0x0000},	//70000CB6 AFIT8_ee_iROADSubMaxNR	[7:0] AFIT8_ee_iROADSubThres
+	{0x0F12, 0x2006},	//70000CB8 AFIT8_ee_iROADNeiThres	[7:0] AFIT8_ee_iROADNeiMaxNR
+	{0x0F12, 0x3C28},	//70000CBA AFIT8_ee_iSmoothEdgeThres   [7:0] AFIT8_ee_iMSharpen
+	{0x0F12, 0x0428},	//70000CBC AFIT8_ee_iWSharpen	[7:0] AFIT8_ee_iMShThresh
+	{0x0F12, 0x0101},	//70000CBE AFIT8_ee_iWShThresh	 [7:0] AFIT8_ee_iReduceNegative
+	{0x0F12, 0x8000},	//70000CC0 AFIT8_ee_iEmbossCentAdd	 [7:0] AFIT8_ee_iShDespeckle
+	{0x0F12, 0x0A04},	//70000CC2 AFIT8_ee_iReduceEdgeThresh	[7:0] AFIT8_dmsc_iEnhThresh
+	{0x0F12, 0x4008},	//70000CC4 AFIT8_dmsc_iDesatThresh	 [7:0] AFIT8_dmsc_iDemBlurHigh
+	{0x0F12, 0x0540},	//70000CC6 AFIT8_dmsc_iDemBlurLow	[7:0] AFIT8_dmsc_iDemBlurRange
+	{0x0F12, 0x8006},	//70000CC8 AFIT8_dmsc_iDecisionThresh	[7:0] AFIT8_dmsc_iCentGrad
+	{0x0F12, 0x0020},	//70000CCA AFIT8_dmsc_iMonochrom   [7:0] AFIT8_dmsc_iGBDenoiseVal
+	{0x0F12, 0x0000},	//70000CCC AFIT8_dmsc_iGRDenoiseVal   [7:0] AFIT8_dmsc_iEdgeDesatThrHigh
+	{0x0F12, 0x1800},	//70000CCE AFIT8_dmsc_iEdgeDesatThrLow	 [7:0] AFIT8_dmsc_iEdgeDesat
+	{0x0F12, 0x0000},	//70000CD0 AFIT8_dmsc_iNearGrayDesat   [7:0] AFIT8_dmsc_iEdgeDesatLimit
+	{0x0F12, 0x1E10},	//70000CD2 AFIT8_postdmsc_iBCoeff	[7:0] AFIT8_postdmsc_iGCoeff
+	{0x0F12, 0x000B},	//70000CD4 AFIT8_postdmsc_iWideMult   [7:0] AFIT8_yuvemix_mNegSlopes_0
+	{0x0F12, 0x0607},	//70000CD6 AFIT8_yuvemix_mNegSlopes_1	[7:0] AFIT8_yuvemix_mNegSlopes_2
+	{0x0F12, 0x0005},	//70000CD8 AFIT8_yuvemix_mNegSlopes_3	[7:0] AFIT8_yuvemix_mPosSlopes_0
+	{0x0F12, 0x0607},	//70000CDA AFIT8_yuvemix_mPosSlopes_1	[7:0] AFIT8_yuvemix_mPosSlopes_2
+	{0x0F12, 0x0405},	//70000CDC AFIT8_yuvemix_mPosSlopes_3	[7:0] AFIT8_yuviirnr_iXSupportY
+	{0x0F12, 0x0205},	//70000CDE AFIT8_yuviirnr_iXSupportUV	[7:0] AFIT8_yuviirnr_iLowYNorm
+	{0x0F12, 0x0304},	//70000CE0 AFIT8_yuviirnr_iHighYNorm   [7:0] AFIT8_yuviirnr_iLowUVNorm
+	{0x0F12, 0x0409},	//70000CE2 AFIT8_yuviirnr_iHighUVNorm	[7:0] AFIT8_yuviirnr_iYNormShift
+	{0x0F12, 0x0306},	//70000CE4 AFIT8_yuviirnr_iUVNormShift	 [7:0] AFIT8_yuviirnr_iVertLength_Y
+	{0x0F12, 0x0407},	//70000CE6 AFIT8_yuviirnr_iVertLength_UV   [7:0] AFIT8_yuviirnr_iDiffThreshL_Y
+	{0x0F12, 0x1804},	//70000CE8 AFIT8_yuviirnr_iDiffThreshH_Y   [7:0] AFIT8_yuviirnr_iDiffThreshL_UV
+	{0x0F12, 0x0214},	//70000CEA AFIT8_yuviirnr_iDiffThreshH_UV	[7:0] AFIT8_yuviirnr_iMaxThreshL_Y
+	{0x0F12, 0x1002},	//70000CEC AFIT8_yuviirnr_iMaxThreshH_Y   [7:0] AFIT8_yuviirnr_iMaxThreshL_UV
+	{0x0F12, 0x0610},	//70000CEE AFIT8_yuviirnr_iMaxThreshH_UV   [7:0] AFIT8_yuviirnr_iYNRStrengthL
+	{0x0F12, 0x1A02},	//70000CF0 AFIT8_yuviirnr_iYNRStrengthH   [7:0] AFIT8_yuviirnr_iUVNRStrengthL
+	{0x0F12, 0x8018},	//70000CF2 AFIT8_yuviirnr_iUVNRStrengthH   [7:0] AFIT8_byr_gras_iShadingPower
+	{0x0F12, 0x0080},	//70000CF4 AFIT8_RGBGamma2_iLinearity	[7:0] AFIT8_RGBGamma2_iDarkReduce
+	{0x0F12, 0x1080},	//70000CF6 AFIT8_ccm_oscar_iSaturation	 [7:0] AFIT8_RGB2YUV_iYOffset
+	{0x0F12, 0x0180},	//70000CF8 AFIT8_RGB2YUV_iRGBGain	[7:0] AFIT8_bnr_nClustLevel_H
+	{0x0F12, 0x0A0A},	//70000CFA AFIT8_bnr_iClustMulT_H	[7:0] AFIT8_bnr_iClustMulT_C
+	{0x0F12, 0x0101},	//70000CFC AFIT8_bnr_iClustThresh_H   [7:0] AFIT8_bnr_iClustThresh_C
+	{0x0F12, 0x141D},	//70000CFE AFIT8_bnr_iDenThreshLow	 [7:0] AFIT8_bnr_iDenThreshHigh
+	{0x0F12, 0x6024},	//70000D00 AFIT8_ee_iLowSharpPower	 [7:0] AFIT8_ee_iHighSharpPower
+	{0x0F12, 0x0C0C},	//70000D02 AFIT8_ee_iLowShDenoise	[7:0] AFIT8_ee_iHighShDenoise
+	{0x0F12, 0xFFFF},	//70000D04 AFIT8_ee_iLowSharpClamp	 [7:0] AFIT8_ee_iHighSharpClamp
+	{0x0F12, 0x0808},	//70000D06 AFIT8_ee_iReduceEdgeMinMult	 [7:0] AFIT8_ee_iReduceEdgeSlope
+	{0x0F12, 0x0A01},	//70000D08 AFIT8_bnr_nClustLevel_H_Bin	 [7:0] AFIT8_bnr_iClustMulT_H_Bin
+	{0x0F12, 0x010A},	//70000D0A AFIT8_bnr_iClustMulT_C_Bin	[7:0] AFIT8_bnr_iClustThresh_H_Bin
+	{0x0F12, 0x1501},	//70000D0C AFIT8_bnr_iClustThresh_C_Bin   [7:0] AFIT8_bnr_iDenThreshLow_Bin
+	{0x0F12, 0x240F},	//70000D0E AFIT8_bnr_iDenThreshHigh_Bin   [7:0] AFIT8_ee_iLowSharpPower_Bin
+	{0x0F12, 0x0C60},	//70000D10 AFIT8_ee_iHighSharpPower_Bin   [7:0] AFIT8_ee_iLowShDenoise_Bin
+	{0x0F12, 0xFF0C},	//70000D12 AFIT8_ee_iHighShDenoise_Bin	 [7:0] AFIT8_ee_iLowSharpClamp_Bin
+	{0x0F12, 0x08FF},	//70000D14 AFIT8_ee_iHighSharpClamp_Bin   [7:0] AFIT8_ee_iReduceEdgeMinMult_Bin
+	{0x0F12, 0x0008},	//70000D16 AFIT8_ee_iReduceEdgeSlope_Bin [7:0]
+	{0x0F12, 0x0001},	//70000D18 AFITB_bnr_nClustLevel_C		[0]   bWideWide[1]
+	{0x0F12, 0x0000},	//70000C64 AFIT16_BRIGHTNESS
+	{0x0F12, 0x0000},	//70000C66 AFIT16_CONTRAST
+	{0x0F12, 0x0000},	//70000C68 AFIT16_SATURATION
+	{0x0F12, 0x0000},	//70000C6A AFIT16_SHARP_BLUR
+	{0x0F12, 0x0000},	//70000C6C AFIT16_GLAMOUR
+	{0x0F12, 0x00C0},	//70000C6E AFIT16_bnr_edge_high
+	{0x0F12, 0x0064},	//70000C70 AFIT16_postdmsc_iLowBright
+	{0x0F12, 0x0384},	//70000C72 AFIT16_postdmsc_iHighBright
+	{0x0F12, 0x0032},	//70000C74 AFIT16_postdmsc_iLowSat
+	{0x0F12, 0x01F4},	//70000C76 AFIT16_postdmsc_iHighSat
+	{0x0F12, 0x0070},	//70000C78 AFIT16_postdmsc_iTune
+	{0x0F12, 0x0040},	//70000C7A AFIT16_yuvemix_mNegRanges_0
+	{0x0F12, 0x00A0},	//70000C7C AFIT16_yuvemix_mNegRanges_1
+	{0x0F12, 0x0100},	//70000C7E AFIT16_yuvemix_mNegRanges_2
+	{0x0F12, 0x0010},	//70000C80 AFIT16_yuvemix_mPosRanges_0
+	{0x0F12, 0x0060},	//70000C82 AFIT16_yuvemix_mPosRanges_1
+	{0x0F12, 0x0100},	//70000C84 AFIT16_yuvemix_mPosRanges_2
+	{0x0F12, 0x1430},	//70000C86 AFIT8_bnr_edge_low  [7:0] AFIT8_bnr_repl_thresh
+	{0x0F12, 0x0201},	//70000C88 AFIT8_bnr_repl_force  [7:0] AFIT8_bnr_iHotThreshHigh
+	{0x0F12, 0x0204},	//70000C8A AFIT8_bnr_iHotThreshLow	 [7:0] AFIT8_bnr_iColdThreshHigh
+	{0x0F12, 0x1504},	//70000C8C AFIT8_bnr_iColdThreshLow   [7:0] AFIT8_bnr_DispTH_Low
+	{0x0F12, 0x030F},	//70000C8E AFIT8_bnr_DispTH_High   [7:0] AFIT8_bnr_DISP_Limit_Low
+	{0x0F12, 0x0003},	//70000C90 AFIT8_bnr_DISP_Limit_High   [7:0] AFIT8_bnr_iDistSigmaMin
+	{0x0F12, 0x0902},	//70000C92 AFIT8_bnr_iDistSigmaMax	 [7:0] AFIT8_bnr_iDiffSigmaLow
+	{0x0F12, 0x2004},	//70000C94 AFIT8_bnr_iDiffSigmaHigh   [7:0] AFIT8_bnr_iNormalizedSTD_TH
+	{0x0F12, 0x0050},	//70000C96 AFIT8_bnr_iNormalizedSTD_Limit	[7:0] AFIT8_bnr_iDirNRTune
+	{0x0F12, 0x1140},	//70000C98 AFIT8_bnr_iDirMinThres	[7:0] AFIT8_bnr_iDirFltDiffThresHigh
+	{0x0F12, 0x201C},	//70000C9A AFIT8_bnr_iDirFltDiffThresLow   [7:0] AFIT8_bnr_iDirSmoothPowerHigh
+	{0x0F12, 0x0620},	//70000C9C AFIT8_bnr_iDirSmoothPowerLow   [7:0] AFIT8_bnr_iLowMaxSlopeAllowed
+	{0x0F12, 0x0306},	//70000C9E AFIT8_bnr_iHighMaxSlopeAllowed	[7:0] AFIT8_bnr_iLowSlopeThresh
+	{0x0F12, 0x2003},	//70000CA0 AFIT8_bnr_iHighSlopeThresh	[7:0] AFIT8_bnr_iSlopenessTH
+	{0x0F12, 0xFF01},	//70000CA2 AFIT8_bnr_iSlopeBlurStrength   [7:0] AFIT8_bnr_iSlopenessLimit
+	{0x0F12, 0x0404},	//70000CA4 AFIT8_bnr_AddNoisePower1   [7:0] AFIT8_bnr_AddNoisePower2
+	{0x0F12, 0x0300},	//70000CA6 AFIT8_bnr_iRadialTune   [7:0] AFIT8_bnr_iRadialPower
+	{0x0F12, 0x145A},	//70000CA8 AFIT8_bnr_iRadialLimit	[7:0] AFIT8_ee_iFSMagThLow
+	{0x0F12, 0x1010},	//70000CAA AFIT8_ee_iFSMagThHigh   [7:0] AFIT8_ee_iFSVarThLow
+	{0x0F12, 0x000B},	//70000CAC AFIT8_ee_iFSVarThHigh   [7:0] AFIT8_ee_iFSThLow
+	{0x0F12, 0x1000},	//70000CAE AFIT8_ee_iFSThHigh	[7:0] AFIT8_ee_iFSmagPower
+	{0x0F12, 0x5A0F},	//70000CB0 AFIT8_ee_iFSVarCountTh	[7:0] AFIT8_ee_iRadialLimit
+	{0x0F12, 0x0503},	//70000CB2 AFIT8_ee_iRadialPower   [7:0] AFIT8_ee_iSmoothEdgeSlope
+	{0x0F12, 0x1802},	//70000CB4 AFIT8_ee_iROADThres	 [7:0] AFIT8_ee_iROADMaxNR
+	{0x0F12, 0x0000},	//70000CB6 AFIT8_ee_iROADSubMaxNR	[7:0] AFIT8_ee_iROADSubThres
+	{0x0F12, 0x2006},	//70000CB8 AFIT8_ee_iROADNeiThres	[7:0] AFIT8_ee_iROADNeiMaxNR
+	{0x0F12, 0x3C28},	//70000CBA AFIT8_ee_iSmoothEdgeThres   [7:0] AFIT8_ee_iMSharpen
+	{0x0F12, 0x042C},	//70000CBC AFIT8_ee_iWSharpen	[7:0] AFIT8_ee_iMShThresh
+	{0x0F12, 0x0101},	//70000CBE AFIT8_ee_iWShThresh	 [7:0] AFIT8_ee_iReduceNegative
+	{0x0F12, 0x8000},	//70000CC0 AFIT8_ee_iEmbossCentAdd	 [7:0] AFIT8_ee_iShDespeckle
+	{0x0F12, 0x0904},	//70000CC2 AFIT8_ee_iReduceEdgeThresh	[7:0] AFIT8_dmsc_iEnhThresh
+	{0x0F12, 0x4008},	//70000CC4 AFIT8_dmsc_iDesatThresh	 [7:0] AFIT8_dmsc_iDemBlurHigh
+	{0x0F12, 0x0540},	//70000CC6 AFIT8_dmsc_iDemBlurLow	[7:0] AFIT8_dmsc_iDemBlurRange
+	{0x0F12, 0x8006},	//70000CC8 AFIT8_dmsc_iDecisionThresh	[7:0] AFIT8_dmsc_iCentGrad
+	{0x0F12, 0x0020},	//70000CCA AFIT8_dmsc_iMonochrom   [7:0] AFIT8_dmsc_iGBDenoiseVal
+	{0x0F12, 0x0000},	//70000CCC AFIT8_dmsc_iGRDenoiseVal   [7:0] AFIT8_dmsc_iEdgeDesatThrHigh
+	{0x0F12, 0x1800},	//70000CCE AFIT8_dmsc_iEdgeDesatThrLow	 [7:0] AFIT8_dmsc_iEdgeDesat
+	{0x0F12, 0x0000},	//70000CD0 AFIT8_dmsc_iNearGrayDesat   [7:0] AFIT8_dmsc_iEdgeDesatLimit
+	{0x0F12, 0x1E10},	//70000CD2 AFIT8_postdmsc_iBCoeff	[7:0] AFIT8_postdmsc_iGCoeff
+	{0x0F12, 0x000B},	//70000CD4 AFIT8_postdmsc_iWideMult   [7:0] AFIT8_yuvemix_mNegSlopes_0
+	{0x0F12, 0x0607},	//70000CD6 AFIT8_yuvemix_mNegSlopes_1	[7:0] AFIT8_yuvemix_mNegSlopes_2
+	{0x0F12, 0x0005},	//70000CD8 AFIT8_yuvemix_mNegSlopes_3	[7:0] AFIT8_yuvemix_mPosSlopes_0
+	{0x0F12, 0x0607},	//70000CDA AFIT8_yuvemix_mPosSlopes_1	[7:0] AFIT8_yuvemix_mPosSlopes_2
+	{0x0F12, 0x0405},	//70000CDC AFIT8_yuvemix_mPosSlopes_3	[7:0] AFIT8_yuviirnr_iXSupportY
+	{0x0F12, 0x0205},	//70000CDE AFIT8_yuviirnr_iXSupportUV	[7:0] AFIT8_yuviirnr_iLowYNorm
+	{0x0F12, 0x0304},	//70000CE0 AFIT8_yuviirnr_iHighYNorm   [7:0] AFIT8_yuviirnr_iLowUVNorm
+	{0x0F12, 0x0409},	//70000CE2 AFIT8_yuviirnr_iHighUVNorm	[7:0] AFIT8_yuviirnr_iYNormShift
+	{0x0F12, 0x0306},	//70000CE4 AFIT8_yuviirnr_iUVNormShift	 [7:0] AFIT8_yuviirnr_iVertLength_Y
+	{0x0F12, 0x0407},	//70000CE6 AFIT8_yuviirnr_iVertLength_UV   [7:0] AFIT8_yuviirnr_iDiffThreshL_Y
+	{0x0F12, 0x2804},	//70000CE8 AFIT8_yuviirnr_iDiffThreshH_Y   [7:0] AFIT8_yuviirnr_iDiffThreshL_UV
+	{0x0F12, 0x0228},	//70000CEA AFIT8_yuviirnr_iDiffThreshH_UV	[7:0] AFIT8_yuviirnr_iMaxThreshL_Y
+	{0x0F12, 0x1402},	//70000CEC AFIT8_yuviirnr_iMaxThreshH_Y   [7:0] AFIT8_yuviirnr_iMaxThreshL_UV
+	{0x0F12, 0x0618},	//70000CEE AFIT8_yuviirnr_iMaxThreshH_UV   [7:0] AFIT8_yuviirnr_iYNRStrengthL
+	{0x0F12, 0x1A02},	//70000CF0 AFIT8_yuviirnr_iYNRStrengthH   [7:0] AFIT8_yuviirnr_iUVNRStrengthL
+	{0x0F12, 0x8018},	//70000CF2 AFIT8_yuviirnr_iUVNRStrengthH   [7:0] AFIT8_byr_gras_iShadingPower
+	{0x0F12, 0x0080},	//70000CF4 AFIT8_RGBGamma2_iLinearity	[7:0] AFIT8_RGBGamma2_iDarkReduce
+	{0x0F12, 0x1080},	//70000CF6 AFIT8_ccm_oscar_iSaturation	 [7:0] AFIT8_RGB2YUV_iYOffset
+	{0x0F12, 0x0180},	//70000CF8 AFIT8_RGB2YUV_iRGBGain	[7:0] AFIT8_bnr_nClustLevel_H
+	{0x0F12, 0x0A0A},	//70000CFA AFIT8_bnr_iClustMulT_H	[7:0] AFIT8_bnr_iClustMulT_C
+	{0x0F12, 0x0101},	//70000CFC AFIT8_bnr_iClustThresh_H   [7:0] AFIT8_bnr_iClustThresh_C
+	{0x0F12, 0x1117},	//70000CFE AFIT8_bnr_iDenThreshLow	 [7:0] AFIT8_bnr_iDenThreshHigh
+	{0x0F12, 0x6024},	//70000D00 AFIT8_ee_iLowSharpPower	 [7:0] AFIT8_ee_iHighSharpPower
+	{0x0F12, 0x0A0A},	//70000D02 AFIT8_ee_iLowShDenoise	[7:0] AFIT8_ee_iHighShDenoise
+	{0x0F12, 0xFFFF},	//70000D04 AFIT8_ee_iLowSharpClamp	 [7:0] AFIT8_ee_iHighSharpClamp
+	{0x0F12, 0x0808},	//70000D06 AFIT8_ee_iReduceEdgeMinMult	 [7:0] AFIT8_ee_iReduceEdgeSlope
+	{0x0F12, 0x0A01},	//70000D08 AFIT8_bnr_nClustLevel_H_Bin	 [7:0] AFIT8_bnr_iClustMulT_H_Bin
+	{0x0F12, 0x010A},	//70000D0A AFIT8_bnr_iClustMulT_C_Bin	[7:0] AFIT8_bnr_iClustThresh_H_Bin
+	{0x0F12, 0x1501},	//70000D0C AFIT8_bnr_iClustThresh_C_Bin   [7:0] AFIT8_bnr_iDenThreshLow_Bin
+	{0x0F12, 0x240F},	//70000D0E AFIT8_bnr_iDenThreshHigh_Bin   [7:0] AFIT8_ee_iLowSharpPower_Bin
+	{0x0F12, 0x0A60},	//70000D10 AFIT8_ee_iHighSharpPower_Bin   [7:0] AFIT8_ee_iLowShDenoise_Bin
+	{0x0F12, 0xFF0A},	//70000D12 AFIT8_ee_iHighShDenoise_Bin	 [7:0] AFIT8_ee_iLowSharpClamp_Bin
+	{0x0F12, 0x08FF},	//70000D14 AFIT8_ee_iHighSharpClamp_Bin   [7:0] AFIT8_ee_iReduceEdgeMinMult_Bin
+	{0x0F12, 0x0008},	//70000D16 AFIT8_ee_iReduceEdgeSlope_Bin [7:0]
+	{0x0F12, 0x0001},	//70000D18 AFITB_bnr_nClustLevel_C		[0]   bWideWide[1]
+	{0x0F12, 0x0000},	//70000C64 AFIT16_BRIGHTNESS
+	{0x0F12, 0x0000},	//70000C66 AFIT16_CONTRAST
+	{0x0F12, 0x0000},	//70000C68 AFIT16_SATURATION
+	{0x0F12, 0x0000},	//70000C6A AFIT16_SHARP_BLUR
+	{0x0F12, 0x0000},	//70000C6C AFIT16_GLAMOUR
+	{0x0F12, 0x00C0},	//70000C6E AFIT16_bnr_edge_high
+	{0x0F12, 0x0064},	//70000C70 AFIT16_postdmsc_iLowBright
+	{0x0F12, 0x0384},	//70000C72 AFIT16_postdmsc_iHighBright
+	{0x0F12, 0x0032},	//70000C74 AFIT16_postdmsc_iLowSat
+	{0x0F12, 0x01F4},	//70000C76 AFIT16_postdmsc_iHighSat
+	{0x0F12, 0x0070},	//70000C78 AFIT16_postdmsc_iTune
+	{0x0F12, 0x0040},	//70000C7A AFIT16_yuvemix_mNegRanges_0
+	{0x0F12, 0x00A0},	//70000C7C AFIT16_yuvemix_mNegRanges_1
+	{0x0F12, 0x0100},	//70000C7E AFIT16_yuvemix_mNegRanges_2
+	{0x0F12, 0x0010},	//70000C80 AFIT16_yuvemix_mPosRanges_0
+	{0x0F12, 0x0060},	//70000C82 AFIT16_yuvemix_mPosRanges_1
+	{0x0F12, 0x0100},	//70000C84 AFIT16_yuvemix_mPosRanges_2
+	{0x0F12, 0x1430},	//70000C86 AFIT8_bnr_edge_low  [7:0] AFIT8_bnr_repl_thresh
+	{0x0F12, 0x0201},	//70000C88 AFIT8_bnr_repl_force  [7:0] AFIT8_bnr_iHotThreshHigh
+	{0x0F12, 0x0204},	//70000C8A AFIT8_bnr_iHotThreshLow	 [7:0] AFIT8_bnr_iColdThreshHigh
+	{0x0F12, 0x0F04},	//70000C8C AFIT8_bnr_iColdThreshLow   [7:0] AFIT8_bnr_DispTH_Low
+	{0x0F12, 0x030C},	//70000C8E AFIT8_bnr_DispTH_High   [7:0] AFIT8_bnr_DISP_Limit_Low
+	{0x0F12, 0x0003},	//70000C90 AFIT8_bnr_DISP_Limit_High   [7:0] AFIT8_bnr_iDistSigmaMin
+	{0x0F12, 0x0602},	//70000C92 AFIT8_bnr_iDistSigmaMax	 [7:0] AFIT8_bnr_iDiffSigmaLow
+	{0x0F12, 0x1803},	//70000C94 AFIT8_bnr_iDiffSigmaHigh   [7:0] AFIT8_bnr_iNormalizedSTD_TH
+	{0x0F12, 0x0040},	//70000C96 AFIT8_bnr_iNormalizedSTD_Limit	[7:0] AFIT8_bnr_iDirNRTune
+	{0x0F12, 0x0E20},	//70000C98 AFIT8_bnr_iDirMinThres	[7:0] AFIT8_bnr_iDirFltDiffThresHigh
+	{0x0F12, 0x2018},	//70000C9A AFIT8_bnr_iDirFltDiffThresLow   [7:0] AFIT8_bnr_iDirSmoothPowerHigh
+	{0x0F12, 0x0620},	//70000C9C AFIT8_bnr_iDirSmoothPowerLow   [7:0] AFIT8_bnr_iLowMaxSlopeAllowed
+	{0x0F12, 0x0306},	//70000C9E AFIT8_bnr_iHighMaxSlopeAllowed	[7:0] AFIT8_bnr_iLowSlopeThresh
+	{0x0F12, 0x2003},	//70000CA0 AFIT8_bnr_iHighSlopeThresh	[7:0] AFIT8_bnr_iSlopenessTH
+	{0x0F12, 0xFF01},	//70000CA2 AFIT8_bnr_iSlopeBlurStrength   [7:0] AFIT8_bnr_iSlopenessLimit
+	{0x0F12, 0x0404},	//70000CA4 AFIT8_bnr_AddNoisePower1   [7:0] AFIT8_bnr_AddNoisePower2
+	{0x0F12, 0x0200},	//70000CA6 AFIT8_bnr_iRadialTune   [7:0] AFIT8_bnr_iRadialPower
+	{0x0F12, 0x145A},	//70000CA8 AFIT8_bnr_iRadialLimit	[7:0] AFIT8_ee_iFSMagThLow
+	{0x0F12, 0x1010},	//70000CAA AFIT8_ee_iFSMagThHigh   [7:0] AFIT8_ee_iFSVarThLow
+	{0x0F12, 0x000B},	//70000CAC AFIT8_ee_iFSVarThHigh   [7:0] AFIT8_ee_iFSThLow
+	{0x0F12, 0x1200},	//70000CAE AFIT8_ee_iFSThHigh	[7:0] AFIT8_ee_iFSmagPower
+	{0x0F12, 0x5A0F},	//70000CB0 AFIT8_ee_iFSVarCountTh	[7:0] AFIT8_ee_iRadialLimit
+	{0x0F12, 0x0502},	//70000CB2 AFIT8_ee_iRadialPower   [7:0] AFIT8_ee_iSmoothEdgeSlope
+	{0x0F12, 0x1802},	//70000CB4 AFIT8_ee_iROADThres	 [7:0] AFIT8_ee_iROADMaxNR
+	{0x0F12, 0x0000},	//70000CB6 AFIT8_ee_iROADSubMaxNR	[7:0] AFIT8_ee_iROADSubThres
+	{0x0F12, 0x2006},	//70000CB8 AFIT8_ee_iROADNeiThres	[7:0] AFIT8_ee_iROADNeiMaxNR
+	{0x0F12, 0x4028},	//70000CBA AFIT8_ee_iSmoothEdgeThres   [7:0] AFIT8_ee_iMSharpen
+	{0x0F12, 0x0430},	//70000CBC AFIT8_ee_iWSharpen	[7:0] AFIT8_ee_iMShThresh
+	{0x0F12, 0x0101},	//70000CBE AFIT8_ee_iWShThresh	 [7:0] AFIT8_ee_iReduceNegative
+	{0x0F12, 0xFF00},	//70000CC0 AFIT8_ee_iEmbossCentAdd	 [7:0] AFIT8_ee_iShDespeckle
+	{0x0F12, 0x0804},	//70000CC2 AFIT8_ee_iReduceEdgeThresh	[7:0] AFIT8_dmsc_iEnhThresh
+	{0x0F12, 0x4008},	//70000CC4 AFIT8_dmsc_iDesatThresh	 [7:0] AFIT8_dmsc_iDemBlurHigh
+	{0x0F12, 0x0540},	//70000CC6 AFIT8_dmsc_iDemBlurLow	[7:0] AFIT8_dmsc_iDemBlurRange
+	{0x0F12, 0x8006},	//70000CC8 AFIT8_dmsc_iDecisionThresh	[7:0] AFIT8_dmsc_iCentGrad
+	{0x0F12, 0x0020},	//70000CCA AFIT8_dmsc_iMonochrom   [7:0] AFIT8_dmsc_iGBDenoiseVal
+	{0x0F12, 0x0000},	//70000CCC AFIT8_dmsc_iGRDenoiseVal   [7:0] AFIT8_dmsc_iEdgeDesatThrHigh
+	{0x0F12, 0x1800},	//70000CCE AFIT8_dmsc_iEdgeDesatThrLow	 [7:0] AFIT8_dmsc_iEdgeDesat
+	{0x0F12, 0x0000},	//70000CD0 AFIT8_dmsc_iNearGrayDesat   [7:0] AFIT8_dmsc_iEdgeDesatLimit
+	{0x0F12, 0x1E10},	//70000CD2 AFIT8_postdmsc_iBCoeff	[7:0] AFIT8_postdmsc_iGCoeff
+	{0x0F12, 0x000B},	//70000CD4 AFIT8_postdmsc_iWideMult   [7:0] AFIT8_yuvemix_mNegSlopes_0
+	{0x0F12, 0x0607},	//70000CD6 AFIT8_yuvemix_mNegSlopes_1	[7:0] AFIT8_yuvemix_mNegSlopes_2
+	{0x0F12, 0x0005},	//70000CD8 AFIT8_yuvemix_mNegSlopes_3	[7:0] AFIT8_yuvemix_mPosSlopes_0
+	{0x0F12, 0x0607},	//70000CDA AFIT8_yuvemix_mPosSlopes_1	[7:0] AFIT8_yuvemix_mPosSlopes_2
+	{0x0F12, 0x0405},	//70000CDC AFIT8_yuvemix_mPosSlopes_3	[7:0] AFIT8_yuviirnr_iXSupportY
+	{0x0F12, 0x0205},	//70000CDE AFIT8_yuviirnr_iXSupportUV	[7:0] AFIT8_yuviirnr_iLowYNorm
+	{0x0F12, 0x0304},	//70000CE0 AFIT8_yuviirnr_iHighYNorm   [7:0] AFIT8_yuviirnr_iLowUVNorm
+	{0x0F12, 0x0409},	//70000CE2 AFIT8_yuviirnr_iHighUVNorm	[7:0] AFIT8_yuviirnr_iYNormShift
+	{0x0F12, 0x0306},	//70000CE4 AFIT8_yuviirnr_iUVNormShift	 [7:0] AFIT8_yuviirnr_iVertLength_Y
+	{0x0F12, 0x0407},	//70000CE6 AFIT8_yuviirnr_iVertLength_UV   [7:0] AFIT8_yuviirnr_iDiffThreshL_Y
+	{0x0F12, 0x2C04},	//70000CE8 AFIT8_yuviirnr_iDiffThreshH_Y   [7:0] AFIT8_yuviirnr_iDiffThreshL_UV
+	{0x0F12, 0x022C},	//70000CEA AFIT8_yuviirnr_iDiffThreshH_UV	[7:0] AFIT8_yuviirnr_iMaxThreshL_Y
+	{0x0F12, 0x1402},	//70000CEC AFIT8_yuviirnr_iMaxThreshH_Y   [7:0] AFIT8_yuviirnr_iMaxThreshL_UV
+	{0x0F12, 0x0618},	//70000CEE AFIT8_yuviirnr_iMaxThreshH_UV   [7:0] AFIT8_yuviirnr_iYNRStrengthL
+	{0x0F12, 0x1A02},	//70000CF0 AFIT8_yuviirnr_iYNRStrengthH   [7:0] AFIT8_yuviirnr_iUVNRStrengthL
+	{0x0F12, 0x8018},	//70000CF2 AFIT8_yuviirnr_iUVNRStrengthH   [7:0] AFIT8_byr_gras_iShadingPower
+	{0x0F12, 0x0080},	//70000CF4 AFIT8_RGBGamma2_iLinearity	[7:0] AFIT8_RGBGamma2_iDarkReduce
+	{0x0F12, 0x1080},	//70000CF6 AFIT8_ccm_oscar_iSaturation	 [7:0] AFIT8_RGB2YUV_iYOffset
+	{0x0F12, 0x0180},	//70000CF8 AFIT8_RGB2YUV_iRGBGain	[7:0] AFIT8_bnr_nClustLevel_H
+	{0x0F12, 0x0A0A},	//70000CFA AFIT8_bnr_iClustMulT_H	[7:0] AFIT8_bnr_iClustMulT_C
+	{0x0F12, 0x0101},	//70000CFC AFIT8_bnr_iClustThresh_H   [7:0] AFIT8_bnr_iClustThresh_C
+	{0x0F12, 0x0C0F},	//70000CFE AFIT8_bnr_iDenThreshLow	 [7:0] AFIT8_bnr_iDenThreshHigh
+	{0x0F12, 0x6024},	//70000D00 AFIT8_ee_iLowSharpPower	 [7:0] AFIT8_ee_iHighSharpPower
+	{0x0F12, 0x0808},	//70000D02 AFIT8_ee_iLowShDenoise	[7:0] AFIT8_ee_iHighShDenoise
+	{0x0F12, 0xFFFF},	//70000D04 AFIT8_ee_iLowSharpClamp	 [7:0] AFIT8_ee_iHighSharpClamp
+	{0x0F12, 0x0808},	//70000D06 AFIT8_ee_iReduceEdgeMinMult	 [7:0] AFIT8_ee_iReduceEdgeSlope
+	{0x0F12, 0x0A01},	//70000D08 AFIT8_bnr_nClustLevel_H_Bin	 [7:0] AFIT8_bnr_iClustMulT_H_Bin
+	{0x0F12, 0x010A},	//70000D0A AFIT8_bnr_iClustMulT_C_Bin	[7:0] AFIT8_bnr_iClustThresh_H_Bin
+	{0x0F12, 0x0F01},	//70000D0C AFIT8_bnr_iClustThresh_C_Bin   [7:0] AFIT8_bnr_iDenThreshLow_Bin
+	{0x0F12, 0x240C},	//70000D0E AFIT8_bnr_iDenThreshHigh_Bin   [7:0] AFIT8_ee_iLowSharpPower_Bin
+	{0x0F12, 0x0860},	//70000D10 AFIT8_ee_iHighSharpPower_Bin   [7:0] AFIT8_ee_iLowShDenoise_Bin
+	{0x0F12, 0xFF08},	//70000D12 AFIT8_ee_iHighShDenoise_Bin	 [7:0] AFIT8_ee_iLowSharpClamp_Bin
+	{0x0F12, 0x08FF},	//70000D14 AFIT8_ee_iHighSharpClamp_Bin   [7:0] AFIT8_ee_iReduceEdgeMinMult_Bin
+	{0x0F12, 0x0008},	//70000D16 AFIT8_ee_iReduceEdgeSlope_Bin [7:0]
+	{0x0F12, 0x0001},	//70000D18 AFITB_bnr_nClustLevel_C		[0]   bWideWide[1]
+
+		// FOR HD CAMCORDER
+
+	{0x002A, 0x0250},
+	{0x0F12, 0x0A00},	//#REG_TC_GP_PrevReqInputWidth						//Sensor Crop Width 2560
+	{0x0F12, 0x05A0},	//#REG_TC_GP_PrevReqInputHeight 					//Sensor Crop Height	1536
+	{0x0F12, 0x0010},	//#REG_TC_GP_PrevInputWidthOfs						//Sensor HOffset	16 = (2592-2560)/2
+	{0x0F12, 0x00F0},	//#REG_TC_GP_PrevInputHeightOfs 					//Sensor VOffset	204 = (1944-1536)/2
+	{0x0F12, 0x0A00},	//#REG_TC_GP_CapReqInputWidth							//Sensor Crop Width 2560
+	{0x0F12, 0x05A0},	//#REG_TC_GP_CapReqInputHeight						//Sensor Crop Height	1536
+	{0x0F12, 0x0010},	//#REG_TC_GP_CapInputWidthOfs							//Sensor HOffset	16 = (2592-2560)/2
+	{0x0F12, 0x00F0},	//#REG_TC_GP_CapInputHeightOfs						//Sensor VOffset	204 = (1944-1536)/2
+	{0x002A, 0x0494},
+	{0x0F12, 0x0A00},	//#REG_TC_PZOOM_PrevZoomReqInputWidth			//ISP	Input Width 2560
+	{0x0F12, 0x05A0},	//#REG_TC_PZOOM_PrevZoomReqInputHeight		//ISP	Input Height	1536
+	{0x0F12, 0x0000},	//#REG_TC_PZOOM_PrevZoomReqInputWidthOfs	//ISP	Input HOffset	0
+	{0x0F12, 0x0000},	//#REG_TC_PZOOM_PrevZoomReqInputHeightOfs	//ISP	Input VOffset	0
+	{0x0F12, 0x0A00},	//#REG_TC_PZOOM_CapZoomReqInputWidth			//ISP	Input Width 2560
+	{0x0F12, 0x05A0},	//#REG_TC_PZOOM_CapZoomReqInputHeight			//ISP	Input Height	1536
+	{0x0F12, 0x0000},	//#REG_TC_PZOOM_CapZoomReqInputWidthOfs 	//ISP	Input HOffset	0
+	{0x0F12, 0x0000},	//#REG_TC_PZOOM_CapZoomReqInputHeightOfs	//ISP	Input VOffset	0
+
+	{0x002A, 0x0262},
+	{0x0F12, 0x0001},	//	#REG_TC_GP_bUseReqInputInPre	//
+	{0x0F12, 0x0001},	//	#REG_TC_GP_bUseReqInputInCap	//
+
+
+	{0x002A, 0x0266},
+	{0x0F12, 0x0000},	//	#REG_TC_GP_ActivePrevConfig 	//
+	{0x002A, 0x026A},
+	{0x0F12, 0x0001},	//	#REG_TC_GP_PrevOpenAfterChange	//
+	{0x002A, 0x024E},
+	{0x0F12, 0x0001},	//	#REG_TC_GP_NewConfigSync		//
+	{0x002A, 0x0268},
+	{0x0F12, 0x0001},	//	#REG_TC_GP_PrevConfigChanged	//
+	{0x002A, 0x0270},
+	{0x0F12, 0x0001},	//	#REG_TC_GP_CapConfigChanged 	//
+	{0x002A, 0x023E},
+	{0x0F12, 0x0001},	//	#REG_TC_GP_EnablePreview		//
+	{0x0F12, 0x0001},	//	#REG_TC_GP_EnablePreviewChanged //
+
+};
+
+//1280X960  YUV   Mode
+LOCAL SENSOR_REG_T s5k4ec_1280X960[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x0258},
+	{0x0F12, 0x0A00},	//REG_TC_GP_CapReqInputWidth //2560
+	{0x0F12, 0x0600},	//REG_TC_GP_CapReqInputHeight //1536
+	{0x0F12, 0x0010},	//REG_TC_GP_CapInputWidthOfs //(2592-2560)/2
+	{0x0F12, 0x00CC},	//REG_TC_GP_CapInputHeightOfs //(1944-1536)/2
+
+	{0x002A, 0x0264},
+	{0x0F12, 0x0001},	//REG_TC_GP_bUseReqInputInCap
+
+	{0x002A, 0x049C},
+	{0x0F12, 0x0A00},	//REG_TC_PZOOM_CapZoomReqInputWidth //2560
+	{0x0F12, 0x0600},	//REG_TC_PZOOM_CapZoomReqInputHeight //1536
+	{0x0F12, 0x0000},	//REG_TC_PZOOM_CapZoomReqInputWidthOfs
+	{0x0F12, 0x0000},	//REG_TC_PZOOM_CapZoomReqInputHeightOfs
+
+	{0x002A, 0x047C},
+	{0x0F12, 0x0001},	//REG_TC_THUMB_Thumb_bActive
+	{0x0F12, 0x0320},	//REG_TC_THUMB_Thumb_uWidth //800
+	{0x0F12, 0x01E0},	//REG_TC_THUMB_Thumb_uHeight //480
+
+	{0x002A, 0x0398},
+	{0x0F12, 0x0640},	//REG_0TC_CCFG_usWidth //1600
+	{0x0F12, 0x03C0},	//REG_0TC_CCFG_usHeight //960
+
+	{0x002A, 0x024E},
+	{0x0F12, 0x0001},	//REG_TC_GP_NewConfigSync
+	{0x002A, 0x0270},
+	{0x0F12, 0x0001},	//REG_TC_GP_CapConfigChanged
+};
+
+//1600X1200  YUV   Mode
+LOCAL SENSOR_REG_T s5k4ec_1600X1200[] = {
+// 1600 1200 capture
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x0258},
+	{0x0F12, 0x0A00}, 	  /*REG_TC_GP_CapReqInputWidth 2560 */
+	{0x0F12, 0x0780}, 	  /*REG_TC_GP_CapReqInputHeight 1920 */
+	{0x0F12, 0x0010}, 	  /*REG_TC_GP_CapInputWidthOfs (2592-2560)/2 */
+	{0x0F12, 0x000C}, 	  /*REG_TC_GP_CapInputHeightOfs (1944-1920)/2 */
+
+	{0x002A, 0x0264},
+	{0x0F12, 0x0001}, 	  /*REG_TC_GP_bUseReqInputInCap */
+
+	{0x002A, 0x049C},
+	{0x0F12, 0x0A00}, 	  /*REG_TC_PZOOM_CapZoomReqInputWidth 2560 */
+	{0x0F12, 0x0780}, 	  /*REG_TC_PZOOM_CapZoomReqInputHeight 1920 */
+	{0x0F12, 0x0000}, 	  /*REG_TC_PZOOM_CapZoomReqInputWidthOfs */
+	{0x0F12, 0x0000}, 	  /*REG_TC_PZOOM_CapZoomReqInputHeightOfs */
+
+	{0x002A, 0x047C},
+	{0x0F12, 0x0001}, 	  /*REG_TC_THUMB_Thumb_bActive */
+	{0x0F12, 0x0280}, 	  /*REG_TC_THUMB_Thumb_uWidth 640 */
+	{0x0F12, 0x01E0}, 	  /*REG_TC_THUMB_Thumb_uHeight 480 */
+
+	{0x002A, 0x0398},
+	{0x0F12, 0x0640}, 	  /*REG_0TC_CCFG_usWidth 1600 */
+	{0x0F12, 0x04B0}, 	  /*REG_0TC_CCFG_usHeight 1200 */
+
+	{0x002A, 0x024E},
+	{0x0F12, 0x0001}, 	  /*REG_TC_GP_NewConfigSync */
+	{0x002A, 0x0270},
+	{0x0F12, 0x0001}, 	  /*REG_TC_GP_CapConfigChanged */
+};
+
+//20480X1536  YUV   Mode
+LOCAL SENSOR_REG_T s5k4ec_2048X1536[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x0258},
+	{0x0F12, 0x0A00}, 	  /*REG_TC_GP_CapReqInputWidth 2560 */
+	{0x0F12, 0x0780}, 	  /*REG_TC_GP_CapReqInputHeight 1920 */
+	{0x0F12, 0x0010}, 	  /*REG_TC_GP_CapInputWidthOfs (2592-2560)/2 */
+	{0x0F12, 0x000C}, 	  /*REG_TC_GP_CapInputHeightOfs (1944-1920)/2 */
+
+	{0x002A, 0x0264},
+	{0x0F12, 0x0001}, 	  /*REG_TC_GP_bUseReqInputInCap */
+
+	{0x002A, 0x049C},
+	{0x0F12, 0x0A00}, 	  /*REG_TC_PZOOM_CapZoomReqInputWidth 2560 */
+	{0x0F12, 0x0780}, 	  /*REG_TC_PZOOM_CapZoomReqInputHeight 1920 */
+	{0x0F12, 0x0000}, 	  /*REG_TC_PZOOM_CapZoomReqInputWidthOfs */
+	{0x0F12, 0x0000}, 	  /*REG_TC_PZOOM_CapZoomReqInputHeightOfs */
+
+	{0x002A, 0x047C},
+	{0x0F12, 0x0001}, 	  /*REG_TC_THUMB_Thumb_bActive */
+	{0x0F12, 0x0280}, 	  /*REG_TC_THUMB_Thumb_uWidth 640 */
+	{0x0F12, 0x01E0}, 	  /*REG_TC_THUMB_Thumb_uHeight 480 */
+
+	{0x002A, 0x0398},
+	{0x0F12, 0x0800}, 	  /*REG_0TC_CCFG_usWidth 2048 */
+	{0x0F12, 0x0600}, 	  /*REG_0TC_CCFG_usHeight 1536 */
+
+	{0x002A, 0x024E},
+	{0x0F12, 0x0001}, 	  /*REG_TC_GP_NewConfigSync */
+	{0x002A, 0x0270},
+	{0x0F12, 0x0001}, 	  /*REG_TC_GP_CapConfigChanged */
+};
+//2592X1944  YUV   Mode
+LOCAL SENSOR_REG_T s5k4ec_2592X1944[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x0258},
+	{0x0F12, 0x0A00},		/*REG_TC_GP_CapReqInputWidth 2560 */
+	{0x0F12, 0x0780},		/*REG_TC_GP_CapReqInputHeight 1920 */
+	{0x0F12, 0x0010},		/*REG_TC_GP_CapInputWidthOfs (2592-2560)/2 */
+	{0x0F12, 0x000C},		/*REG_TC_GP_CapInputHeightOfs (1944-1920)/2 */
+
+	{0x002A, 0x0264},
+	{0x0F12, 0x0001},		/*REG_TC_GP_bUseReqInputInCap */
+
+	{0x002A, 0x049C},
+	{0x0F12, 0x0A00},		/*REG_TC_PZOOM_CapZoomReqInputWidth 2560 */
+	{0x0F12, 0x0780},		/*REG_TC_PZOOM_CapZoomReqInputHeight 1920 */
+	{0x0F12, 0x0000},		/*REG_TC_PZOOM_CapZoomReqInputWidthOfs */
+	{0x0F12, 0x0000},		/*REG_TC_PZOOM_CapZoomReqInputHeightOfs */
+
+	{0x002A, 0x047C},
+	{0x0F12, 0x0001},		/*REG_TC_THUMB_Thumb_bActive */
+	{0x0F12, 0x0280},		/*REG_TC_THUMB_Thumb_uWidth 640 */
+	{0x0F12, 0x01E0},		/*REG_TC_THUMB_Thumb_uHeight 480 */
+
+	{0x002A, 0x0398},
+	{0x0F12, 0x0A00},		/*REG_0TC_CCFG_usWidth 2560 */
+	{0x0F12, 0x0780},		/*REG_0TC_CCFG_usHeight 1920 */
+
+	{0x002A, 0x024E},
+	{0x0F12, 0x0001},		/*REG_TC_GP_NewConfigSync */
+	{0x002A, 0x0270},
+	{0x0F12, 0x0001},		/*REG_TC_GP_CapConfigChanged */
+};
+
+LOCAL SENSOR_REG_T s5k4ec_pre_flash_On[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x17FC},		// fls_FlashWP_0_Pre_Flash_Start
+	{0x0F12, 0x0001},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_pre_flash_Off[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x1800},		//fls_afl_FlashWP_Weight_0_Pre_Flash_end
+	{0x0F12, 0x0001},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_main_flash_On[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x17E8},		//fls_afl_FlashMode:Flash alg start
+	{0x0F12, 0x0001},
+	{0x002A, 0x180C},		//fls_afl_FlashWP_Weight_4:flash br avg
+	{0x0F12, 0x0027},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_main_flash_Off[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x17E8},		//fls_afl_FlashMode  Flash alg end
+	{0x0F12, 0x0000},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_FAST_AE_On[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x0588},		//fls_afl_FlashMode  Flash alg end
+	{0x0F12, 0x0000},
+	{0xFFFF, 0xFFFF},
+};
+
+LOCAL SENSOR_REG_T s5k4ec_FAST_AE_Off[] = {
+	{0xFCFC, 0xD000},
+	{0x0028, 0x7000},
+	{0x002A, 0x0588},		//fls_afl_FlashMode  Flash alg end
+	{0x0F12, 0x0002},
+	{0xFFFF, 0xFFFF},
+};
-- 
2.25.0

