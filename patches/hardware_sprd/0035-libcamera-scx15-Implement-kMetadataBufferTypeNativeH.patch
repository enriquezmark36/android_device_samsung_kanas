From f1bef1f6120ee3d9cdc46738055076f2948331c3 Mon Sep 17 00:00:00 2001
From: Mark Enriquez <enriquezmark36@gmail.com>
Date: Wed, 25 Mar 2020 19:00:11 +0800
Subject: [PATCH 5/8] libcamera: scx15: Implement
 kMetadataBufferTypeNativeHandleSource for HAL1.0

This is a drastically simplified version of djeman's commit in his vendor tree
https://github.com/djeman/android_vendor_sprd/commit/bd2c631df83c480d12a00a2d50a7881510e7fa40
which should implement kMetadataBufferTypeNativeHandleSource needed for Android N and
above. In LineageOS 14, there is a hack so it's not really required.
In LineageOS 15, the no one has been able to port the hack so this patch might
be needed.

This commit just re-encapsulates the metadata to use native_handle without passing
any fildes so that we won't need to close any. WRT this change, the
encoder may have to be tweaked to read this new encapsulation.
The commit f8c7c902abd1fdb53f3461672774fc68ae0cc5eb on this tree by
(coincidentally) djeman might not be complete in this case.
Honestly though, I don't know his/her motives so I can't say for sure.

NOTE:
On the bright side, video recording is now WORKING!!! 720p recording works too.
But also we've lost: autofocus, autoexposure, auto whitebalance, metering modes,
DTP and auto flash.

Change-Id: Ic1865500b2603c84f8645467ee08885aaa5c53d9
Signed-off-by: Mark Enriquez <enriquezmark36@gmail.com>
---
 libcamera/scx15/Camera.mk                     |   8 +
 .../sc8830/inc/SprdCameraHardwareInterface.h  |  11 +-
 .../src/SprdCameraHardwareInterface.cpp       | 155 +++++++++++++++---
 3 files changed, 147 insertions(+), 27 deletions(-)

diff --git a/libcamera/scx15/Camera.mk b/libcamera/scx15/Camera.mk
index 35f7f63..c85c663 100644
--- a/libcamera/scx15/Camera.mk
+++ b/libcamera/scx15/Camera.mk
@@ -27,6 +27,7 @@ LOCAL_C_INCLUDES := \
         external/jhead \
         external/sqlite/dist \
 	system/media/camera/include \
+	frameworks/native/include/media/openmax \
 	$(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ/usr/include \
 	$(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ/source/include \
 
@@ -269,6 +270,13 @@ ifdef CONFIG_CAMERA_ISP
 LOCAL_SHARED_LIBRARIES += libisp
 endif
 
+# Use media extension
+# Will use kMetadataBufferTypeNativeHandleSource
+# instead of kMetadataBufferTypeCameraSource
+ifeq ($(TARGET_USES_MEDIA_EXTENSIONS), true)
+  LOCAL_CFLAGS += -DUSE_MEDIA_EXTENSIONS
+endif
+
 include $(BUILD_SHARED_LIBRARY)
 
 ifeq ($(strip $(sc8830like)),1)
diff --git a/libcamera/scx15/sc8830/inc/SprdCameraHardwareInterface.h b/libcamera/scx15/sc8830/inc/SprdCameraHardwareInterface.h
index 5c4831d..3be62be 100644
--- a/libcamera/scx15/sc8830/inc/SprdCameraHardwareInterface.h
+++ b/libcamera/scx15/sc8830/inc/SprdCameraHardwareInterface.h
@@ -300,6 +300,9 @@ private:
 	status_t                        checkFlashParameter(SprdCameraParameters& params);
 	void                            setCameraPrivateData(void);
 
+	void                            deallocateMeta();
+	int                             allocateMeta(uint8_t buf_cnt, int numFDs, int numInts);
+
 	/* These constants reflect the number of buffers that libqcamera requires
 	for preview and raw, and need to be updated when libqcamera
 	changes.
@@ -352,7 +355,13 @@ private:
 	sp<AshmemPool>                  mJpegHeap;
 	uint32_t                        mJpegHeapSize;
 	uint32_t                        mFDAddr;
-	camera_memory_t                 *mMetadataHeap;
+
+	camera_memory_t                 *mMetadataHeap[kPreviewBufferCount];
+	uint8_t                         mMetaBufCount;
+#ifdef USE_MEDIA_EXTENSIONS
+	native_handle_t                 *mNativeHandleHeap[kPreviewBufferCount];
+#endif
+
 	sprd_camera_memory_t            *mReDisplayHeap;
 	//TODO: put the picture dimensions in the CameraParameters object;
 	SprdCameraParameters            mParameters;
diff --git a/libcamera/scx15/sc8830/src/SprdCameraHardwareInterface.cpp b/libcamera/scx15/sc8830/src/SprdCameraHardwareInterface.cpp
index eac2207..d7fd02b 100644
--- a/libcamera/scx15/sc8830/src/SprdCameraHardwareInterface.cpp
+++ b/libcamera/scx15/sc8830/src/SprdCameraHardwareInterface.cpp
@@ -38,6 +38,12 @@
 #include "SprdCameraHardwareInterface.h"
 #include "SprdOEMCamera.h"
 
+#ifdef USE_MEDIA_EXTENSIONS
+#include <media/hardware/HardwareAPI.h>
+#else
+#define METADATA_SIZE 28/* (7 * 4) */
+#endif
+
 #ifdef CONFIG_CAMERA_ISP
 extern "C" {
 #include "isp_video.h"
@@ -56,7 +62,11 @@ namespace android {
 #define PRINT_TIME 0
 #define ROUND_TO_PAGE(x) (((x)+0xfff)&~0xfff)
 #define ARRAY_SIZE(x) (sizeof(x) / sizeof(*x))
-#define METADATA_SIZE 28/* (7 * 4) */
+
+//addr_phy, addr_vir, width, height, x, y
+// workaround the missing fd with another int (6 + 1) = 7
+#define VIDEO_METADATA_NUM_INTS 7
+
 #define SET_PARM(x,y) do {\
 			LOGV("%s: set camera param: %s, %d", __func__, #x, y);\
 			camera_set_parm (x, y, NULL, NULL);\
@@ -150,6 +160,70 @@ const camera_info_t SprdCameraHardware::kCameraInfo3[] = {
 	}
 };
 
+
+int SprdCameraHardware::allocateMeta(uint8_t buf_cnt, int numFDs, int numInts)
+{
+	int i = 0;
+
+	for (; i < buf_cnt; i++) {
+#ifdef USE_MEDIA_EXTENSIONS
+		mMetadataHeap[i] = mGetMemory_cb(-1, sizeof(VideoNativeHandleMetadata), 1, NULL);
+#else
+		mMetadataHeap[i] = mGetMemory_cb(-1, METADATA_SIZE, 1, NULL);
+#endif
+		if (!mMetadataHeap[i]) {
+			LOGE("allocation of video metadata failed.");
+			goto err_clean_metadata;
+		}
+#ifdef USE_MEDIA_EXTENSIONS
+		mNativeHandleHeap[i] = native_handle_create(numFDs, numInts);
+		if (mNativeHandleHeap[i] == NULL) {
+			LOGE("Error in getting video native handle");
+			mMetadataHeap[i]->release(mMetadataHeap[i]);
+			goto err_clean_metadata;
+		}
+#endif
+	}
+	mMetaBufCount = buf_cnt;
+	return NO_ERROR;
+
+/*
+ * XXXX: This is actually the deallocateMeta() method
+ * so could we use that instead? I'm worrying about threads
+ * and non-atomic operations.
+ */
+err_clean_metadata:
+	while (i--) {
+#ifdef USE_MEDIA_EXTENSIONS
+		if (mNativeHandleHeap[i]) {
+			native_handle_delete(mNativeHandleHeap[i]);
+			mNativeHandleHeap[i] = NULL;
+		}
+#endif
+		mMetadataHeap[i]->release(mMetadataHeap[i]);
+		mMetadataHeap[i] = NULL;
+	}
+	return NO_MEMORY;
+}
+
+void SprdCameraHardware::deallocateMeta()
+{
+	for (int i = 0; i < mMetaBufCount; i++) {
+#ifdef USE_MEDIA_EXTENSIONS
+		native_handle_t *nh = mNativeHandleHeap[i];
+		mNativeHandleHeap[i] = NULL;
+
+		if (NULL != nh)
+			native_handle_delete(nh);
+		else
+			LOGE("native handle not available");
+#endif
+		mMetadataHeap[i]->release(mMetadataHeap[i]);
+		mMetadataHeap[i] = NULL;
+	}
+	mMetaBufCount = 0;
+}
+
 int SprdCameraHardware::getPropertyAtv()
 {
 	char propBuf_atv[PROPERTY_VALUE_MAX] = {0};
@@ -267,7 +341,6 @@ SprdCameraHardware::SprdCameraHardware(int cameraId)
 	mSubRawHeapNum(0),
 	mJpegHeapSize(0),
 	mFDAddr(0),
-	mMetadataHeap(NULL),
 	mParameters(),
 	mSetParameters(),
 	mSetParametersBak(),
@@ -342,6 +415,12 @@ SprdCameraHardware::SprdCameraHardware(int cameraId)
 	memset(&mRawHeapInfoBak, 0, sizeof(mRawHeapInfoBak));
 	mRawHeapBakUseFlag = 0;
 
+	memset(&mMetadataHeap, 0, sizeof(mMetadataHeap));
+	mMetaBufCount = 0;
+#ifdef USE_MEDIA_EXTENSIONS
+	memset(&mNativeHandleHeap, 0, sizeof(mNativeHandleHeap));
+#endif
+
 	setCameraState(SPRD_INIT, STATE_CAMERA);
 
 	if (!mGrallocHal) {
@@ -412,13 +491,7 @@ void SprdCameraHardware::release()
 		LOGI("stopping camera.");
 		if (CAMERA_SUCCESS != camera_stop(camera_cb, this)) {
 			setCameraState(SPRD_ERROR, STATE_CAMERA);
-			if(NULL != mMetadataHeap){
-				if(NULL != mMetadataHeap->release){
-					LOGV("freePreviewMem start release mMetadataHeap");
-					mMetadataHeap->release(mMetadataHeap);
-					mMetadataHeap = NULL;
-				}
-			}
+			deallocateMeta();
 			mReleaseFLag = true;
 			LOGE("release X: fail to camera_stop().");
 			return;
@@ -427,13 +500,7 @@ void SprdCameraHardware::release()
 		WaitForCameraStop();
 	}
 
-	if(NULL != mMetadataHeap){
-		if(NULL != mMetadataHeap->release){
-			LOGV("freePreviewMem start release mMetadataHeap");
-			mMetadataHeap->release(mMetadataHeap);
-			mMetadataHeap = NULL;
-		}
-	}
+	deallocateMeta();
 	deinitCapture();
 
 	mCbPrevDataBusyLock.lock();
@@ -808,7 +875,11 @@ void SprdCameraHardware::releaseRecordingFrame(const void *opaque)
 {
 	LOGI("releaseRecordingFrame E. ");
 	uint8_t *addr = (uint8_t *)opaque;
-	uint32_t index = (addr - (uint8_t *)mMetadataHeap->data) / (METADATA_SIZE);
+	uint32_t index = 0;
+
+	for (index = 0; index < mMetaBufCount; index++)
+		if (mMetadataHeap[index]->data == opaque)
+			break;
 
 	Mutex::Autolock pbl(&mPrevBufLock);
 
@@ -823,13 +894,18 @@ void SprdCameraHardware::releaseRecordingFrame(const void *opaque)
 		uint32_t *paddr = NULL;
 
 		if (mIsStoreMetaData) {
+#ifdef USE_MEDIA_EXTENSIONS
+			VideoNativeHandleMetadata *packet = (VideoNativeHandleMetadata *) opaque;
+			paddr = (uint32_t *) packet->pHandle->data[1];
+			vaddr = (uint32_t *) packet->pHandle->data[2];
+#else
 			paddr = (uint32_t *) *((uint32_t*)addr + 1);
 			vaddr = (uint32_t *) *((uint32_t*)addr + 2);
 
 			if (camera_get_rot_set()) {
 				index += kPreviewBufferCount;
 			}
-
+#endif
 		} else {
 			for (index=0; index < mPreviewHeapNum; index++) {
 				if ((uint32_t)addr == mPreviewHeapArray_vir[index])
@@ -2004,8 +2080,8 @@ status_t SprdCameraHardware::storeMetaDataInBuffers(bool enable)
 		return INVALID_OPERATION;
 	}
 
-	if (NULL == mMetadataHeap) {
-		if (NULL == (mMetadataHeap = mGetMemory_cb(-1, METADATA_SIZE, kPreviewBufferCount, NULL))) {
+	if (mMetaBufCount < kPreviewBufferCount) {
+		if ((allocateMeta(kPreviewBufferCount, 0, VIDEO_METADATA_NUM_INTS)) != NO_ERROR) {
 			LOGE("fail to alloc memory for the metadata for storeMetaDataInBuffers.");
 			return INVALID_OPERATION;
 		}
@@ -2821,9 +2897,7 @@ bool SprdCameraHardware::allocatePreviewMemByGraphics()
 					return -1;
 				}
 				LOGI("MemoryHeapIon::Get_mm_ion: %d addr 0x%x size 0x%x",i, ion_addr, ion_size);
-				mPreviewBufferHandle[i] = buffer_handle;
 				mPreviewHeapArray_phy[i] = (uint32_t)ion_addr;
-				mPreviewHeapArray_vir[i] = (uint32_t)private_h->base;
 				/*mPreviewHeapArray_size[i] = ion_size;*/
 			} else {
 				int iova_addr=0,iova_size=0;
@@ -2832,11 +2906,13 @@ bool SprdCameraHardware::allocatePreviewMemByGraphics()
 					LOGE("allocatePreviewMemByGraphics: Get_mm_iova error");
 					return -1;
 				}
-				mPreviewBufferHandle[i] = buffer_handle;
 				mPreviewHeapArray_phy[i] = (uint32_t)iova_addr;
-				mPreviewHeapArray_vir[i] = (uint32_t)private_h->base;
 				mPreviewHeapArray_size[i]=iova_size;
 			}
+
+			mPreviewBufferHandle[i] = buffer_handle;
+			mPreviewHeapArray_vir[i] = (uintptr_t)private_h->base;
+
 			LOGI("allocatePreviewMemByGraphics: phyaddr:0x%x, base:0x%x, size:0x%x, stride:0x%x ",
 				mPreviewHeapArray_phy[i],private_h->base,private_h->size, stride);
 			mCancelBufferEb[i] = 0;
@@ -4369,7 +4445,33 @@ void SprdCameraHardware::receivePreviewFrame(camera_frame_type *frame)
 			}
 			if (mIsStoreMetaData) {
 				uint32_t tmpIndex = frame->order_buf_id;
-				uint32_t *data = (uint32_t *)mMetadataHeap->data + offset * METADATA_SIZE / 4;
+#ifdef USE_MEDIA_EXTENSIONS
+				native_handle_t *nh = mNativeHandleHeap[offset];
+				if (!nh) {
+					LOGE("Error in getting video native handle");
+					return;
+				}
+
+				/*
+				 * The first item should be the share_fd from
+				 * mPreviewBufferHandle[offset] but for this version
+				 * "that" may be NULL or invalid so fill in the missing
+				 * fd with a 0
+				 * Workaround should work for 32 bits, not sure about 64.
+				 */
+				nh->data[0] = 0;
+				nh->data[1] = frame->buffer_phy_addr;
+				nh->data[2] = (int) frame->buf_Virt_Addr;
+				nh->data[3] = width;
+				nh->data[4] = height;
+				nh->data[5] = mPreviewWidth_trimx;
+				nh->data[6] = mPreviewHeight_trimy;
+
+				VideoNativeHandleMetadata *packet = (VideoNativeHandleMetadata *)mMetadataHeap[offset]->data;
+				packet->eType = kMetadataBufferTypeNativeHandleSource;
+				packet->pHandle = nh;
+#else
+				uint32_t *data = (uint32_t *)mMetadataHeap[offset]->data;
 				*data++ = kMetadataBufferTypeCameraSource;
 				*data++ = frame->buffer_phy_addr;
 				*data++ = (uint32_t)frame->buf_Virt_Addr;
@@ -4377,6 +4479,7 @@ void SprdCameraHardware::receivePreviewFrame(camera_frame_type *frame)
 				*data++ = height;
 				*data++ = mPreviewWidth_trimx;
 				*data = mPreviewHeight_trimy;
+#endif
 				{
 					Mutex::Autolock l(&mCbPrevDataBusyLock);
 					if(!isPreviewing()) return;
@@ -4384,7 +4487,7 @@ void SprdCameraHardware::receivePreviewFrame(camera_frame_type *frame)
 						tmpIndex = mPreviewDcamAllocBufferCnt - 1;
 					}
 					mPreviewHeapArray[tmpIndex]->busy_flag = true;
-					mData_cb_timestamp(timestamp, CAMERA_MSG_VIDEO_FRAME, mMetadataHeap, offset, mUser);
+					mData_cb_timestamp(timestamp, CAMERA_MSG_VIDEO_FRAME, mMetadataHeap[offset], 0, mUser);
 					mPreviewHeapArray[tmpIndex]->busy_flag = false;
 				}
 			} else {
-- 
2.25.0

