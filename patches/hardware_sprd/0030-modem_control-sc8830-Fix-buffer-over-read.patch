From e0e9b8c650a7464a481d14b12727cea2fd029b3f Mon Sep 17 00:00:00 2001
From: Mark Enriquez <enriquezmark36@gmail.com>
Date: Sun, 22 Mar 2020 09:39:04 +0800
Subject: [PATCH] modem_control: sc8830: Fix buffer over-read

When receiving a Modem assert, modem_control is the one to send the message
to other lowlevel daemons of the system (modemd,phoneserver,audioserver(?),...)

But due to some edge case behavior, the read() call truly fills in the buffer
of 256 bytes without reserving a single null byte which the strlen() depended on.

When the coproc (basically the modem HW) sends in multiple messages, it can easily
pass the 256 buffer size, when redirecting the message to modemd we get

DEBUG   : *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
DEBUG   : LineageOS Version: '15.1-20200320-UNOFFICIAL-kanas'
DEBUG   : Build fingerprint: 'samsung/lineage_kanas/kanas:8.1.0/OPM7.181205.001/e233f35276:userdebug/test-keys'
DEBUG   : Revision: '0'
DEBUG   : ABI: 'arm'
DEBUG   : pid: 278, tid: 281, name: modem_control  >>> /system/vendor/bin/modem_control <<<
DEBUG   : signal 6 (SIGABRT), code -6 (SI_TKILL), fault addr --------
DEBUG   : Abort message: 'FORTIFY: strlen: detected read past end of buffer'
DEBUG   :     r0 00000000  r1 00000119  r2 00000006  r3 00000008
DEBUG   :     r4 00000116  r5 00000119  r6 af16f404  r7 0000010c
DEBUG   :     r8 00000000  r9 00000000  sl 00000006  fp af74c450
DEBUG   :     ip af16f5b0  sp af16f3f0  lr af2b0a3f  pc af2aa470  cpsr 20000030
DEBUG   :
DEBUG   : backtrace:
DEBUG   :     #00 pc 0001a470  /system/lib/libc.so (abort+63)
DEBUG   :     #01 pc 0001bf31  /system/lib/libc.so (__fortify_fatal(char const*, ...)+24)
DEBUG   :     #02 pc 0001c70f  /system/lib/libc.so (__strlen_chk+18)
DEBUG   :     #03 pc 00002eb7  /system/vendor/bin/modem_control (detect_sipc_modem+1770)
DEBUG   :     #04 pc 00048503  /system/lib/libc.so (__pthread_start(void*)+22)
DEBUG   :     #05 pc 0001b04b  /system/lib/libc.so (__start_thread+32)

We could use strnlen() or better yet use the return value of read() to not
count the buffer again.

In theory, this would suffice just to solve this
but taking the context of modemd that uses 128 buffers(?) it might be
better to just send the first 128 bytes. Fortunately, the first 128
contains the strings modemd is looking for using strstr().
This additional step should save a read() and a write().

Change-Id: I26387cbf9475845775b9c742863d8c7fb33a2727
Signed-off-by: Mark Enriquez <enriquezmark36@gmail.com>
---
 ril/sc8830/modemd/modem_control/modem_control.c | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/ril/sc8830/modemd/modem_control/modem_control.c b/ril/sc8830/modemd/modem_control/modem_control.c
index 708077a..4bc0213 100644
--- a/ril/sc8830/modemd/modem_control/modem_control.c
+++ b/ril/sc8830/modemd/modem_control/modem_control.c
@@ -882,14 +882,17 @@ void* detect_sipc_modem(void *param)
 			g_b_wake_locking = true;
 			memset(buf, 0, sizeof(buf));
 			MODEM_LOGD("enter read ...");
-			numRead = read(fd, buf, sizeof(buf));
+			numRead = read(fd, buf, sizeof(buf) - 1);
 			if (numRead < 0) {
 				MODEM_LOGE("read %d return %d, errno = %s", fd , numRead, strerror(errno));
 				sleep(1);
 				continue;
 			}
 			MODEM_LOGD("buf=%s", buf);
-			if ((numWrite = write(client_modemd,buf,strlen(buf)))<=0)
+
+			// modemd uses 128 buffers so it might be best to just send 128
+			// bytes since it's just going to strstr at the beginning
+			if ((numWrite = write(client_modemd,buf, numRead > 128 ? 128 : numRead ))<=0)
 				MODEM_LOGE("write %d return %d, errno = %s", fd , numWrite, strerror(errno));
 			else
 				MODEM_LOGD("write to modemd len = %d\n",i);
-- 
2.25.0

