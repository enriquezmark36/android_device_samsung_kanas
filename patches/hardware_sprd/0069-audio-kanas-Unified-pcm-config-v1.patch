From a75b9784d5dd2768cbfd75b0e3449a46e6e2f6de Mon Sep 17 00:00:00 2001
From: Mark Enriquez <enriquezmark36@gmail.com>
Date: Thu, 6 Aug 2020 20:13:06 +0800
Subject: [PATCH 3/4] audio: kanas: Unified pcm config v1

From the binary dump of the audio.primary.sc8830.so, it is possible
to infer that Samsung did deviate  source a bit and this scx15
code provides a good common base.

The "struct pcm_config" config for normal playback (thru speakers or headset)
are divided into two. One for low latency and the other is for power saving (or
high latency).
When the DEEP_BUFFER flag is passed, this HAL driver will use the power saving
one other wise it's the other.
Samsung's binary blob does not have either thus does not support the feature.

The question that should have popped out would be what "struct pcm_config"
would they have used? Based on some quick pattern matching, there's only one
of it. What's funny is that what I've found closely matched the power saving
one or the high latency.

That configuration is written to pcm_config_alt and the buffer size is increased
from 87.0748 msec to 97.9592 msecs which is probably the longest and largest
buffer supported with SPRD IRAM.

Based on initial tests, cpu utilization when down to 0.5% from 0.9%,
comparing the previous patchset.

P.S. This is an experimental patch, akin to an [RFC], there are a couple of
properties that need to be set with setprop or through system.prop.
1. debug.audio.alternate_period
     When "1", this will use the pcm_config_alt above anything else, even
      if DEEP_BUFFER is on.
2. debug.audio.with_irq
     When "1", tinyalsa -- the underlying userspace alsa library -- will rely
     on the kernel (via poll()) to notify when the buffer needs to be
     filled. Usually, tinyalsa uses poll() with timeouts. This could be due to
     this HAL code being based from someone's audio HAL code or maybe because
     it satisfies deadlines much better than when the kernel is doing, thus
     preventing underruns.
     With IRQ's being boosted to SCHED_FIFO in the kernel, it should be possible
     to rely on the kernel. Doing so can impart a reduction on CPU utilization.

P.S.2 Both of these properties default to "1" on Kanas**(SM-G355H), "0" on other systems

Change-Id: I022757daa0c2df3bc946efaef8e47443a084cec9
Signed-off-by: Mark Enriquez <enriquezmark36@gmail.com>
---
 audio/scx15/Android.mk |  4 +++
 audio/scx15/audio_hw.c | 66 +++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 69 insertions(+), 1 deletion(-)

diff --git a/audio/scx15/Android.mk b/audio/scx15/Android.mk
index 86e9a37..dbe87a5 100644
--- a/audio/scx15/Android.mk
+++ b/audio/scx15/Android.mk
@@ -63,6 +63,10 @@ LOCAL_SRC_FILES += audio_mux_pcm.c
 LOCAL_CFLAGS += -DAUDIO_MUX_PCM
 endif
 
+ifeq ($(SOC_SCX35),true)
+LOCAL_CFLAGS += -DSOC_SCX35
+endif
+
 LOCAL_SHARED_LIBRARIES := \
 	liblog \
 	libcutils \
diff --git a/audio/scx15/audio_hw.c b/audio/scx15/audio_hw.c
index a3c6a7a..336c7b4 100644
--- a/audio/scx15/audio_hw.c
+++ b/audio/scx15/audio_hw.c
@@ -155,6 +155,11 @@
 #define CAPTURE_PERIOD_COUNT 2
 /* minimum sleep time in out_write() when write threshold is not reached */
 #define MIN_WRITE_SLEEP_US 5000
+/* This is for debug only; enables alternate period settings. */
+#define USE_ALTERNATE_PERIOD_PROPERTY "debug.audio.alternate_period"
+/* debug only: 0 - adds PCM_NOIRQ, 1 - no PCM_IRQ uses HW IRQs instead */
+#define USE_HW_IRQ_PROPERTY "debug.audio.with_irq"
+
 
 #define RESAMPLER_BUFFER_FRAMES (SHORT_PERIOD_SIZE * 2)
 #define RESAMPLER_BUFFER_SIZE (4 * RESAMPLER_BUFFER_FRAMES)
@@ -205,6 +210,27 @@ struct pcm_config pcm_config_mm_fast = {
     .avail_min = SHORT_PERIOD_SIZE/2,
 };
 
+/*
+ * This alternate configuration is based on the stock rom of SM-G355H:
+ * period_size = VBC_BASE_FRAME_COUNT * 8 * 3
+ * period_count = 2
+ * start_threshold = avail_min = 0
+ *
+ * NOTE:
+ * - One period by this config will be 87.07483 msecs.
+ * - More period_count would have less period_size and
+ *       generally would result to a higher cpu load.
+ */
+struct pcm_config pcm_config_alt = {
+    .channels = 2,
+    .rate = DEFAULT_OUT_SAMPLING_RATE,
+    .period_size = VBC_BASE_FRAME_COUNT * 27, // ~97.9592 msec
+    .period_count = 2,
+    .format = PCM_FORMAT_S16_LE,
+    .start_threshold = 0, // tinyalsa will set this
+    .avail_min = 0, // tinyalsa will set this
+};
+
 struct pcm_config pcm_config_mm_ul = {
     .channels = 2,
     .rate = MM_FULL_POWER_SAMPLING_RATE,
@@ -1544,6 +1570,7 @@ static int start_output_stream(struct tiny_stream_out *out)
     struct tiny_audio_device *adev = out->dev;
     unsigned int card = 0;
     unsigned int port = PORT_MM;
+    unsigned int flags = PCM_OUT | PCM_MMAP | PCM_NOIRQ;
     struct pcm_config old_pcm_config={0};
     int ret=0;
 
@@ -1621,7 +1648,32 @@ static int start_output_stream(struct tiny_stream_out *out)
 	}
         out->low_power = 1;
 
-        out->pcm = pcm_open(card, port, PCM_OUT | PCM_MMAP | PCM_NOIRQ, &out->config);
+    /*
+     * Enclose this in a block to allow freeing the
+     * stack memory value as soon as possible
+     */
+    {
+        char value[PROPERTY_VALUE_MAX];
+
+#ifdef SOC_SCX35
+        property_get(USE_ALTERNATE_PERIOD_PROPERTY, value, "1");
+#else
+        property_get(USE_ALTERNATE_PERIOD_PROPERTY, value, "0");
+#endif
+        if (!strcmp("1", value))
+            out->config = pcm_config_alt;
+
+#ifdef SOC_SCX35
+        property_get(USE_HW_IRQ_PROPERTY, value, "1");
+#else
+        property_get(USE_HW_IRQ_PROPERTY, value, "0");
+#endif
+        if (!strcmp("1", value))
+            flags &= ~PCM_NOIRQ;
+    }
+
+
+        out->pcm = pcm_open(card, port, flags, &out->config);
 
         if (!pcm_is_ready(out->pcm)) {
             ALOGE("cannot open pcm_out driver: %s", pcm_get_error(out->pcm));
@@ -3319,6 +3371,18 @@ static int adev_open_output_stream(struct audio_hw_device *dev,
 	out->config = pcm_config_mm_fast;
     }
 
+    {
+        char value[PROPERTY_VALUE_MAX];
+
+#ifdef SOC_SCX35
+        property_get(USE_ALTERNATE_PERIOD_PROPERTY, value, "1");
+#else
+        property_get(USE_ALTERNATE_PERIOD_PROPERTY, value, "0");
+#endif
+        if (!strcmp("1", value))
+            out->config = pcm_config_alt;
+    }
+
     out->dev = ladev;
     out->standby = 1;
     out->devices = devices;
-- 
2.28.0

