From 340365b849f6f0e3e8da5e6165e19e4b66d5c73b Mon Sep 17 00:00:00 2001
From: Mark Enriquez <enriquezmark36@gmail.com>
Date: Mon, 10 Feb 2020 21:21:29 +0800
Subject: [PATCH] kanas: Switch to sc8830 (previously scx30g) avc (h.264)
 decoder

The migration is straightforward enough. This requires 2 functions from
libstagefrieght_sprd and would have API problems with memoryheap_sprd
which explains the lots of macros working around this.

Kanas doesn't use IOMMU (or has one) so testing the IOMMU part is nada.
Though this commit is aimed for kanas, this should work for scx15 devices in general.
But, the binary blob (the actual h.264 encoder) needs one function to be
binary patched to invert the clock indices so that the
right clock is being set. That binary blob must be
for the scx30g version. I'm using the 2017 one.

Change-Id: I3b939faf7ec9cb667aab5510b347c8c4d117dfaf
Signed-off-by: Mark Enriquez <enriquezmark36@gmail.com>
---
 libstagefrighthw/scx15/Android.mk             |  4 +
 .../scx15/SprdSimpleOMXComponent.cpp          | 25 ++++++
 .../scx15/include/SprdSimpleOMXComponent.h    |  4 +
 omx_components/video/avc_sprd/Android.mk      |  2 +-
 .../video/avc_sprd/sc8830/dec/Android.mk      | 14 +++-
 .../avc_sprd/sc8830/dec/SPRDAVCDecoder.cpp    | 81 +++++++++++++++++++
 .../avc_sprd/sc8830/dec/SPRDAVCDecoder.h      |  4 +
 7 files changed, 132 insertions(+), 2 deletions(-)

diff --git a/libstagefrighthw/scx15/Android.mk b/libstagefrighthw/scx15/Android.mk
index 879e569..e95fb7c 100644
--- a/libstagefrighthw/scx15/Android.mk
+++ b/libstagefrighthw/scx15/Android.mk
@@ -61,4 +61,8 @@ LOCAL_PROPRIETARY_MODULE := true
 
 LOCAL_CFLAGS:= -DLOG_TAG=\"$(TARGET_BOARD_PLATFORM).libstagefright\"
 
+ifeq ($(strip $(SOC_SCX35)),true)
+LOCAL_CFLAGS += -DSOC_SCX35
+endif
+
 include $(BUILD_SHARED_LIBRARY)
diff --git a/libstagefrighthw/scx15/SprdSimpleOMXComponent.cpp b/libstagefrighthw/scx15/SprdSimpleOMXComponent.cpp
index a393f2e..c8a273e 100644
--- a/libstagefrighthw/scx15/SprdSimpleOMXComponent.cpp
+++ b/libstagefrighthw/scx15/SprdSimpleOMXComponent.cpp
@@ -742,7 +742,32 @@ SprdSimpleOMXComponent::PortInfo *SprdSimpleOMXComponent::editPortInfo(
     CHECK_LT(portIndex, mPorts.size());
     return &mPorts.editItemAt(portIndex);
 }
+#ifdef SOC_SCX35
+bool SprdSimpleOMXComponent::isExecuting() {
+    return mState == OMX_StateExecuting;
+}
+
+void SprdSimpleOMXComponent::freeOutputBufferIOVA() {
+    PortInfo *port = &mPorts.editItemAt(OMX_DirOutput);
 
+    for (size_t i = 0; i < port->mBuffers.size(); ++i) {
+        BufferInfo *buffer = &port->mBuffers.editItemAt(i);
+        OMX_BUFFERHEADERTYPE *header = buffer->mHeader;
 
+        if(header->pOutputPortPrivate != NULL) {
+                BufferCtrlStruct *pBufCtrl = (BufferCtrlStruct*)(header->pOutputPortPrivate);
+                bool iommu_is_enable = MemoryHeapIon::Mm_iommu_is_enabled();
+
+                if (iommu_is_enable) {
+                    if(pBufCtrl->bufferFd > 0) {
+                        ALOGI("%s, fd: %d, iova: 0x%x", __FUNCTION__, pBufCtrl->bufferFd, pBufCtrl->phyAddr);
+                        MemoryHeapIon::Free_mm_iova(pBufCtrl->bufferFd, pBufCtrl->phyAddr, pBufCtrl->bufferSize);
+                        pBufCtrl->bufferFd = -1;
+                }
+            }
+        }
+    }
+}
+#endif
 
 }  // namespace android
diff --git a/libstagefrighthw/scx15/include/SprdSimpleOMXComponent.h b/libstagefrighthw/scx15/include/SprdSimpleOMXComponent.h
index 3783f01..89c8433 100644
--- a/libstagefrighthw/scx15/include/SprdSimpleOMXComponent.h
+++ b/libstagefrighthw/scx15/include/SprdSimpleOMXComponent.h
@@ -107,6 +107,10 @@ protected:
     virtual void onPortFlushPrepare(OMX_U32 portIndex);
 
     PortInfo *editPortInfo(OMX_U32 portIndex);
+#ifdef SOC_SCX35
+    bool isExecuting();
+    void freeOutputBufferIOVA();
+#endif
 
 private:
     enum {
diff --git a/omx_components/video/avc_sprd/Android.mk b/omx_components/video/avc_sprd/Android.mk
index c5591d8..e88dff4 100644
--- a/omx_components/video/avc_sprd/Android.mk
+++ b/omx_components/video/avc_sprd/Android.mk
@@ -23,7 +23,7 @@ include_list := \
 	$(LOCAL_PATH)/thumbnail/Android.mk \
 
 ifeq ($(SOC_SCX35),true)
-include_list += $(call all-named-subdir-makefiles, scx15)
+include_list += $(call all-named-subdir-makefiles, scx15/enc sc8830/dec )
 else
 include_list += $(call all-named-subdir-makefiles,$(TARGET_BOARD_PLATFORM))
 endif
diff --git a/omx_components/video/avc_sprd/sc8830/dec/Android.mk b/omx_components/video/avc_sprd/sc8830/dec/Android.mk
index ffd6b5f..0785bc2 100644
--- a/omx_components/video/avc_sprd/sc8830/dec/Android.mk
+++ b/omx_components/video/avc_sprd/sc8830/dec/Android.mk
@@ -12,9 +12,16 @@ LOCAL_C_INCLUDES := \
 	frameworks/native/include/ui \
 	frameworks/native/include/utils \
 	frameworks/native/include/media/hardware \
-	$(LOCAL_PATH)/../../../../../gralloc/$(TARGET_BOARD_PLATFORM) \
 	$(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ/usr/include/video 
 
+ifeq ($(strip $(SOC_SCX35)),true)
+LOCAL_C_INCLUDES += \
+	$(LOCAL_PATH)/../../../../../gralloc/scx15
+else
+LOCAL_C_INCLUDES += \
+	$(LOCAL_PATH)/../../../../../gralloc/$(TARGET_BOARD_PLATFORM)
+endif
+
 LOCAL_ADDITIONAL_DEPENDENCIES += \
 	$(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ/usr
 
@@ -22,6 +29,11 @@ LOCAL_CFLAGS := \
 	-DOSCL_EXPORT_REF= \
 	-DOSCL_IMPORT_REF=
 
+ifeq ($(strip $(SOC_SCX35)),true)
+LOCAL_CFLAGS += -DSOC_SCX35
+endif
+
+
 LOCAL_ARM_MODE := arm
 
 LOCAL_SHARED_LIBRARIES := \
diff --git a/omx_components/video/avc_sprd/sc8830/dec/SPRDAVCDecoder.cpp b/omx_components/video/avc_sprd/sc8830/dec/SPRDAVCDecoder.cpp
index 518c794..20ac2a0 100644
--- a/omx_components/video/avc_sprd/sc8830/dec/SPRDAVCDecoder.cpp
+++ b/omx_components/video/avc_sprd/sc8830/dec/SPRDAVCDecoder.cpp
@@ -254,6 +254,9 @@ SPRDAVCDecoder::SPRDAVCDecoder(
     mDumpStrmEnabled = !strcmp(value_dump, "true");
     ALOGI("%s, mDumpYUVEnabled: %d, mDumpStrmEnabled: %d", __FUNCTION__, mDumpYUVEnabled, mDumpStrmEnabled);
 
+#ifdef SOC_SCX35
+    mIOMMUEnabled = MemoryHeapIon::Mm_iommu_is_enabled();
+#else
     if (MemoryHeapIon::IOMMU_is_enabled(ION_MM)) {
         mIOMMUEnabled = true;
         mIOMMUID = ION_MM;
@@ -261,6 +264,8 @@ SPRDAVCDecoder::SPRDAVCDecoder(
         mIOMMUEnabled = true;
         mIOMMUID = ION_VSP;
     }
+#endif
+
     ALOGI("%s, is IOMMU enabled: %d, ID: %d", __FUNCTION__, mIOMMUEnabled, mIOMMUID);
 
     if(mDecoderSwFlag) {
@@ -481,9 +486,17 @@ status_t SPRDAVCDecoder::initDecoder() {
         } else {
             int ret;
             if (mIOMMUEnabled) {
+#ifdef SOC_SCX35
+                ret = mPmem_stream->get_mm_iova((int *) &phy_addr, (int *)&size);
+#else
                 ret = mPmem_stream->get_iova(mIOMMUID, &phy_addr, &size);
+#endif
             } else {
+#ifdef SOC_SCX35
+                ret = mPmem_stream->get_phy_addr_from_ion((int *)&phy_addr, (int *)&size);
+#else
                 ret = mPmem_stream->get_phy_addr_from_ion(&phy_addr, &size);
+#endif
             }
             if (ret < 0) {
                 ALOGE("Failed to alloc bitstream pmem buffer, get phy addr failed");
@@ -555,7 +568,11 @@ void SPRDAVCDecoder::releaseDecoder() {
             mPbuf_stream_v = NULL;
         } else {
             if (mIOMMUEnabled) {
+#ifdef SOC_SCX35
+                mPmem_stream->free_mm_iova(mPbuf_stream_p, mPbuf_stream_size);
+#else
                 mPmem_stream->free_iova(mIOMMUID, mPbuf_stream_p, mPbuf_stream_size);
+#endif
             }
             mPmem_stream.clear();
             mPbuf_stream_v = NULL;
@@ -565,7 +582,11 @@ void SPRDAVCDecoder::releaseDecoder() {
     }
     if (mPbuf_extra_v != NULL) {
         if (mIOMMUEnabled) {
+#ifdef SOC_SCX35
+            mPmem_extra->free_mm_iova(mPbuf_extra_p, mPbuf_extra_size);
+#else
             mPmem_extra->free_iova(mIOMMUID, mPbuf_extra_p, mPbuf_extra_size);
+#endif
         }
         mPmem_extra.clear();
         mPbuf_extra_v = NULL;
@@ -576,7 +597,11 @@ void SPRDAVCDecoder::releaseDecoder() {
     for (int i = 0; i < 17; i++) {
         if (mPbuf_mbinfo_v[i]) {
             if (mIOMMUEnabled) {
+#ifdef SOC_SCX35
+                mPmem_mbinfo[i]->free_mm_iova(mPbuf_mbinfo_p[i], mPbuf_mbinfo_size[i]);
+#else
                 mPmem_mbinfo[i]->free_iova(ION_MM, mPbuf_mbinfo_p[i], mPbuf_mbinfo_size[i]);
+#endif
             }
             mPmem_mbinfo[i].clear();
             mPbuf_mbinfo_v[i] = NULL;
@@ -884,7 +909,9 @@ OMX_ERRORTYPE SPRDAVCDecoder::internalUseBuffer(
         CHECK((*header)->pOutputPortPrivate != NULL);
         BufferCtrlStruct* pBufCtrl= (BufferCtrlStruct*)((*header)->pOutputPortPrivate);
         pBufCtrl->iRefCount = 1; //init by1
+#ifndef SOC_SCX35
         pBufCtrl->id = mIOMMUID;
+#endif
         if(mAllocateBuffers) {
             if(bufferPrivate != NULL) {
                 pBufCtrl->pMem = ((BufferPrivateStruct*)bufferPrivate)->pMem;
@@ -903,7 +930,11 @@ OMX_ERRORTYPE SPRDAVCDecoder::internalUseBuffer(
                 size_t bufferSize = 0;
                 native_handle_t *pNativeHandle = (native_handle_t *)((*header)->pBuffer);
                 struct private_handle_t *private_h = (struct private_handle_t *)pNativeHandle;
+#ifdef SOC_SCX35
+                MemoryHeapIon::Get_mm_iova(private_h->share_fd, (int *)&picPhyAddr, (int *)&bufferSize);
+#else
                 MemoryHeapIon::Get_iova(mIOMMUID, private_h->share_fd, &picPhyAddr, &bufferSize);
+#endif
 
                 pBufCtrl->pMem = NULL;
                 pBufCtrl->bufferFd = private_h->share_fd;
@@ -970,12 +1001,20 @@ OMX_ERRORTYPE SPRDAVCDecoder::allocateBuffer(
             }
 
             if (mIOMMUEnabled) {
+#ifdef SOC_SCX35
+                if(pMem->get_mm_iova((int *)&phyAddr, (int *)&bufferSize)) {
+#else
                 if(pMem->get_iova(mIOMMUID, &phyAddr, &bufferSize)) {
+#endif
                     ALOGE("get_mm_iova fail");
                     return OMX_ErrorInsufficientResources;
                 }
             } else {
+#ifdef SOC_SCX35
+                if(pMem->get_phy_addr_from_ion((int *) &phyAddr, (int *)&bufferSize)) {
+#else
                 if(pMem->get_phy_addr_from_ion(&phyAddr, &bufferSize)) {
+#endif
                     ALOGE("get_phy_addr_from_ion fail");
                     return OMX_ErrorInsufficientResources;
                 }
@@ -1016,7 +1055,11 @@ OMX_ERRORTYPE SPRDAVCDecoder::freeBuffer(
             if(pBufCtrl->pMem != NULL) {
                 ALOGI("freeBuffer, phyAddr: 0x%lx", pBufCtrl->phyAddr);
                 if (mIOMMUEnabled) {
+#ifdef SOC_SCX35
+                    pBufCtrl->pMem->free_mm_iova(pBufCtrl->phyAddr, pBufCtrl->bufferSize);
+#else
                     pBufCtrl->pMem->free_iova(mIOMMUID, pBufCtrl->phyAddr, pBufCtrl->bufferSize);
+#endif
                 }
                 pBufCtrl->pMem.clear();
             }
@@ -1299,7 +1342,11 @@ void SPRDAVCDecoder::onQueueFilled(OMX_U32 portIndex) {
                     native_handle_t *pNativeHandle = (native_handle_t *)outHeader->pBuffer;
                     struct private_handle_t *private_h = (struct private_handle_t *)pNativeHandle;
                     size_t bufferSize = 0;
+#ifdef SOC_SCX35
+                    MemoryHeapIon::Get_phy_addr_from_ion(private_h->share_fd, (int *)&picPhyAddr, (int *)&bufferSize);
+#else
                     MemoryHeapIon::Get_phy_addr_from_ion(private_h->share_fd, &picPhyAddr, &bufferSize);
+#endif
                     pBufCtrl->phyAddr = picPhyAddr;
                 }
             }
@@ -1385,11 +1432,23 @@ void SPRDAVCDecoder::onQueueFilled(OMX_U32 portIndex) {
         if (ret == MMDEC_OK) {
             if (!((decoderInfo.picWidth<= mCapability.max_width&& decoderInfo.picHeight<= mCapability.max_height)
                     || (decoderInfo.picWidth <= mCapability.max_height && decoderInfo.picHeight <= mCapability.max_width))) {
+#ifdef SOC_SCX35
+                /*
+                 * For kanas-w devices, the VSP should be able to properly decode 720p videos
+                 * at 60fps with few frames dropped, same goes for 30fps 1080p videos.
+                 * Don't dream about smoothly playing 60fps 1080p.
+                 * The mileage may vary between videos; some 30fps 1080p videos
+                 * could also be decoded with minimal to no frame drops.
+                 */
+                ALOGV("[%d,%d] is out of range [%d, %d], expect major slowdowns",
+                      decoderInfo.picWidth, decoderInfo.picHeight, mCapability.max_width, mCapability.max_height);
+#else
                 ALOGE("[%d,%d] is out of range [%d, %d], failed to support this format.",
                       decoderInfo.picWidth, decoderInfo.picHeight, mCapability.max_width, mCapability.max_height);
                 notify(OMX_EventError, OMX_ErrorFormatNotDetected, 0, NULL);
                 mSignalledError = true;
                 return;
+#endif
             }
 
             if (handlePortSettingChangeEvent(&decoderInfo)) {
@@ -1717,7 +1776,11 @@ int SPRDAVCDecoder::VSP_malloc_cb(unsigned int size_extra) {
 
         if (mPbuf_extra_v != NULL) {
             if (mIOMMUEnabled) {
+#ifdef SOC_SCX35
+                mPmem_extra->free_mm_iova(mPbuf_extra_p, mPbuf_extra_size);
+#else
                 mPmem_extra->free_iova(mIOMMUID, mPbuf_extra_p, mPbuf_extra_size);
+#endif
             }
             mPmem_extra.clear();
             mPbuf_extra_v = NULL;
@@ -1736,11 +1799,18 @@ int SPRDAVCDecoder::VSP_malloc_cb(unsigned int size_extra) {
             unsigned long phy_addr;
             size_t buffer_size;
 
+#ifdef SOC_SCX35
+            if (mIOMMUEnabled)
+                ret = mPmem_extra->get_mm_iova((int *)&phy_addr, (int *)&buffer_size);
+            else
+                ret = mPmem_extra->get_phy_addr_from_ion((int *)&phy_addr, (int *)&buffer_size);
+#else
             if (mIOMMUEnabled) {
                 ret = mPmem_extra->get_iova(mIOMMUID, &phy_addr, &buffer_size);
             } else {
                 ret = mPmem_extra->get_phy_addr_from_ion(&phy_addr, &buffer_size);
             }
+#endif
             if(ret < 0) {
                 ALOGE ("mPmem_extra: get phy addr fail %d",ret);
                 return -1;
@@ -1776,7 +1846,11 @@ int SPRDAVCDecoder::VSP_malloc_mbinfo_cb(unsigned int size_mbinfo, unsigned long
 
     if (mPbuf_mbinfo_v[idx] != NULL) {
         if (mIOMMUEnabled) {
+#ifdef SOC_SCX35
+            mPmem_mbinfo[idx]->free_mm_iova(mPbuf_mbinfo_p[idx], mPbuf_mbinfo_size[idx]);
+#else
             mPmem_mbinfo[idx]->free_iova(ION_MM, mPbuf_mbinfo_p[idx], mPbuf_mbinfo_size[idx]);
+#endif
         }
         mPmem_mbinfo[idx].clear();
         mPbuf_mbinfo_v[idx] = NULL;
@@ -1795,11 +1869,18 @@ int SPRDAVCDecoder::VSP_malloc_mbinfo_cb(unsigned int size_mbinfo, unsigned long
         unsigned long phy_addr;
         size_t buffer_size;
 
+#ifdef SOC_SCX35
+        if (mIOMMUEnabled)
+            ret = mPmem_mbinfo[idx]->get_mm_iova((int *)&phy_addr, (int *)&buffer_size);
+        else
+            ret = mPmem_mbinfo[idx]->get_phy_addr_from_ion((int *)&phy_addr, (int *)&buffer_size);
+#else
         if (mIOMMUEnabled) {
             ret = mPmem_mbinfo[idx]->get_iova(ION_MM, &phy_addr, &buffer_size);
         } else {
             ret = mPmem_mbinfo[idx]->get_phy_addr_from_ion(&phy_addr, &buffer_size);
         }
+#endif
         if(ret < 0) {
             ALOGE ("mPmem_mbinfo[%d]: get phy addr fail %d", idx, ret);
             return -1;
diff --git a/omx_components/video/avc_sprd/sc8830/dec/SPRDAVCDecoder.h b/omx_components/video/avc_sprd/sc8830/dec/SPRDAVCDecoder.h
index a18f21c..4124516 100644
--- a/omx_components/video/avc_sprd/sc8830/dec/SPRDAVCDecoder.h
+++ b/omx_components/video/avc_sprd/sc8830/dec/SPRDAVCDecoder.h
@@ -80,6 +80,10 @@ protected:
 
 private:
     enum {
+#ifdef SOC_SCX35
+        kInputPortIndex   = 0,
+        kOutputPortIndex  = 1,
+#endif
         kNumInputBuffers  = 8,
         kNumOutputBuffers = 5,
     };
-- 
2.25.0

