From 9703fdbe0a905fd1ccbb8afd4bc9842409d9269a Mon Sep 17 00:00:00 2001
From: Mark Enriquez <enriquezmark36@gmail.com>
Date: Thu, 18 Jul 2019 10:32:33 +0800
Subject: [PATCH 12/13] libcamera: scx15: IOCTL extensions for some SPRD
 devices

At least in kanas3g/kanas, there are a couple of miscommunications from the HAL
driver and the kernel drivers (yes, it's "drivers".).

The sensor_drv_k (kernelspace driver) uses a bit different IOCTL commands for
SENSOR_IO_SET_DVDD and SENSOR_IO_PD that it requires an array of unsigned 32 bit integers
to carry two values, the dvdd voltage or the powerdown parameter and the sensor id.
The sensor_drv_u (userspace driver) only passes the dvdd voltage or the powerdown parameter
without the sensor id parameter.
`TARGET_BOARD_CAMERA_IOCTL_EXTRA_PARAMS` can be to true to mitigate this.

Apparently SENSOR_IO_PD and some IOCTL to change the voltage are not enough to
power on a device causing the, second camera -- the front facing one --
to fail initialization.
There's a separate IOCTL that handles Power Ons and Offs; it's SENSOR_IO_POWER_ONOFF.
When `TARGET_BOARD_CAMERA_IOCTL_HAS_POWER_ONOFF` is true, the code will automatically
issue a SENSOR_IO_POWER_ONOFF on the `Sensor_PowerOn` function after calling the
sensor's poweron function.

The flash is set/powered on or off using another IOCTL command which is SENSOR_IO_SET_FLASH.
It does not trigger by sending an IOCTL command to v4l2 to open the flash.
`TARGET_BOARD_CAMERA_IOCTL_HAS_SET_FLASH`, when set to true will make the
`Sensor_SetFlash` function send this IOCTL command after the set flash callback
(to be set by SprdOEMCamera.c from a function from cmr_v4l2.c).

Change-Id: Ia64050ebfd0ef46ce058aae1c199a02b4c30c2fc
Signed-off-by: Mark Enriquez <enriquezmark36@gmail.com>
---
 libcamera/scx15/Camera.mk                     | 12 ++++
 libcamera/scx15/Camera2.mk                    | 12 ++++
 .../scx15/sensor_drv_u/src/sensor_drv_u.c     | 60 +++++++++++++++++++
 3 files changed, 84 insertions(+)

diff --git a/libcamera/scx15/Camera.mk b/libcamera/scx15/Camera.mk
index 6e8e035..3f766ec 100644
--- a/libcamera/scx15/Camera.mk
+++ b/libcamera/scx15/Camera.mk
@@ -245,6 +245,18 @@ ifeq ($(strip $(TARGET_BOARD_CAMERA_X3542)),true)
 LOCAL_CFLAGS += -DCONFIG_CAMERA_X3542
 endif
 
+ifeq ($(strip $(TARGET_BOARD_CAMERA_IOCTL_EXTRA_PARAMS)),true)
+LOCAL_CFLAGS += -DCONFIG_CAMERA_IOCTL_EXTRA_PARAMS
+endif
+
+ifeq ($(strip $(TARGET_BOARD_CAMERA_IOCTL_HAS_POWER_ONOFF)),true)
+LOCAL_CFLAGS += -DCONFIG_CAMERA_IOCTL_IOCTL_HAS_POWER_ONOFF
+endif
+
+ifeq ($(strip $(TARGET_BOARD_CAMERA_IOCTL_HAS_SET_FLASH)),true)
+LOCAL_CFLAGS += -DCONFIG_CAMERA_IOCTL_IOCTL_HAS_SET_FLASH
+endif
+
 ifeq ($(strip $(TARGET_BOARD_CAMERA_HAL_VERSION)),HAL1.0)
 LOCAL_MODULE := camera.$(TARGET_BOARD_PLATFORM)
 else
diff --git a/libcamera/scx15/Camera2.mk b/libcamera/scx15/Camera2.mk
index b22211e..1248255 100644
--- a/libcamera/scx15/Camera2.mk
+++ b/libcamera/scx15/Camera2.mk
@@ -242,6 +242,18 @@ ifeq ($(strip $(TARGET_BOARD_CAMERA_X3542)),true)
 LOCAL_CFLAGS += -DCONFIG_CAMERA_X3542
 endif
 
+ifeq ($(strip $(TARGET_BOARD_CAMERA_IOCTL_EXTRA_PARAMS)),true)
+LOCAL_CFLAGS += -DCONFIG_CAMERA_IOCTL_EXTRA_PARAMS
+endif
+
+ifeq ($(strip $(TARGET_BOARD_CAMERA_IOCTL_HAS_POWER_ONOFF)),true)
+LOCAL_CFLAGS += -DCONFIG_CAMERA_IOCTL_IOCTL_HAS_POWER_ONOFF
+endif
+
+ifeq ($(strip $(TARGET_BOARD_CAMERA_IOCTL_HAS_SET_FLASH)),true)
+LOCAL_CFLAGS += -DCONFIG_CAMERA_IOCTL_IOCTL_HAS_SET_FLASH
+endif
+
 ifeq ($(strip $(TARGET_BOARD_CAMERA_HAL_VERSION)),HAL2.0)
 LOCAL_MODULE := camera.$(TARGET_BOARD_PLATFORM)
 else
diff --git a/libcamera/scx15/sensor_drv_u/src/sensor_drv_u.c b/libcamera/scx15/sensor_drv_u/src/sensor_drv_u.c
index fdf1221..2bcadef 100644
--- a/libcamera/scx15/sensor_drv_u/src/sensor_drv_u.c
+++ b/libcamera/scx15/sensor_drv_u/src/sensor_drv_u.c
@@ -147,8 +147,13 @@ LOCAL int _Sensor_Device_PowerDown(BOOLEAN power_level)
 {
 	int ret = SENSOR_SUCCESS;
 	SENSOR_DRV_CHECK_ZERO(s_p_sensor_cxt);
+#if defined(CONFIG_CAMERA_IOCTL_EXTRA_PARAMS)
+	uint32_t params[2] = {power_level, s_p_sensor_cxt->sensor_register_info.cur_id};
 
+	ret = xioctl(s_p_sensor_cxt->fd_sensor, SENSOR_IO_PD, &params);
+#else
 	ret = xioctl(s_p_sensor_cxt->fd_sensor, SENSOR_IO_PD, &power_level);
+#endif
 
 	if (0 != ret)
 	{
@@ -159,6 +164,27 @@ LOCAL int _Sensor_Device_PowerDown(BOOLEAN power_level)
 	return ret;
 }
 
+#if defined(CONFIG_CAMERA_IOCTL_IOCTL_HAS_POWER_ONOFF)
+/* This function is to set power OFF or ON */
+LOCAL int _Sensor_Device_PowerON(BOOLEAN power_on)
+{
+	int ret = SENSOR_SUCCESS;
+	SENSOR_DRV_CHECK_ZERO(s_p_sensor_cxt);
+
+	uint32_t power = power_on ? 1 : 0;
+
+	ret = ioctl(s_p_sensor_cxt->fd_sensor, SENSOR_IO_POWER_ONOFF, &power);
+
+	if (0 != ret)
+	{
+		CMR_LOGE("_Sensor_Device_PowerON failed,  power = %u, ret=%d \n", power, ret);
+		ret = -1;
+	}
+
+	return ret;
+}
+#endif
+
 LOCAL int _Sensor_Device_SetVoltageMonitor(uint32_t vdd_value)
 {
 	int ret = SENSOR_SUCCESS;
@@ -194,8 +220,14 @@ LOCAL int _Sensor_Device_SetVoltageDVDD(uint32_t vdd_value)
 {
 	int ret = SENSOR_SUCCESS;
 	SENSOR_DRV_CHECK_ZERO(s_p_sensor_cxt);
+#if defined(CONFIG_CAMERA_IOCTL_EXTRA_PARAMS)
+	uint32_t params[2] = {vdd_value, s_p_sensor_cxt->sensor_register_info.cur_id};
 
+	ret = xioctl(s_p_sensor_cxt->fd_sensor, SENSOR_IO_SET_DVDD, &params);
+#else
 	ret = xioctl(s_p_sensor_cxt->fd_sensor, SENSOR_IO_SET_DVDD, &vdd_value);
+#endif
+
 	if (0 != ret)
 	{
 		CMR_LOGE("_Sensor_Device_SetVoltageDVDD failed,  vdd_value = %d, ret=%d \n", vdd_value, ret);
@@ -468,6 +500,23 @@ LOCAL int _Sensor_Device_I2CWrite(SENSOR_I2C_T_PTR i2c_tab)
 	return ret;
 }
 
+#if defined(CONFIG_CAMERA_IOCTL_IOCTL_HAS_SET_FLASH)
+LOCAL int _Sensor_Device_Set_Flash(uint32_t flash_level)
+{
+	int ret = SENSOR_SUCCESS;
+	SENSOR_DRV_CHECK_ZERO(s_p_sensor_cxt);
+
+	ret = xioctl(s_p_sensor_cxt->fd_sensor, SENSOR_IO_SET_FLASH, &flash_level);
+	if (0 != ret)
+	{
+		CMR_LOGE("_Sensor_Device_Set_Flash failed, ret=%d \n",  ret);
+		ret = -1;
+	}
+
+	return ret;
+}
+#endif
+
 LOCAL int _Sensor_Device_GetFlashLevel(SENSOR_FLASH_LEVEL_T *level)
 {
 	int ret = SENSOR_SUCCESS;
@@ -728,6 +777,9 @@ LOCAL void Sensor_PowerOn(BOOLEAN power_on)
 
 	if (PNULL != power_func) {
 		power_func(power_on);
+#if defined(CONFIG_CAMERA_IOCTL_IOCTL_HAS_POWER_ONOFF)
+		_Sensor_Device_PowerON(power_on);
+#endif
 	} else {
 		if (power_on) {
 			Sensor_PowerDown(power_down);
@@ -746,6 +798,7 @@ LOCAL void Sensor_PowerOn(BOOLEAN power_on)
 					  SENSOR_AVDD_CLOSED);
 		}
 	}
+
 }
 
 
@@ -2689,6 +2742,13 @@ uint32_t Sensor_SetFlash(uint32_t flash_mode)
 
 	if (s_p_sensor_cxt->set_flash_cb) {
 		(*s_p_sensor_cxt->set_flash_cb)(flash_mode);
+
+#if defined(CONFIG_CAMERA_IOCTL_IOCTL_HAS_SET_FLASH)
+		// Fire an IOCTL call if supported, but don't watch for the return value
+		// Since the function handles the error message
+		// and there shouldn't be any danger when it fails.
+		_Sensor_Device_Set_Flash(flash_mode);
+#endif
 	} else {
 		CMR_LOGE("flash cb have not been registered, error!");
 	}
-- 
2.21.0

