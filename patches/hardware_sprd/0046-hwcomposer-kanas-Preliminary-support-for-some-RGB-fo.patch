From dd04e4d108c8f7cfb3311aabb65742bf1d5f1880 Mon Sep 17 00:00:00 2001
From: Mark Enriquez <enriquezmark36@gmail.com>
Date: Tue, 5 May 2020 11:28:00 +0800
Subject: [PATCH 03/12] hwcomposer: kanas: Preliminary support for some RGB
 format layers when using GSP [WIP]

Some apps use some RGB format other than RGBA8888 and this causes
soft errors since the code does not know how to handle them.
The layers would then be prevented from being processed
and displayed on screen.

This patch should add the basic methods to handle those formats.
Code was imported from the newer sc8830 side of things.

Change-Id: I5c8d36d307bef540f82725d31974cc6ba503bc89
Signed-off-by: Mark Enriquez <enriquezmark36@gmail.com>
---
 .../SprdHWLayerList.cpp                       |   5 +
 hwcomposer/scx15/SprdUtil.cpp                 | 141 ++++++++++++------
 hwcomposer/scx15/SprdUtil.h                   |   3 +
 3 files changed, 106 insertions(+), 43 deletions(-)

diff --git a/hwcomposer/scx15/SprdPrimaryDisplayDevice/SprdHWLayerList.cpp b/hwcomposer/scx15/SprdPrimaryDisplayDevice/SprdHWLayerList.cpp
index f845b43..1b37ff9 100644
--- a/hwcomposer/scx15/SprdPrimaryDisplayDevice/SprdHWLayerList.cpp
+++ b/hwcomposer/scx15/SprdPrimaryDisplayDevice/SprdHWLayerList.cpp
@@ -663,6 +663,11 @@ int SprdHWLayerList:: prepareOSDLayer(SprdHWLayer *l)
         ALOGI_IF(mDebugFlag, "prepareOverlayComposerLayer find irregular layer, give up OverlayComposerGPU,ret 0, L%d", __LINE__);
         return 0;
     }
+#else
+    if (!SprdUtil::isLayerFormatSupported(privateH->format)) {
+        ALOGI_IF(mDebugFlag, "prepareOSDLayer: 0x%08x format not supported by GSP ret 0, L%d", privateH->format,__LINE__);
+        return 0;
+    }
 #endif
 
     l->setLayerType(LAYER_OSD);
diff --git a/hwcomposer/scx15/SprdUtil.cpp b/hwcomposer/scx15/SprdUtil.cpp
index e4b20d1..459cac5 100644
--- a/hwcomposer/scx15/SprdUtil.cpp
+++ b/hwcomposer/scx15/SprdUtil.cpp
@@ -449,6 +449,45 @@ GSP_ROT_ANGLE_E SprdUtil::rotationType_convert(int angle)
     return GSP_ROT_ANGLE_0;
 }
 
+/*
+ * func: formatType_convert
+ * desc: Translate Andriod HAL Image format type to GSP format type
+ * return: gsp type
+ */
+GSP_LAYER_SRC_DATA_FMT_E SprdUtil::formatType_convert(int format)
+{
+    switch(format) {
+        case HAL_PIXEL_FORMAT_YCbCr_420_SP://0x19
+            return GSP_SRC_FMT_YUV420_2P;
+
+        case HAL_PIXEL_FORMAT_YCrCb_420_SP:
+            return GSP_SRC_FMT_YUV420_2P;
+
+        case HAL_PIXEL_FORMAT_YV12:
+            return GSP_SRC_FMT_YUV420_3P;
+
+        case HAL_PIXEL_FORMAT_RGBA_8888:
+        case HAL_PIXEL_FORMAT_BGRA_8888:
+            return GSP_SRC_FMT_ARGB888;//?
+
+        case HAL_PIXEL_FORMAT_RGBX_8888:
+            return GSP_SRC_FMT_RGB888;//?
+
+        case HAL_PIXEL_FORMAT_RGB_565:
+            return GSP_SRC_FMT_RGB565;
+        default:
+            break;
+    }
+
+    ALOGE("SprdUtil[%04d]: unknown format:%d!",__LINE__,format);
+    return GSP_SRC_FMT_MAX_NUM;
+}
+
+bool SprdUtil::isLayerFormatSupported(int fmt)
+{
+    return (formatType_convert(fmt) != GSP_SRC_FMT_MAX_NUM);
+}
+
 int SprdUtil::composerLayers(SprdHWLayer *l1, SprdHWLayer *l2, private_handle_t* buffer1, private_handle_t* buffer2)
 {
     int32_t ret = 0;
@@ -589,32 +628,27 @@ int SprdUtil::composerLayers(SprdHWLayer *l1, SprdHWLayer *l2, private_handle_t*
             video_check_result = 1;
 
             //config Video ,use GSP L0
+            gsp_cfg_info.layer0_info.img_format = formatType_convert(private_h1->format);
+            if (gsp_cfg_info.layer0_info.img_format == GSP_SRC_FMT_MAX_NUM) {
+                ALOGE("SprdUtil::composerLayers[%d], layer1 format %d not supported",__LINE__,private_h1->format);
+                return -1;
+            }
+
             switch(private_h1->format) {
+            case HAL_PIXEL_FORMAT_RGB_565:
+            case HAL_PIXEL_FORMAT_BGRA_8888:
+                gsp_cfg_info.layer0_info.endian_mode.rgb_swap_mode = GSP_RGB_SWP_BGR;
+                break;
             case HAL_PIXEL_FORMAT_YCbCr_420_SP:
-                gsp_cfg_info.layer0_info.img_format = GSP_SRC_FMT_YUV420_2P;
 #ifdef GSP_ENDIAN_IMPROVEMENT
                 gsp_cfg_info.layer0_info.endian_mode.uv_word_endn = GSP_WORD_ENDN_2;
 #else
                 gsp_cfg_info.layer0_info.endian_mode.uv_word_endn = GSP_WORD_ENDN_1;
 #endif
-                break;
-            case HAL_PIXEL_FORMAT_YCrCb_420_SP:
-                gsp_cfg_info.layer0_info.img_format = GSP_SRC_FMT_YUV420_2P;//?
-                gsp_cfg_info.layer0_info.endian_mode.uv_word_endn = GSP_WORD_ENDN_0;//?
-                break;
-            case HAL_PIXEL_FORMAT_YV12:
-                gsp_cfg_info.layer0_info.img_format = GSP_SRC_FMT_YUV420_3P;//?
-                break;
-            case HAL_PIXEL_FORMAT_RGBA_8888:
-                gsp_cfg_info.layer0_info.img_format = GSP_SRC_FMT_ARGB888;
-                break;
-            case HAL_PIXEL_FORMAT_RGBX_8888:
-                gsp_cfg_info.layer0_info.img_format = GSP_SRC_FMT_RGB888;
-                break;
             default:
-                ALOGE("SprdUtil::composerLayers[%d],private_h1->format:%d not supported",__LINE__,private_h1->format);
-                return -1;
+                break;
             }
+
 #ifdef GSP_ADDR_TYPE_PHY
             MemoryHeapIon::Get_phy_addr_from_ion(private_h1->share_fd, &(private_h1->phyaddr), &size);
             gsp_cfg_info.layer0_info.src_addr.addr_y = private_h1->phyaddr;
@@ -796,33 +830,54 @@ int SprdUtil::composerLayers(SprdHWLayer *l1, SprdHWLayer *l2, private_handle_t*
         {
             osd_check_result = 1;
             //config OSD,use GSP L1
-            if (layer2_Format == HAL_PIXEL_FORMAT_RGBA_8888 ||
-                layer2_Format == HAL_PIXEL_FORMAT_RGBX_8888)
-            {
-                gsp_cfg_info.layer1_info.img_format = GSP_SRC_FMT_ARGB888;
-            }
-            else if (layer2_Format == HAL_PIXEL_FORMAT_RGB_565)
-            {
+
             /*
+             * NOTE: It is possible to support YUV under layer1 but
+             * the use is usually limited as those YUV layers are usually
+             * video layers that need scaling. layer1 doesn't support scaling
+             */
+            gsp_cfg_info.layer1_info.img_format = formatType_convert(layer2_Format);
+            if (gsp_cfg_info.layer1_info.img_format == GSP_SRC_FMT_MAX_NUM) {
+                ALOGE("SprdUtil::composerLayers[%d], layer2 format %d not supported",__LINE__, layer2_Format);
+                return -1;
+            }
+
+            switch(layer2_Format) {
+            case HAL_PIXEL_FORMAT_RGB_565:
+                /*
+                    int EndianFlag0 = 0;//rgb swap
+                    int EndianFlag1 = 0;// y endian
+                    queryEndianFlag("endian0.hwc.flag",&EndianFlag0);
+                    queryEndianFlag("endian1.hwc.flag",&EndianFlag1);
+                    gsp_cfg_info.layer1_info.img_format = GSP_SRC_FMT_RGB565;
+                    gsp_cfg_info.layer1_info.endian_mode.rgb_swap_mode = (GSP_RGB_SWAP_MOD_E)(EndianFlag0 & 0x7);
+                    gsp_cfg_info.layer1_info.endian_mode.rgb_swap_mode = GSP_RGB_SWP_BGR;
+                    gsp_cfg_info.layer1_info.endian_mode.y_word_endn = (GSP_WORD_ENDN_E)(EndianFlag1 & 0x3);
+                    gsp_cfg_info.layer1_info.endian_mode.y_lng_wrd_endn = (GSP_LNG_WRD_ENDN_E)(EndianFlag1 & 0x4);
+                    gsp_cfg_info.layer1_info.img_format = GSP_SRC_FMT_RGB565;
+                */
+                    gsp_cfg_info.layer1_info.endian_mode.rgb_swap_mode = GSP_RGB_SWP_BGR;
+                /*
                 int EndianFlag0 = 0;//rgb swap
                 int EndianFlag1 = 0;// y endian
-                queryEndianFlag("endian0.hwc.flag",&EndianFlag0);
-                queryEndianFlag("endian1.hwc.flag",&EndianFlag1);
-                gsp_cfg_info.layer1_info.img_format = GSP_SRC_FMT_RGB565;
-                gsp_cfg_info.layer1_info.endian_mode.rgb_swap_mode = (GSP_RGB_SWAP_MOD_E)(EndianFlag0 & 0x7);
-                gsp_cfg_info.layer1_info.endian_mode.rgb_swap_mode = GSP_RGB_SWP_BGR;
-                gsp_cfg_info.layer1_info.endian_mode.y_word_endn = (GSP_WORD_ENDN_E)(EndianFlag1 & 0x3);
-                gsp_cfg_info.layer1_info.endian_mode.y_lng_wrd_endn = (GSP_LNG_WRD_ENDN_E)(EndianFlag1 & 0x4);
-            */
-                gsp_cfg_info.layer1_info.img_format = GSP_SRC_FMT_RGB565;
-                gsp_cfg_info.layer1_info.endian_mode.rgb_swap_mode = GSP_RGB_SWP_BGR;
-            /*
-            int EndianFlag0 = 0;//rgb swap
-            int EndianFlag1 = 0;// y endian
 
-            queryEndianFlag("layer.hwc.pitch",&EndianFlag0);
-            */
+                queryEndianFlag("layer.hwc.pitch",&EndianFlag0);
+                */
+
+                break;
+            case HAL_PIXEL_FORMAT_BGRA_8888:
+                gsp_cfg_info.layer1_info.endian_mode.rgb_swap_mode = GSP_RGB_SWP_BGR;
+                break;
+            case HAL_PIXEL_FORMAT_YCbCr_420_SP:
+#ifdef GSP_ENDIAN_IMPROVEMENT
+                gsp_cfg_info.layer1_info.endian_mode.uv_word_endn = GSP_WORD_ENDN_2;
+#else
+                gsp_cfg_info.layer1_info.endian_mode.uv_word_endn = GSP_WORD_ENDN_1;
+#endif
+            default:
+                break;
             }
+
 #ifdef GSP_ADDR_TYPE_PHY
             MemoryHeapIon::Get_phy_addr_from_ion(private_h2->share_fd, &(private_h2->phyaddr), &size);
             gsp_cfg_info.layer1_info.src_addr.addr_v =
@@ -982,11 +1037,11 @@ int SprdUtil::composerLayers(SprdHWLayer *l1, SprdHWLayer *l2, private_handle_t*
 #endif
 
 #ifdef GSP_MAX_OSD_LAYERS
-            // Force RGB output even if layer0 is a YUV layer when the
-            // conditions are met or just follow the format of layer0.
+            // Force RGBA8888 output even if layer0 is a YUV layer if the
+            // conditions are met.
             if (force_RGB_dest ||
-                (gsp_cfg_info.layer0_info.img_format == GSP_SRC_FMT_ARGB888) ||
-                (gsp_cfg_info.layer0_info.img_format == GSP_SRC_FMT_RGB888))
+                (gsp_cfg_info.layer0_info.img_format >= GSP_SRC_FMT_ARGB888 &&
+                gsp_cfg_info.layer0_info.img_format <= GSP_SRC_FMT_RGB565))
             {
                 gsp_cfg_info.layer_des_info.img_format = GSP_DST_FMT_ARGB888;
             }
diff --git a/hwcomposer/scx15/SprdUtil.h b/hwcomposer/scx15/SprdUtil.h
index ef7f2f8..594c7d0 100644
--- a/hwcomposer/scx15/SprdUtil.h
+++ b/hwcomposer/scx15/SprdUtil.h
@@ -164,6 +164,8 @@ public:
 
 #ifdef PROCESS_VIDEO_USE_GSP
     int composerLayers(SprdHWLayer *l1, SprdHWLayer *l2, private_handle_t* buffer1, private_handle_t* buffer2);
+    // Check if the format is supported by GSP
+    static bool isLayerFormatSupported(int fmt);
 #endif
 
 private:
@@ -189,6 +191,7 @@ private:
 #ifdef PROCESS_VIDEO_USE_GSP
     // Imported from the newer sc8830 version.
     GSP_ROT_ANGLE_E rotationType_convert(int angle);
+    static GSP_LAYER_SRC_DATA_FMT_E formatType_convert(int format);
 
     int openGSPDevice();
     int acquireTmpBuffer(int width, int height, int format, private_handle_t* friendBuffer, int *outBufferPhy, int *outBufferSize);
-- 
2.27.0

