From 4527b7ca5e99e3bd7d66f2959ff60bef96e6f438 Mon Sep 17 00:00:00 2001
From: Mark Enriquez <enriquezmark36@gmail.com>
Date: Thu, 6 Aug 2020 15:29:50 +0800
Subject: [PATCH 2/4] audio: scx15: Revert all period related changes

This reverts these set of commits:
ab38dfb audio: scx15: Temporarily disable low_power settings for now.
08b5f20 audio: kanas: Unify fast and "low power" pcm config
26e1e2d audio: scx15: Maximize Long Periods and minimize Short periods

I'm going to condense and rewrite the patch after reversing the values used
in the stock rom. Initial tests from that rewrite show further reduction in
CPU usage from 1.3% to 0.6%. Also, that new rewrite will have this change
toggle-able by a property.

Change-Id: Icebd51c34385325e6c50e1c4a735a654f3dadbfc
Signed-off-by: Mark Enriquez <enriquezmark36@gmail.com>
---
 audio/scx15/audio_hw.c | 71 ++++++++++++++++++------------------------
 1 file changed, 31 insertions(+), 40 deletions(-)

diff --git a/audio/scx15/audio_hw.c b/audio/scx15/audio_hw.c
index 72e8f36..a3c6a7a 100644
--- a/audio/scx15/audio_hw.c
+++ b/audio/scx15/audio_hw.c
@@ -141,12 +141,12 @@
 #define SHORT_PERIOD_SIZE (VBC_BASE_FRAME_COUNT * SHORT_PERIOD_MULTIPLIER)
 /* number of short periods in a long period (low power) */
 #ifdef _LPA_IRAM
-#define LONG_PERIOD_MULTIPLIER 20 /* 90.625 ms */
+#define LONG_PERIOD_MULTIPLIER 3 /* 87 ms */
 #else
-#define LONG_PERIOD_MULTIPLIER 80  /* 362.5 ms */
+#define LONG_PERIOD_MULTIPLIER 6  /* 174 ms */
 #endif
 /* number of frames per long period (low power) */
-#define LONG_PERIOD_SIZE (VBC_BASE_FRAME_COUNT * LONG_PERIOD_MULTIPLIER)
+#define LONG_PERIOD_SIZE (SHORT_PERIOD_SIZE * LONG_PERIOD_MULTIPLIER)
 /* number of periods for low power playback */
 #define PLAYBACK_LONG_PERIOD_COUNT 2
 /* number of pseudo periods for low latency playback */
@@ -190,6 +190,17 @@ struct pcm_config pcm_config_mm = {
     .period_size = LONG_PERIOD_SIZE,
     .period_count = PLAYBACK_LONG_PERIOD_COUNT,
     .format = PCM_FORMAT_S16_LE,
+    .start_threshold = SHORT_PERIOD_SIZE,
+    .avail_min = SHORT_PERIOD_SIZE,
+};
+
+
+struct pcm_config pcm_config_mm_fast = {
+    .channels = 2,
+    .rate = DEFAULT_OUT_SAMPLING_RATE,
+    .period_size = SHORT_PERIOD_SIZE,
+    .period_count = PLAYBACK_SHORT_PERIOD_COUNT,
+    .format = PCM_FORMAT_S16_LE,
     .start_threshold = SHORT_PERIOD_SIZE/2,
     .avail_min = SHORT_PERIOD_SIZE/2,
 };
@@ -1602,8 +1613,12 @@ static int start_output_stream(struct tiny_stream_out *out)
         }
         BLUE_TRACE("open s_tinycard in");
         card = s_tinycard;
-        out->config = pcm_config_mm;
-        out->write_threshold = -1;
+	if(out->flags & AUDIO_OUTPUT_FLAG_DEEP_BUFFER) {
+	    out->config = pcm_config_mm;
+	}
+	else {
+	    out->config = pcm_config_mm_fast;
+	}
         out->low_power = 1;
 
         out->pcm = pcm_open(card, port, PCM_OUT | PCM_MMAP | PCM_NOIRQ, &out->config);
@@ -1686,8 +1701,6 @@ static size_t out_get_buffer_size(const struct audio_stream *stream)
        multiple of 16 frames, as audioflinger expects audio buffers to
        be a multiple of 16 frames */
     size_t size = (out->config.period_size * DEFAULT_OUT_SAMPLING_RATE) / out->config.rate;
-    size = (size * DEFAULT_OUT_SAMPLING_RATE) / out->config.rate;
-
     size = ((size + 15) / 16) * 16;
     BLUE_TRACE("[TH] size=%d, frame_size=%d", size, audio_stream_frame_size(stream));
     return size * audio_stream_frame_size(stream);
@@ -2105,7 +2118,7 @@ static ssize_t out_write(struct audio_stream_out *stream, const void* buffer,
     size_t out_frames =0;
     struct tiny_stream_in *in;
     bool low_power;
-    int kernel_frames = 0;
+    int kernel_frames;
     void *buf;
     static long time1=0, time2=0, deltatime=0, deltatime2=0;
     static long time3=0, time4=0, deltatime3=0,write_index=0, writebytes=0;
@@ -2221,18 +2234,13 @@ static ssize_t out_write(struct audio_stream_out *stream, const void* buffer,
         in_frames = bytes / frame_size;
         out_frames = RESAMPLER_BUFFER_SIZE / frame_size;
 
-        if ((low_power != out->low_power) || (out->write_threshold == -1)) {
-#if 0
+        if ((low_power != out->low_power) && (out->flags & AUDIO_OUTPUT_FLAG_DEEP_BUFFER)) {
             if (low_power) {
-                out->config.avail_min = LONG_PERIOD_SIZE * PLAYBACK_LONG_PERIOD_COUNT - in_frames + VBC_BASE_FRAME_COUNT;
-                out->write_threshold = out->config.avail_min;
+                out->config.avail_min = (out->config.period_size*out->config.period_count * 3) / 4;
                 ALOGW("low_power out->write_threshold=%d, config.avail_min=%d, start_threshold=%d",
                         out->write_threshold,out->config.avail_min, out->config.start_threshold);
-            } else
-#endif
-            {
-                out->config.avail_min = SHORT_PERIOD_SIZE / 2;
-                out->write_threshold = SHORT_PERIOD_SIZE * (PLAYBACK_SHORT_PERIOD_COUNT);
+            } else {
+                out->config.avail_min = SHORT_PERIOD_SIZE;
                 ALOGW("out->write_threshold=%d, config.avail_min=%d, start_threshold=%d",
                         out->write_threshold,out->config.avail_min, out->config.start_threshold);
             }
@@ -2252,27 +2260,6 @@ static ssize_t out_write(struct audio_stream_out *stream, const void* buffer,
             out_frames = in_frames;
             buf = (void *)buffer;
         }
-
-        /* do not allow more than out->write_threshold frames in kernel pcm driver buffer */
-        do {
-            struct timespec time_stamp;
-
-            if (pcm_get_htimestamp(out->pcm, (unsigned int *)&kernel_frames, &time_stamp) < 0)
-                break;
-            kernel_frames = pcm_get_buffer_size(out->pcm) - kernel_frames;
-
-            if (kernel_frames > out->write_threshold){
-                unsigned long time = (unsigned long)
-                        (((int64_t)(kernel_frames - out->write_threshold) * 1000000) /
-                                DEFAULT_OUT_SAMPLING_RATE);
-
-                if (time < MIN_WRITE_SLEEP_US)
-                    time = MIN_WRITE_SLEEP_US;
-                usleep(time);
-            }
-
-        } while (kernel_frames > out->write_threshold);
-
         XRUN_TRACE("in_frames=%d, out_frames=%d", in_frames, out_frames);
         XRUN_TRACE("out->write_threshold=%d, config.avail_min=%d, start_threshold=%d",
                 out->write_threshold,out->config.avail_min, out->config.start_threshold);
@@ -2280,7 +2267,6 @@ static ssize_t out_write(struct audio_stream_out *stream, const void* buffer,
             time1 = getCurrentTimeUs();
         }
         ret = pcm_mmap_write(out->pcm, (void *)buf, out_frames * frame_size);//music playback
-
         if(modem->debug_info.enable) {
             time2 = getCurrentTimeUs();
             deltatime2 = ((time1>time2)?(time1-time2):(time2-time1));
@@ -3326,7 +3312,12 @@ static int adev_open_output_stream(struct audio_hw_device *dev,
     out->stream.write = out_write;
     out->stream.get_render_position = out_get_render_position;
 
-    out->config = pcm_config_mm;
+    if(flags&AUDIO_OUTPUT_FLAG_DEEP_BUFFER) {
+	out->config = pcm_config_mm;
+    }
+    else {
+	out->config = pcm_config_mm_fast;
+    }
 
     out->dev = ladev;
     out->standby = 1;
-- 
2.28.0

