From 03ee216cc03321a0d4ef296b17cae5ccbccc9d22 Mon Sep 17 00:00:00 2001
From: Mark Enriquez <enriquezmark36@gmail.com>
Date: Thu, 9 Jan 2020 16:48:27 +0800
Subject: [PATCH] hwcomposer:scx15: Use OverlayComposer from the sc8830 side

It turns out that the OverlayComposer on the sc8830 is more up-to-date
than what we have now. And, migrating over that version is as simple
as using the same code without alterations.

The main reason to use this instead is to solve the bug where
the ui elements would be stretched out of the left side of the screen
when a video layer is present (e.g. playing a video on
the YouTube app)

To test this:
1. Play a video in the YouTube app, or some local video file via
the AOSP's "Video Player" app.
2. Make sure the video is playing in portrait mode; this makes the
bug obvious.
3. Adjust the volume to show Android's native volume slider.
4. Check whether the volume slider "dialog" "underflows" on the left side
of the screen. It should not flow outside of the screen.

Change-Id: I706117b873280d154fb1e0e794663311e1bdfed3
Signed-off-by: Mark Enriquez <enriquezmark36@gmail.com>
---
 hwcomposer/scx15/OverlayComposer/Layer.cpp    | 203 +++++++++---------
 hwcomposer/scx15/OverlayComposer/Layer.h      |   1 +
 .../scx15/OverlayComposer/OverlayComposer.cpp |  47 ++--
 .../scx15/OverlayComposer/OverlayComposer.h   |   3 -
 4 files changed, 121 insertions(+), 133 deletions(-)

diff --git a/hwcomposer/scx15/OverlayComposer/Layer.cpp b/hwcomposer/scx15/OverlayComposer/Layer.cpp
index 7fbf60a..b2f9927 100644
--- a/hwcomposer/scx15/OverlayComposer/Layer.cpp
+++ b/hwcomposer/scx15/OverlayComposer/Layer.cpp
@@ -32,6 +32,7 @@
 #include "Layer.h"
 #include "GLErro.h"
 #include "OverlayComposer.h"
+#include <hardware/hwcomposer.h>
 
 
 namespace android
@@ -52,15 +53,6 @@ namespace android
 #define GL_CHECK(x) x
 #endif
 
-
-static GLfloat vertices[] = {
-    0.0f, 0.0f,
-    0.0f, 0.0f,
-    0.0f,  0.0f,
-    0.0f,  0.0f
-};
-
-
 static GLfloat texcoords[] = {
     0.0f, 0.0f,
     1.0f, 0.0f,
@@ -116,7 +108,7 @@ struct TexCoords {
 
 GLfloat mVertices[4][2];
 struct TexCoords texCoord[4];
-
+struct TexCoords vertices[4];
 
 Layer::Layer(OverlayComposer* composer, struct private_handle_t *h)
     : mComposer(composer), mPrivH(h),
@@ -244,6 +236,18 @@ void Layer::setLayerAlpha(float alpha)
     mAlpha = alpha;
 }
 
+void Layer::setBlendFlag(int32_t blendFlag)
+{
+    if (blendFlag == HWC_BLENDING_PREMULT)
+    {
+        mPremultipliedAlpha = true;
+    }
+    else
+    {
+        mPremultipliedAlpha = false;
+    }
+}
+
 bool Layer::setLayerTransform(uint32_t transform)
 {
     mTransform = transform;
@@ -332,14 +336,18 @@ void Layer::computeTransformMatrix()
                 case PIXEL_FORMAT_RGB_888:
                 case PIXEL_FORMAT_RGB_565:
                 case PIXEL_FORMAT_BGRA_8888:
+                case PIXEL_FORMAT_RGBA_5551:
+                case PIXEL_FORMAT_RGBA_4444:
                     // We know there's no subsampling of any channels, so we
                     // only need to shrink by a half a pixel.
                     shrinkAmount = 0.5;
+                    break;
 
                 default:
                     // If we don't recognize the format, we must assume the
                     // worst case (that we care about), which is YUV420.
-                    shrinkAmount = 1.0;
+                    shrinkAmount = 0.0;
+                    break;
             }
         }
 
@@ -379,87 +387,89 @@ bool Layer::prepareDrawData()
 {
     sp<GraphicBuffer>& buf(mGFXBuffer);
 
-    GLfloat left = GLfloat(mRect->left) / GLfloat(mRect->right);
-    GLfloat top = GLfloat(mRect->top) / GLfloat(mRect->bottom);
-    GLfloat right = GLfloat(mRect->right) / GLfloat(mRect->right);
-    GLfloat bottom = GLfloat(mRect->bottom) / GLfloat(mRect->bottom);
-
-    /*
-     *  The video layer height maybe loss some accuracy
-     *  when GPU transform float number into int number.
-     *  Here, just Compensate for the loss.
-     * */
-    int format = buf->getPixelFormat();
-    if ((mTransform == 0 ) &&
-        (format == HAL_PIXEL_FORMAT_YCbCr_420_SP ||
-        format == HAL_PIXEL_FORMAT_YCrCb_420_SP ||
-        format == HAL_PIXEL_FORMAT_YV12))
-    {
-        float height = float(mRect->bottom - mRect->top);
-        float pixelOffset = 1.0 / height;
-
-        top -= pixelOffset;
-        bottom += pixelOffset;
-    }
-
-    /*
-     *  Some RGB layer is cropped, it will cause RGB layer display abnormal.
-     *  Here, just correct the RGB layer to right region.
-     * */
-    if ((mRect->top > 0) &&
-        (format == HAL_PIXEL_FORMAT_RGBA_8888 ||
-         format == HAL_PIXEL_FORMAT_RGBX_8888 ||
-         format == HAL_PIXEL_FORMAT_RGB_565))
-    {
-        float pixelOffset = 1.0 / float(mRect->bottom);
-        top -= float(mRect->top) * pixelOffset;
-    }
+    /*Overlay play video is consistent  wtih GSP play video.
+     * Please refer to the SprdUtil.cpp
+     */
+    GLfloat left = GLfloat(mRect->left & 0xFFFFFFFE) / GLfloat(mPrivH->width);
+    GLfloat top = GLfloat(mRect->top & 0xFFFFFFFE) / GLfloat(mPrivH->height);
+    GLfloat right = GLfloat(mRect->right & 0xFFFFFFFE) / GLfloat(mPrivH->width);
+    /*Overlay play video maybe loss some accuracy,Bug313521*/
+    GLfloat bottom = GLfloat((mRect->bottom-1) & 0xFFFFFFFE) / GLfloat(mPrivH->height);
 
     texCoord[0].u = texCoord[1].u = left;
     texCoord[0].v = texCoord[3].v = top;
     texCoord[1].v = texCoord[2].v = bottom;
     texCoord[2].u = texCoord[3].u = right;
 
+    /*
+     *  Caculate the vertex coordinate
+     * */
+    /*Overlay play video is consistent  wtih GSP play video.
+     * Please refer to the SprdUtil.cpp
+     */
+    left   = (GLfloat)(mRV->left & 0xFFFFFFFE);
+    if (mRV->top & 0x1) {
+        top = (GLfloat)(mRV->top + 1);
+    } else {
+        top = (GLfloat)(mRV->top);
+    }
+    right  = (GLfloat)(mRV->right & 0xFFFFFFFE);
+    bottom = (GLfloat)((mRV->bottom)& 0xFFFFFFFE);
 
-    for (int i = 0; i < 4; i++)
-    {
-        texCoord[i].v = 1.0f - texCoord[i].v;
+    if (mTransform & NATIVE_WINDOW_TRANSFORM_FLIP_H) {
+        GLfloat temp = left;
+        left = right;
+        right = temp;
     }
 
+    if (mTransform & NATIVE_WINDOW_TRANSFORM_FLIP_V) {
+        GLfloat temp = top;
+        top = bottom;
+        bottom = temp;
+    }
 
+    vertices[0].u = vertices[1].u = left;
+    vertices[0].v = vertices[3].v = top;
+    vertices[1].v = vertices[2].v = bottom;
+    vertices[2].u = vertices[3].u = right;
 
     /*
-     *  Caculate the vertex coordinate
+     * Rotate 90 degrees clockwise
      * */
-    vertices[0] = (GLfloat)mRV->left;
-    vertices[1] = (GLfloat)mRV->top;
-    vertices[2] = (GLfloat)mRV->left;
-    vertices[3] = (GLfloat)mRV->bottom;
-    vertices[4] = (GLfloat)mRV->right;
-    vertices[5] = (GLfloat)mRV->bottom;
-    vertices[6] = (GLfloat)mRV->right;
-    vertices[7] = (GLfloat)mRV->top;
-
-    unsigned int fb_height = mComposer->getDisplayPlane()->getHeight();
+    if (mTransform & NATIVE_WINDOW_TRANSFORM_ROT_90) {
+        int left_top = 0, left_bottom = 0, right_top = 0, right_bottom = 0;
+        struct TexCoords    center,temp;
+
+        center.u = (left + right)/2;
+        center.v = (top + bottom)/2;
+
+        for (int i = 0; i < 4; i++) {
+            if (vertices[i].u > center.u ) {
+                if (vertices[i].v > center.v) {
+                    right_bottom = i;
+                } else {
+                    right_top = i;
+                }
+            } else {
+                if (vertices[i].v > center.v) {
+                    left_bottom = i;
+                } else {
+                    left_top = i;
+                }
+            }
+        }
 
-    vertices[1] = (GLfloat)fb_height - vertices[1];
-    vertices[3] = (GLfloat)fb_height - vertices[3];
-    vertices[5] = (GLfloat)fb_height - vertices[5];
-    vertices[7] = (GLfloat)fb_height - vertices[7];
+        temp                   = vertices[left_top];
+        vertices[left_top]     = vertices[right_top];
+        vertices[right_top]    = vertices[right_bottom];
+        vertices[right_bottom] = vertices[left_bottom];
+        vertices[left_bottom]  = temp;
+    }
 
-    /*
-     * Here, some region from SurfacFlinger have exceeded the screen
-     * size. So we remove these abnormal region, it will reduce some
-     * garbage when rotating the phone.
-     * Temporary disable this parameters check
-     * */
-    /*if (mRV->left < 0 || mRV->left > mFBWidth || mRV->right == mRV->bottom ||
-        mRV->top < 0 || mRV->top > mFBHeight ||
-        mRV->right > mFBWidth || mRV->bottom > mFBHeight)
-    {
-        mSkipFlag = true;
-        memset(vertices, 0, sizeof(vertices));
-    }*/
+    unsigned int fb_height = mComposer->getDisplayPlane()->getHeight();
+    for (int i = 0; i < 4; i++) {
+        vertices[i].v = (GLfloat)fb_height - vertices[i].v;
+    }
 
    return true;
 }
@@ -488,9 +498,10 @@ int Layer::draw()
     glTexParameterx(GL_TEXTURE_EXTERNAL_OES, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
     glTexParameterx(GL_TEXTURE_EXTERNAL_OES, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
 
-    computeTransformMatrix();
+    //computeTransformMatrix();
     glMatrixMode(GL_TEXTURE);
-    glLoadMatrixf(mCurrentTransformMatrix);
+    glLoadIdentity();
+    //glLoadMatrixf(mCurrentTransformMatrix);
     glMatrixMode(GL_MODELVIEW);
     glLoadIdentity();
 
@@ -506,24 +517,24 @@ int Layer::draw()
      *  By default, we use Premultiplied Alpha
      * */
     GLenum src = mPremultipliedAlpha ? GL_ONE : GL_SRC_ALPHA;
-    //if (mAlpha < 0xFF)
-    //{
-    //    const GLfloat alpha = (GLfloat)mAlpha * (1.0f/255.0f);
-    //    if (mPremultipliedAlpha)
-    //    {
-    //        glColor4f(alpha, alpha, alpha, alpha);
-    //    }
-    //    else
-    //    {
-    //        glColor4f(1, 1, 1, alpha);
-    //    }
-    //    glEnable(GL_BLEND);
-    //    glBlendFunc(src, GL_ONE_MINUS_SRC_ALPHA);
-    //    glTexEnvx(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
-    //}
-    //else
+    if (mAlpha < 0xFF)
+    {
+        const GLfloat alpha = (GLfloat)mAlpha * (1.0f/255.0f);
+        if (mPremultipliedAlpha)
+        {
+            glColor4f(alpha, alpha, alpha, alpha);
+        }
+        else
+        {
+            glColor4f(1.0f, 1.0f, 1.0f, alpha);
+        }
+        glTexEnvx(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
+        glEnable(GL_BLEND);
+        glBlendFunc(src, GL_ONE_MINUS_SRC_ALPHA);
+    }
+    else
     {
-        glColor4f(1, 1, 1, 1);
+        glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
         glTexEnvx(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);
         glEnable(GL_BLEND);
         glBlendFunc(src, GL_ONE_MINUS_SRC_ALPHA);
diff --git a/hwcomposer/scx15/OverlayComposer/Layer.h b/hwcomposer/scx15/OverlayComposer/Layer.h
index a512feb..a789227 100644
--- a/hwcomposer/scx15/OverlayComposer/Layer.h
+++ b/hwcomposer/scx15/OverlayComposer/Layer.h
@@ -67,6 +67,7 @@ public:
     bool setPlaneTransform(uint8_t orientation);
     bool setLayerRect(struct LayerRect *rect, struct LayerRect *rV);
     void setLayerAlpha(float alpha);
+    void setBlendFlag(int32_t blendFlag);
 
 private:
     OverlayComposer* mComposer;
diff --git a/hwcomposer/scx15/OverlayComposer/OverlayComposer.cpp b/hwcomposer/scx15/OverlayComposer/OverlayComposer.cpp
index a4ebaaa..34da402 100644
--- a/hwcomposer/scx15/OverlayComposer/OverlayComposer.cpp
+++ b/hwcomposer/scx15/OverlayComposer/OverlayComposer.cpp
@@ -40,7 +40,6 @@ namespace android
 
 OverlayComposer::OverlayComposer(SprdPrimaryPlane *displayPlane, sp<OverlayNativeWindow> NativeWindow)
     : mDisplayPlane(displayPlane),
-      mClearBuffer(false),
       mList(NULL),
       mNumLayer(0), InitFlag(0),
       mWindow(NativeWindow),
@@ -110,11 +109,8 @@ bool OverlayComposer::threadLoop()
     /* *******************************
      * waiting display
      * *******************************/
-    if (mClearBuffer == false)
-    {
-        sem_wait(&displaySem);
-        swapBuffers();
-    }
+    sem_wait(&displaySem);
+    swapBuffers();
 
     return true;
 }
@@ -345,26 +341,25 @@ void OverlayComposer::deInitOpenGLES()
 
 void OverlayComposer::caculateLayerRect(hwc_layer_1_t  *l, struct LayerRect *rect, struct LayerRect *rV)
 {
-
-    const native_handle_t *pNativeHandle = l->handle;
-    struct private_handle_t *private_h = (struct private_handle_t *)pNativeHandle;
-
-    int sourceLeft   = (int)(l->sourceCropf.left);
-    int sourceTop    = (int)(l->sourceCropf.top);
-    int sourceRight  = (int)(l->sourceCropf.right);
-    int sourceBottom = (int)(l->sourceCropf.bottom);
-
     if (l == NULL || rect == NULL)
     {
         ALOGE("overlayDevice::caculateLayerRect, input parameters is NULL");
         return;
     }
 
-    if (private_h == NULL)
+    const native_handle_t *pNativeHandle = l->handle;
+    struct private_handle_t *private_h = (struct private_handle_t *)pNativeHandle;
+
+    if (pNativeHandle == NULL || private_h == NULL)
     {
         ALOGE("overlayDevice::caculateLayerRect, buffer handle is NULL");
         return;
     }
+    int sourceLeft   = (int)(l->sourceCropf.left);
+    int sourceTop    = (int)(l->sourceCropf.top);
+    int sourceRight  = (int)(l->sourceCropf.right);
+    int sourceBottom = (int)(l->sourceCropf.bottom);
+
 
     rect->left = MAX(sourceLeft, 0);
     rect->top = MAX(sourceTop, 0);
@@ -401,12 +396,6 @@ int OverlayComposer::composerHWLayers()
     int status = -1;
     uint32_t numLayer = 0;
 
-    if (mClearBuffer)
-    {
-        ClearOverlayComposerBuffer();
-        return 0;
-    }
-
     if (mList == NULL)
     {
         ALOGE("The HWC List is NULL");
@@ -477,7 +466,8 @@ int OverlayComposer::composerHWLayers()
 
         L->setLayerTransform(pL->transform);
         L->setLayerRect(&r, &rV);
-        //L->setLayerAlpha(pL->alpha);
+        L->setLayerAlpha(pL->planeAlpha);
+        L->setBlendFlag(pL->blending);
 
         L->draw();
 
@@ -518,17 +508,6 @@ bool OverlayComposer::onComposer(hwc_display_contents_1_t* l)
     return true;
 }
 
-void OverlayComposer::onClearOverlayComposerBuffer()
-{
-    mClearBuffer = true;
-
-    sem_post(&cmdSem);
-
-    sem_wait(&doneSem);
-
-    mClearBuffer = false;
-}
-
 void OverlayComposer::onDisplay()
 {
     exhaustAllSem();
diff --git a/hwcomposer/scx15/OverlayComposer/OverlayComposer.h b/hwcomposer/scx15/OverlayComposer/OverlayComposer.h
index f2bd648..0e52da0 100644
--- a/hwcomposer/scx15/OverlayComposer/OverlayComposer.h
+++ b/hwcomposer/scx15/OverlayComposer/OverlayComposer.h
@@ -107,8 +107,6 @@ public:
     /* Start the HWLayer composer command */
     bool onComposer(hwc_display_contents_1_t* l);
 
-    void onClearOverlayComposerBuffer();
-
     /* Start display the composered Overlay Buffer */
     void onDisplay();
 
@@ -116,7 +114,6 @@ private:
 
     /* Overlay composer Info */
     SprdPrimaryPlane *mDisplayPlane;
-    bool mClearBuffer;
 
     /* Hardware Layer Info */
     hwc_display_contents_1_t* mList;
-- 
2.25.0

